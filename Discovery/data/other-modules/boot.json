{
    "total": {
        "value": 308,
        "relation": "eq"
    },
    "max_score": 1.0,
    "hits": [
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "D0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/bcache.nix",
                "option_name": "boot.bcache.enable",
                "option_description": "<rendered-html><p>Whether to enable bcache mount support.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "false",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.emulatedSystems",
                "option_description": "<rendered-html><p>List of systems to emulate. Will also configure Nix to support your\nnew systems. Warning: the builder can execute all emulated systems\nwithin the same build, which introduces impurities in the case of cross\ncompilation.</p>\n</rendered-html>",
                "option_type": "list of (one of \"aarch64-linux\", \"aarch64_be-linux\", \"alpha-linux\", \"armv6l-linux\", \"armv7l-linux\", \"i386-linux\", \"i486-linux\", \"i586-linux\", \"i686-linux\", \"i686-windows\", \"loongarch64-linux\", \"mips-linux\", \"mips64-linux\", \"mips64-linuxabin32\", \"mips64el-linux\", \"mips64el-linuxabin32\", \"mipsel-linux\", \"powerpc-linux\", \"powerpc64-linux\", \"powerpc64le-linux\", \"riscv32-linux\", \"riscv64-linux\", \"sparc-linux\", \"sparc64-linux\", \"wasm32-wasi\", \"wasm64-wasi\", \"x86_64-linux\", \"x86_64-windows\")",
                "option_default": "[ ]",
                "option_example": "[\n  \"wasm32-wasi\"\n  \"x86_64-windows\"\n  \"aarch64-linux\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations",
                "option_description": "<rendered-html><p>Extra binary formats to register with the kernel. See <a\nhref=\"https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html\">https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html</a>\nfor more details.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ek-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.fixBinary",
                "option_description": "<rendered-html><p>Whether to open the interpreter file as soon as the registration is\nloaded, rather than waiting for a relevant file to be invoked.</p>\n<p>See the description of the \u2018F\u2019 flag in the kernel docs for more\ndetails.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "E0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.interpreter",
                "option_description": "<rendered-html><p>The interpreter to invoke to run the program.</p>\n<p>Note that the actual registration will point to /run/binfmt/${name},\nso the kernel interpreter length limit doesn\u2019t apply.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.magicOrExtension",
                "option_description": "<rendered-html><p>The magic number or extension to match on.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.mask",
                "option_description": "<rendered-html><p>A mask to be ANDed with the byte sequence of the file before\nmatching</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Fk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.matchCredentials",
                "option_description": "<rendered-html><p>Whether to launch with the credentials and security token of the\nbinary, not the interpreter (e.g. setuid bit).</p>\n<p>See the description of the \u2018C\u2019 flag in the kernel docs for more\ndetails.</p>\n<p>Implies/requires openBinary = true.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "F0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.offset",
                "option_description": "<rendered-html><p>The byte offset of the magic number used for recognition.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.openBinary",
                "option_description": "<rendered-html><p>Whether to pass the binary to the interpreter as an open file\ndescriptor, instead of a path.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.preserveArgvZero",
                "option_description": "<rendered-html><p>Whether to pass the original argv[0] to the interpreter.</p>\n<p>See the description of the \u2018P\u2019 flag in the kernel docs for more\ndetails;</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Gk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.recognitionType",
                "option_description": "<rendered-html><p>Whether to recognize executables by magic number or extension.</p>\n</rendered-html>",
                "option_type": "one of \"magic\", \"extension\"",
                "option_default": "\"magic\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "G0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/binfmt.nix",
                "option_name": "boot.binfmt.registrations.<name>.wrapInterpreterInShell",
                "option_description": "<rendered-html><p>Whether to wrap the interpreter in a shell script.</p>\n<p>This allows a shell command to be set as the interpreter.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/modprobe.nix",
                "option_name": "boot.blacklistedKernelModules",
                "option_description": "<rendered-html><p>List of names of kernel modules that should not be loaded\nautomatically by the hardware probing code.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"cirrusfb\"\n  \"i2c_piix4\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/activation/bootspec.nix",
                "option_name": "boot.bootspec.enableValidation",
                "option_description": "<rendered-html><p>Whether to enable the validation of bootspec documents for each\nbuild. This will introduce Go in the build-time closure as we are\nrelying on <a href=\"https://cuelang.org/\">Cuelang</a> for schema\nvalidation. Enable this option if you want to ascertain that your\ndocuments are correct .</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Hk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/activation/bootspec.nix",
                "option_name": "boot.bootspec.extensions",
                "option_description": "<rendered-html><p>User-defined data that extends the bootspec document.</p>\n<p>To reduce incompatibility and prevent names from clashing between\napplications, it is <strong>highly recommended</strong> to use a unique\nnamespace for your extensions.</p>\n</rendered-html>",
                "option_type": "attribute set of anything",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "H0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.consoleLogLevel",
                "option_description": "<rendered-html><p>The kernel console <code>loglevel</code>. All Kernel Messages with a\nlog level smaller than this setting will be printed to the console.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "4",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "IE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/misc/crashdump.nix",
                "option_name": "boot.crashDump.enable",
                "option_description": "<rendered-html><p>If enabled, NixOS will set up a kernel that will boot on crash, and\nleave the user in systemd rescue to be able to save the crashed kernel\ndump at /proc/vmcore. It also activates the NMI watchdog.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "IU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/misc/crashdump.nix",
                "option_name": "boot.crashDump.kernelParams",
                "option_description": "<rendered-html><p>Parameters that will be passed to the kernel kexec-ed on crash.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"1\"\n  \"boot.shell_on_fail\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ik-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/misc/crashdump.nix",
                "option_name": "boot.crashDump.reservedMemory",
                "option_description": "<rendered-html><p>The amount of memory reserved for the crashdump kernel. If you choose\na too high value, dmesg will mention \u201ccrashkernel reservation\nfailed\u201d.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"128M\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "I0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.devShmSize",
                "option_description": "<rendered-html><p>Size limit for the /dev/shm tmpfs. Look at mount(8), tmpfs size\noption, for the accepted syntax.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"50%\"",
                "option_example": "\"256m\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.devSize",
                "option_description": "<rendered-html><p>Size limit for the /dev tmpfs. Look at mount(8), tmpfs size option,\nfor the accepted syntax.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"5%\"",
                "option_example": "\"32m\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/nixos-containers.nix",
                "option_name": "boot.enableContainers",
                "option_description": "<rendered-html><p>Whether to enable support for NixOS containers. Defaults to true (at\nno cost if containers are not actually used).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Jk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/modprobe.nix",
                "option_name": "boot.extraModprobeConfig",
                "option_description": "<rendered-html><p>Any additional configuration to be appended to the generated <code\nclass=\"interpreted-text\" role=\"file\">modprobe.conf</code>. This is\ntypically used to specify module options. See <code\nclass=\"interpreted-text\" role=\"manpage\">modprobe.d(5)</code> for\ndetails.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  options parport_pc io=0x378 irq=7 dma=1\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "J0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.extraModulePackages",
                "option_description": "<rendered-html><p>A list of additional packages supplying kernel modules.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "[ config.boot.kernelPackages.nvidia_x11 ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-2.nix",
                "option_name": "boot.extraSystemdUnitPaths",
                "option_description": "<rendered-html><p>Additional paths that get appended to the SYSTEMD_UNIT_PATH\nenvironment variable that can contain mutable unit files.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/grow-partition.nix",
                "option_name": "boot.growPartition",
                "option_description": "<rendered-html><p>Whether to enable growing the root partition on boot.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Kk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/hardware/udev.nix",
                "option_name": "boot.hardwareScan",
                "option_description": "<rendered-html><p>Whether to try to load kernel modules for all detected hardware.\nUsually this does a good job of providing you with the modules you need,\nbut sometimes it can crash the system or cause other nasty effects.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "K0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.initrd.availableKernelModules",
                "option_description": "<rendered-html><p>The set of kernel modules in the initial ramdisk used during the boot\nprocess. This set must include all modules necessary for mounting the\nroot device. That is, it should include modules for the physical device\n(e.g., SCSI drivers) and for the file system (e.g., ext3). The set\nspecified here is automatically closed under the module dependency\nrelation, i.e., all dependencies of the modules list here are included\nautomatically. The modules listed here are available in the initrd, but\nare only loaded on demand (e.g., the ext3 module is loaded automatically\nwhen an ext3 filesystem is mounted, and modules for PCI devices are\nloaded when they match the PCI ID of a device in your system). To force\na module to be loaded, include it in <code class=\"interpreted-text\"\nrole=\"option\">boot.initrd.kernelModules</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"sata_nv\"\n  \"ext3\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.checkJournalingFS",
                "option_description": "<rendered-html><p>Whether to run <code class=\"interpreted-text\"\nrole=\"command\">fsck</code> on journaling filesystems such as ext3.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/clevis.nix",
                "option_name": "boot.initrd.clevis.devices",
                "option_description": "<rendered-html><p>Encrypted devices that need to be unlocked at boot using Clevis</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Lk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/clevis.nix",
                "option_name": "boot.initrd.clevis.devices.<name>.secretFile",
                "option_description": "<rendered-html><p>Clevis JWE file used to decrypt the device at boot, in concert with\nthe chosen pin (one of TPM2, Tang server, or SSS).</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "L0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/clevis.nix",
                "option_name": "boot.initrd.clevis.enable",
                "option_description": "<rendered-html><p>Whether to enable Clevis in initrd.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ME-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/clevis.nix",
                "option_name": "boot.initrd.clevis.package",
                "option_description": "<rendered-html><p>Clevis package</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "\"pkgs.clevis\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "MU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/clevis.nix",
                "option_name": "boot.initrd.clevis.useTang",
                "option_description": "<rendered-html><p>Whether the Clevis JWE file used to decrypt the devices uses a Tang\nserver as a pin.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Mk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.compressor",
                "option_description": "<rendered-html><p>The compressor to use on the initrd image. May be any of:</p>\n<ul>\n<li>The name of one of the predefined compressors, see <code\nclass=\"interpreted-text\"\nrole=\"file\">pkgs/build-support/kernel/initrd-compressor-meta.nix</code>\nfor the definitions.</li>\n<li>A function which, given the nixpkgs package set, returns the path to\na compressor tool, e.g. <code>pkgs: \"${pkgs.pigz}/bin/pigz\"</code></li>\n<li>(not recommended, because it does not work when cross-compiling) the\nfull path to a compressor tool, e.g.\n<code>\"${pkgs.pigz}/bin/pigz\"</code></li>\n</ul>\n<p>The given program should read data from stdin and write it to stdout\ncompressed.</p>\n</rendered-html>",
                "option_type": "string or function that evaluates to a(n) string",
                "option_default": "<rendered-html><p><code>zstd</code> if the kernel supports it (5.9+), <code>gzip</code>\nif not</p>\n</rendered-html>",
                "option_example": "\"xz\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "M0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.compressorArgs",
                "option_description": "<rendered-html><p>Arguments to pass to the compressor for the initrd image, or null to\nuse the compressor\u2019s defaults.</p>\n</rendered-html>",
                "option_type": "null or (list of string)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.enable",
                "option_description": "<rendered-html><p>Whether to enable the NixOS initial RAM disk (initrd). This may be\nneeded to perform some initialisation tasks (like mounting\nnetwork/encrypted file systems) before continuing the boot process.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "!config.boot.isContainer",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.extraFiles",
                "option_description": "<rendered-html><p>Extra files to link and copy in to the initrd.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Nk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.extraFiles.<name>.source",
                "option_description": "<rendered-html><p>The object to make available inside the initrd.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "N0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.initrd.includeDefaultModules",
                "option_description": "<rendered-html><p>This option, if set, adds a collection of default kernel modules to\n<code class=\"interpreted-text\"\nrole=\"option\">boot.initrd.availableKernelModules</code> and <code\nclass=\"interpreted-text\"\nrole=\"option\">boot.initrd.kernelModules</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "OE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.initrd.kernelModules",
                "option_description": "<rendered-html><p>List of modules that are always loaded by the initrd.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "OU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.cryptoModules",
                "option_description": "<rendered-html><p>A list of cryptographic kernel modules needed to decrypt the root\ndevice(s). The default includes all common modules.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"aes\"\n  \"aes_generic\"\n  \"blowfish\"\n  \"twofish\"\n  \"serpent\"\n  \"cbc\"\n  \"xts\"\n  \"lrw\"\n  \"sha1\"\n  \"sha256\"\n  \"sha512\"\n  \"af_alg\"\n  \"algif_skcipher\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ok-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices",
                "option_description": "<rendered-html><p>The encrypted disk that should be opened before the root filesystem\nis mounted. Both LVM-over-LUKS and LUKS-over-LVM setups are supported.\nThe unencrypted devices can be accessed as <code\nclass=\"interpreted-text\" role=\"file\">/dev/mapper/\u00abname\u00bb</code>.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  luksroot = {\n    device = \"/dev/disk/by-uuid/430e9eff-d852-4f68-aa3b-2fa3599ebe08\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "O0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.allowDiscards",
                "option_description": "<rendered-html><p>Whether to allow TRIM requests to the underlying device. This option\nhas security implications; please read the LUKS documentation before\nactivating it. This option is incompatible with authenticated encryption\n(dm-crypt stacked over dm-integrity).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "PE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.bypassWorkqueues",
                "option_description": "<rendered-html><p>Whether to bypass dm-crypt\u2019s internal read and write workqueues.\nEnabling this should improve performance on SSDs; see <a\nhref=\"https://wiki.archlinux.org/index.php/Dm-crypt/Specialties#Disable_workqueue_for_increased_solid_state_drive_(SSD)_performance\">here</a>\nfor more information. Needs Linux 5.9 or later.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "PU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.device",
                "option_description": "<rendered-html><p>Path of the underlying encrypted block device.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"/dev/disk/by-uuid/430e9eff-d852-4f68-aa3b-2fa3599ebe08\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Pk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.fallbackToPassword",
                "option_description": "<rendered-html><p>Whether to fallback to interactive passphrase prompt if the keyfile\ncannot be found. This will prevent unattended boot should the keyfile go\nmissing.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "P0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.fido2.credential",
                "option_description": "<rendered-html><p>The FIDO2 credential ID.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"f1d00200d8dc783f7fb1e10ace8da27f8312d72692abfca2f7e4960a73f48e82e1f7571f6ebfcee9fb434f9886ccc8fcc52a6614d8d2\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "QE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.fido2.credentials",
                "option_description": "<rendered-html><p>List of FIDO2 credential IDs.</p>\n<p>Use this if you have multiple FIDO2 keys you want to use for the same\nluks device.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"f1d00200d8dc783f7fb1e10ace8da27f8312d72692abfca2f7e4960a73f48e82e1f7571f6ebfcee9fb434f9886ccc8fcc52a6614d8d2\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "QU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.fido2.gracePeriod",
                "option_description": "<rendered-html><p>Time in seconds to wait for the FIDO2 key.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "10",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Qk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.fido2.passwordLess",
                "option_description": "<rendered-html><p>Defines whatever to use an empty string as a default salt.</p>\n<p>Enable only when your device is PIN protected, such as <a\nhref=\"https://trezor.io/\">Trezor</a>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Q0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.gpgCard",
                "option_description": "<rendered-html><p>The option to use this LUKS device with a GPG encrypted luks password\nby the GPG Smartcard. If null (the default), GPG-Smartcard will be\ndisabled for this device.</p>\n</rendered-html>",
                "option_type": "null or (submodule)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "RE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.gpgCard.encryptedPass",
                "option_description": "<rendered-html><p>Path to the GPG encrypted passphrase.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "RU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.gpgCard.gracePeriod",
                "option_description": "<rendered-html><p>Time in seconds to wait for the GPG Smartcard.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "10",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Rk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.gpgCard.publicKey",
                "option_description": "<rendered-html><p>Path to the Public Key.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "R0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.header",
                "option_description": "<rendered-html><p>The name of the file or block device that should be used as header\nfor the encrypted device.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/root/header.img\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "SE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.keyFile",
                "option_description": "<rendered-html><p>The name of the file (can be a raw device or a partition) that should\nbe used as the decryption key for the encrypted device. If not\nspecified, you will be prompted for a passphrase instead.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/dev/sdb1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "SU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.keyFileOffset",
                "option_description": "<rendered-html><p>The offset of the key file. Use this in combination with\n<code>keyFileSize</code> to use part of a file as key file (often the\ncase if a raw device or partition is used as a key file). If not\nspecified, the key begins at the first byte of <code>keyFile</code>.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "4096",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Sk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.keyFileSize",
                "option_description": "<rendered-html><p>The size of the key file. Use this if only the beginning of the key\nfile should be used as a key (often the case if a raw device or\npartition is used as key file). If not specified, the whole\n<code>keyFile</code> will be used decryption, instead of just the first\n<code>keyFileSize</code> bytes.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "4096",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "S0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.keyFileTimeout",
                "option_description": "<rendered-html><p>The amount of time in seconds for a keyFile to appear before timing\nout and trying passwords.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "5",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "TE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.postOpenCommands",
                "option_description": "<rendered-html><p>Commands that should be run right after we have mounted our LUKS\ndevice.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  umount /tmp/persistent\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "TU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.preLVM",
                "option_description": "<rendered-html><p>Whether the luksOpen will be attempted before LVM scan or after\nit.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Tk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.preOpenCommands",
                "option_description": "<rendered-html><p>Commands that should be run right before we try to mount our LUKS\ndevice. This can be useful, if the keys needed to open the drive is on\nanother partition.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  mkdir -p /tmp/persistent\n  mount -t zfs rpool/safe/persistent /tmp/persistent\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "T0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.tryEmptyPassphrase",
                "option_description": "<rendered-html><p>If keyFile fails then try an empty passphrase first before prompting\nfor password.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "UE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey",
                "option_description": "<rendered-html><p>The options to use for this LUKS device in YubiKey-PBA. If null (the\ndefault), YubiKey-PBA will be disabled for this device.</p>\n</rendered-html>",
                "option_type": "null or (submodule)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "UU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.gracePeriod",
                "option_description": "<rendered-html><p>Time in seconds to wait for the YubiKey.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "10",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Uk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.iterationStep",
                "option_description": "<rendered-html><p>How much the iteration count for PBKDF2 is increased at each\nsuccessful authentication.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "0",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "U0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.keyLength",
                "option_description": "<rendered-html><p>Length of the LUKS slot key derived with PBKDF2 in byte.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "64",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "VE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.saltLength",
                "option_description": "<rendered-html><p>Length of the new salt in byte (64 is the effective maximum).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "16",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "VU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.slot",
                "option_description": "<rendered-html><p>Which slot on the YubiKey to challenge.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "2",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Vk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.storage.device",
                "option_description": "<rendered-html><p>An unencrypted device that will temporarily be mounted in stage-1.\nMust contain the current salt to create the challenge for this LUKS\ndevice.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "\"/dev/sda1\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "V0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.storage.fsType",
                "option_description": "<rendered-html><p>The filesystem of the unencrypted device.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"vfat\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "WE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.storage.path",
                "option_description": "<rendered-html><p>Absolute path of the salt on the unencrypted device with that\ndevice\u2019s root directory as \u201c/\u201d.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"/crypt-storage/default\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "WU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.devices.<name>.yubikey.twoFactor",
                "option_description": "<rendered-html><p>Whether to use a passphrase and a YubiKey (true), or only a YubiKey\n(false).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Wk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.fido2Support",
                "option_description": "<rendered-html><p>Enables support for authenticating with FIDO2 devices.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "W0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.gpgSupport",
                "option_description": "<rendered-html><p>Enables support for authenticating with a GPG encrypted password.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "XE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.mitigateDMAAttacks",
                "option_description": "<rendered-html><p>Unless enabled, encryption keys can be easily recovered by an\nattacker with physical access to any machine with PCMCIA, ExpressCard,\nThunderBolt or FireWire port. More information is available at <a\nhref=\"https://en.wikipedia.org/wiki/DMA_attack\">https://en.wikipedia.org/wiki/DMA_attack</a>.</p>\n<p>This option blacklists FireWire drivers, but doesn\u2019t remove them. You\ncan manually load the drivers if you need to use a FireWire device, but\ndon\u2019t forget to unload them!</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "XU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.reusePassphrases",
                "option_description": "<rendered-html><p>When opening a new LUKS device try reusing last successful\npassphrase.</p>\n<p>Useful for mounting a number of devices that use the same passphrase\nwithout retyping it several times.</p>\n<p>Such setup can be useful if you use <code class=\"interpreted-text\"\nrole=\"command\">cryptsetup luksSuspend</code>. Different LUKS devices\nwill still have different master keys even when using the same\npassphrase.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Xk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/luksroot.nix",
                "option_name": "boot.initrd.luks.yubikeySupport",
                "option_description": "<rendered-html><p>Enables support for authenticating with a YubiKey on LUKS devices.\nSee the NixOS wiki for information on how to properly setup a LUKS\ndevice and a YubiKey to work with this feature.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "X0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-network.nix",
                "option_name": "boot.initrd.network.enable",
                "option_description": "<rendered-html><p>Add network connectivity support to initrd. The network may be\nconfigured using the <code>ip</code> kernel parameter, as described in\n<a\nhref=\"https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt\">the\nkernel documentation</a>. Otherwise, if <code class=\"interpreted-text\"\nrole=\"option\">networking.useDHCP</code> is enabled, an IP address is\nacquired using DHCP.</p>\n<p>You should add the module(s) required for your network card to\nboot.initrd.availableKernelModules.\n<code>lspci -v | grep -iA8 'network\\|ethernet'</code> will tell you\nwhich.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "YE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-network.nix",
                "option_name": "boot.initrd.network.flushBeforeStage2",
                "option_description": "<rendered-html><p>Whether to clear the configuration of the interfaces that were set up\nin the initrd right before stage 2 takes over. Stage 2 will do the\nregular network configuration based on the NixOS networking options.</p>\n<p>The default is false when systemd is enabled in initrd, because the\nsystemd-networkd documentation suggests it.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"!config.boot.initrd.systemd.enable\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "YU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-openvpn.nix",
                "option_name": "boot.initrd.network.openvpn.configuration",
                "option_description": "<rendered-html><p>The configuration file for OpenVPN.</p>\n<div class=\"warning\">\n<p>Unless your bootloader supports initrd secrets, this configuration is\nstored insecurely in the global Nix store.</p>\n</div>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": "./configuration.ovpn",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Yk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-openvpn.nix",
                "option_name": "boot.initrd.network.openvpn.enable",
                "option_description": "<rendered-html><p>Starts an OpenVPN client during initrd boot. It can be used to e.g.\nremotely accessing the SSH service controlled by <code\nclass=\"interpreted-text\" role=\"option\">boot.initrd.network.ssh</code> or\nother network services included. Service is killed when stage-1 boot is\nfinished.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Y0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-network.nix",
                "option_name": "boot.initrd.network.postCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed after stage 1 of the boot has\ninitialised the network.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ZE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.authorizedKeyFiles",
                "option_description": "<rendered-html><p>Authorized keys taken from files for the root user on initrd. You can\ncombine the <code>authorizedKeyFiles</code> and\n<code>authorizedKeys</code> options.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "config.users.users.root.openssh.authorizedKeys.keyFiles",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ZU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.authorizedKeys",
                "option_description": "<rendered-html><p>Authorized keys for the root user on initrd. You can combine the\n<code>authorizedKeys</code> and <code>authorizedKeyFiles</code>\noptions.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "config.users.users.root.openssh.authorizedKeys.keys",
                "option_example": "[\n  \"ssh-rsa AAAAB3NzaC1yc2etc/etc/etcjwrsh8e596z6J0l7 example@host\"\n  \"ssh-ed25519 AAAAC3NzaCetcetera/etceteraJZMfk3QPfQ foo@bar\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Zk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.enable",
                "option_description": "<rendered-html><p>Start SSH service during initrd boot. It can be used to debug failing\nboot on a remote server, enter pasphrase for an encrypted partition etc.\nService is killed when stage-1 boot is finished.</p>\n<p>The sshd configuration is largely inherited from <code\nclass=\"interpreted-text\" role=\"option\">services.openssh</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Z0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.extraConfig",
                "option_description": "<rendered-html><p>Verbatim contents of <code class=\"interpreted-text\"\nrole=\"file\">sshd_config</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "aE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.hostKeys",
                "option_description": "<rendered-html><p>Specify SSH host keys to import into the initrd.</p>\n<p>To generate keys, use <code class=\"interpreted-text\"\nrole=\"manpage\">ssh-keygen(1)</code> as root:</p>\n<pre><code>ssh-keygen -t rsa -N &quot;&quot; -f /etc/secrets/initrd/ssh_host_rsa_key\nssh-keygen -t ed25519 -N &quot;&quot; -f /etc/secrets/initrd/ssh_host_ed25519_key</code></pre>\n<div class=\"warning\">\n<p>Unless your bootloader supports initrd secrets, these keys are stored\ninsecurely in the global Nix store. Do NOT use your regular SSH host\nprivate keys for this purpose or you\u2019ll expose them to regular\nusers!</p>\n<p>Additionally, even if your initrd supports secrets, if you\u2019re using\ninitrd SSH to unlock an encrypted disk then using your regular host keys\nexposes the private keys on your unencrypted boot partition.</p>\n</div>\n</rendered-html>",
                "option_type": "list of (string or path)",
                "option_default": "[ ]",
                "option_example": "[\n  \"/etc/secrets/initrd/ssh_host_rsa_key\"\n  \"/etc/secrets/initrd/ssh_host_ed25519_key\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "aU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.ignoreEmptyHostKeys",
                "option_description": "<rendered-html><p>Allow leaving <code class=\"interpreted-text\"\nrole=\"option\">config.boot.initrd.network.ssh.hostKeys</code> empty, to\ndeploy ssh host keys out of band.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ak-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.port",
                "option_description": "<rendered-html><p>Port on which SSH initrd service should listen.</p>\n</rendered-html>",
                "option_type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "22",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "a0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-ssh.nix",
                "option_name": "boot.initrd.network.ssh.shell",
                "option_description": "<rendered-html><p>Login shell of the remote user. Can be used to limit actions user can\ndo.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "\"\\\"/bin/ash\\\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "bE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-network.nix",
                "option_name": "boot.initrd.network.udhcpc.enable",
                "option_description": "<rendered-html><p>Enables the udhcpc service during stage 1 of the boot process. This\ndefaults to <code class=\"interpreted-text\"\nrole=\"option\">networking.useDHCP</code>. Therefore, this useful if\nuseDHCP is off but the initramfs should do dhcp.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"networking.useDHCP\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "bU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/initrd-network.nix",
                "option_name": "boot.initrd.network.udhcpc.extraArgs",
                "option_description": "<rendered-html><p>Additional command-line arguments passed verbatim to udhcpc if <code\nclass=\"interpreted-text\" role=\"option\">boot.initrd.network.enable</code>\nand <code class=\"interpreted-text\"\nrole=\"option\">boot.initrd.network.udhcpc.enable</code> are enabled.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "bk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.postDeviceCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed immediately after stage 1 of the boot\nhas loaded kernel modules and created device nodes in <code\nclass=\"interpreted-text\" role=\"file\">/dev</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "b0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.postMountCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed immediately after the stage 1\nfilesystems have been mounted.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "cE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.postResumeCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed immediately after attempting to\nresume.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "cU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.preDeviceCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed before udev is started to create device\nnodes.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ck-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.preFailCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed before the failure prompt is shown.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "c0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.preLVMCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed immediately before LVM discovery.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "dE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.prepend",
                "option_description": "<rendered-html><p>Other initrd files to prepend to the final initrd we are\nbuilding.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "dU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.secrets",
                "option_description": "<rendered-html><p>Secrets to append to the initrd. The attribute name is the path the\nsecret should have inside the initrd, the value is the path it should be\ncopied from (or null for the same path inside and out).</p>\n<p>Note that <code>nixos-rebuild switch</code> will generate the initrd\nalso for past generations, so if secrets are moved or deleted you will\nalso have to garbage collect the generations that use those secrets.</p>\n</rendered-html>",
                "option_type": "attribute set of (null or path)",
                "option_default": "{ }",
                "option_example": "{ \"/etc/dropbear/dropbear_rsa_host_key\" =\n    ./secret-dropbear-key;\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "dk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/bcache.nix",
                "option_name": "boot.initrd.services.bcache.enable",
                "option_description": "<rendered-html><p><em>This will only be used when systemd is used in stage 1.</em></p>\n<p>Whether to enable bcache support in the initrd.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "d0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/lvm.nix",
                "option_name": "boot.initrd.services.lvm.enable",
                "option_description": "<rendered-html><p><em>This will only be used when systemd is used in stage 1.</em></p>\n<p>Whether to enable booting from LVM2 in the initrd.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "eE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/resolved.nix",
                "option_name": "boot.initrd.services.resolved.enable",
                "option_description": "<rendered-html><p>Whether to enable resolved for stage 1 networking. Uses the toplevel\n\u2018services.resolved\u2019 options for \u2018resolved.conf\u2019</p>\n</rendered-html>",
                "option_type": "unspecified value",
                "option_default": "\"config.boot.initrd.systemd.network.enable\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "eU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/hardware/udev.nix",
                "option_name": "boot.initrd.services.udev.binPackages",
                "option_description": "<rendered-html><p><em>This will only be used when systemd is used in stage 1.</em></p>\n<p>Packages to search for binaries that are referenced by the udev rules\nin stage 1. This list always contains /bin of the initrd.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ek-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/hardware/udev.nix",
                "option_name": "boot.initrd.services.udev.packages",
                "option_description": "<rendered-html><p><em>This will only be used when systemd is used in stage 1.</em></p>\n<p>List of packages containing <code class=\"interpreted-text\"\nrole=\"command\">udev</code> rules that will be copied to stage 1. All\nfiles found in <code class=\"interpreted-text\"\nrole=\"file\">\u00abpkg\u00bb/etc/udev/rules.d</code> and <code\nclass=\"interpreted-text\" role=\"file\">\u00abpkg\u00bb/lib/udev/rules.d</code> will\nbe included.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "e0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/hardware/udev.nix",
                "option_name": "boot.initrd.services.udev.rules",
                "option_description": "<rendered-html><p><code class=\"interpreted-text\" role=\"command\">udev</code> rules to\ninclude in the initrd <em>only</em>. They\u2019ll be written into file <code\nclass=\"interpreted-text\" role=\"file\">99-local.rules</code>. Thus they\nare read and applied after the essential initrd rules.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{address}==\"00:1D:60:B9:6D:4F\", KERNEL==\"eth*\", NAME=\"my_fast_network_card\"\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.supportedFilesystems",
                "option_description": "<rendered-html><p>Names of supported filesystem types, or an attribute set of file\nsystem types and their state. The set form may be used together with\n<code>lib.mkForce</code> to explicitly disable support for specific\nfilesystems, e.g. to disable ZFS with an unsupported kernel.</p>\n</rendered-html>",
                "option_type": "(attribute set of boolean) or (list of string) convertible to it",
                "option_default": "{ }",
                "option_example": "{\n  btrfs = true;\n  zfs = lib.mkForce false;\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.additionalUpstreamUnits",
                "option_description": "<rendered-html><p>Additional units shipped with systemd that shall be enabled.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"debug-shell.service\"\n  \"systemd-quotacheck.service\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.automounts",
                "option_description": "<rendered-html><p>Definition of systemd automount units. This is a list instead of an\nattrSet, because systemd mandates the names to be derived from the\n\u2018where\u2019 attribute.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "f0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.contents",
                "option_description": "<rendered-html><p>Set of files that have to be linked into the initrd</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  \"/etc/hostname\".text = \"mymachine\";\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "gE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.contents.<name>.enable",
                "option_description": "<rendered-html><p>Whether to enable copying of this file and symlinking it.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "gU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.contents.<name>.source",
                "option_description": "<rendered-html><p>Path of the source file.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "gk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.contents.<name>.target",
                "option_description": "<rendered-html><p>Path of the symlink.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "\"\u2039name\u203a\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "g0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.contents.<name>.text",
                "option_description": "<rendered-html><p>Text of the file.</p>\n</rendered-html>",
                "option_type": "null or strings concatenated with \"\\n\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "hE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/system/dbus.nix",
                "option_name": "boot.initrd.systemd.dbus.enable",
                "option_description": "<rendered-html><p>Whether to enable dbus in stage 1.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "hU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.emergencyAccess",
                "option_description": "<rendered-html><p>Set to true for unauthenticated emergency access, and false for no\nemergency access.</p>\n<p>Can also be set to a hashed super user password to allow\nauthenticated access to the emergency mode.</p>\n</rendered-html>",
                "option_type": "boolean or null or (string, not containing newlines or colons)",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "hk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.enable",
                "option_description": "<rendered-html><p>Whether to enable systemd in initrd. The unit options such as <code\nclass=\"interpreted-text\"\nrole=\"option\">boot.initrd.systemd.services</code> are the same as their\nstage 2 counterparts such as <code class=\"interpreted-text\"\nrole=\"option\">systemd.services</code>, except that\n<code>restartTriggers</code> and <code>reloadTriggers</code> are not\nsupported.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "h0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.enableTpm2",
                "option_description": "<rendered-html><p>Whether to enable TPM2 support in the initrd.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "iE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.extraBin",
                "option_description": "<rendered-html><p>Tools to add to /bin</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": "{\n  umount = ${pkgs.util-linux}/bin/umount;\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "iU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.extraConfig",
                "option_description": "<rendered-html><p>Extra config options for systemd. See systemd-system.conf(5) man page\nfor available options.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"DefaultLimitCORE=infinity\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ik-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/users-groups.nix",
                "option_name": "boot.initrd.systemd.groups",
                "option_description": "<rendered-html><p>Groups to include in initrd.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "i0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/users-groups.nix",
                "option_name": "boot.initrd.systemd.groups.<name>.gid",
                "option_description": "<rendered-html><p>ID of the group in initrd.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "config.users.groups.${name}.gid",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "jE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.initrdBin",
                "option_description": "<rendered-html><p>Packages to include in /bin for the stage 1 emergency shell.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "jU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.managerEnvironment",
                "option_description": "<rendered-html><p>Environment variables of PID 1. These variables are <em>not</em>\npassed to started units.</p>\n</rendered-html>",
                "option_type": "attribute set of (null or string or path or package)",
                "option_default": "{ }",
                "option_example": "{\n  SYSTEMD_LOG_LEVEL = \"debug\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "jk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.mounts",
                "option_description": "<rendered-html><p>Definition of systemd mount units. This is a list instead of an\nattrSet, because systemd mandates the names to be derived from the\n\u2018where\u2019 attribute.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "j0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.config",
                "option_description": "<rendered-html><p>Definition of global systemd network config.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "kE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.enable",
                "option_description": "<rendered-html><p>Whether to enable networkd or not.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "kU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.links",
                "option_description": "<rendered-html><p>Definition of systemd network links.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "kk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.netdevs",
                "option_description": "<rendered-html><p>Definition of systemd network devices.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "k0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.networks",
                "option_description": "<rendered-html><p>Definition of systemd networks.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "lE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.wait-online.anyInterface",
                "option_description": "<rendered-html><p>Whether to consider the network online when any interface is online,\nas opposed to all of them. This is useful on portable machines with a\nwired and a wireless interface, for example.</p>\n<p>This is on by default if <code class=\"interpreted-text\"\nrole=\"option\">networking.useDHCP</code> is enabled.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"config.networking.useDHCP\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "lU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.wait-online.enable",
                "option_description": "<rendered-html><p>Whether to enable the systemd-networkd-wait-online service.</p>\n<p>systemd-networkd-wait-online can timeout and fail if there are no\nnetwork interfaces available for it to manage. When systemd-networkd is\nenabled but a different service is responsible for managing the system\u2019s\ninternet connection (for example, NetworkManager or connman are used to\nmanage WiFi connections), this service is unnecessary and can be\ndisabled.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "false",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "lk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.wait-online.extraArgs",
                "option_description": "<rendered-html><p>Extra command-line arguments to pass to systemd-networkd-wait-online.\nThese also affect per-interface\n<code>systemd-network-wait-online@</code> services.</p>\n<p>See <code class=\"interpreted-text\"\nrole=\"manpage\">systemd-networkd-wait-online.service(8)</code> for all\navailable options.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "l0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.wait-online.ignoredInterfaces",
                "option_description": "<rendered-html><p>Network interfaces to be ignored when deciding if the system is\nonline.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"wg0\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "mE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/networkd.nix",
                "option_name": "boot.initrd.systemd.network.wait-online.timeout",
                "option_description": "<rendered-html><p>Time to wait for the network to come online, in seconds. Set to 0 to\ndisable.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": "120",
                "option_example": "0",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "mU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.package",
                "option_description": "<rendered-html><p>The systemd package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "config.systemd.package",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "mk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.packages",
                "option_description": "<rendered-html><p>Packages providing systemd units and hooks.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "[ pkgs.systemd-cryptsetup-generator ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "m0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.paths",
                "option_description": "<rendered-html><p>Definition of systemd path units.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "nE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/repart.nix",
                "option_name": "boot.initrd.systemd.repart.device",
                "option_description": "<rendered-html><p>The device to operate on.</p>\n<p>If <code>device == null</code>, systemd-repart will operate on the\ndevice backing the root partition. So in order to dynamically\n<em>create</em> the root partition in the initrd you need to set a\ndevice.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/dev/vda\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "nU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/repart.nix",
                "option_name": "boot.initrd.systemd.repart.enable",
                "option_description": "<rendered-html><p>Grow and add partitions to a partition table at boot time in the\ninitrd. systemd-repart only works with GPT partition tables.</p>\n<p>To run systemd-repart after the initrd, see\n<code>options.systemd.repart.enable</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "nk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.root",
                "option_description": "<rendered-html><p>Controls how systemd will interpret the root FS in initrd. See <a\nhref=\"https://www.freedesktop.org/software/systemd/man/kernel-command-line.html\"><code\nclass=\"interpreted-text\"\nrole=\"manpage\">kernel-command-line(7)</code></a>. NixOS currently does\nnot allow specifying the root file system itself this way. Instead, the\n<code>fstab</code> value is used in order to interpret the root file\nsystem specified with the <code>fileSystems</code> option.</p>\n</rendered-html>",
                "option_type": "one of \"fstab\", \"gpt-auto\"",
                "option_default": "\"fstab\"",
                "option_example": "\"gpt-auto\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "n0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.services",
                "option_description": "<rendered-html><p>Definition of systemd service units.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "oE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.slices",
                "option_description": "<rendered-html><p>Definition of slice configurations.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "oU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.sockets",
                "option_description": "<rendered-html><p>Definition of systemd socket units.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ok-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.storePaths",
                "option_description": "<rendered-html><p>Store paths to copy into the initrd as well.</p>\n</rendered-html>",
                "option_type": "list of ((optionally newline-terminated) single-line string or package)",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "o0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.strip",
                "option_description": "<rendered-html><p>Whether to completely strip executables and libraries copied to the\ninitramfs.</p>\n<p>Setting this to false may save on the order of 30MiB on the machine\nbuilding the system (by avoiding a binutils reference), at the cost of\n~1MiB of initramfs size. This puts this option firmly in the territory\nof micro-optimisation.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "pE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.suppressedStorePaths",
                "option_description": "<rendered-html><p>Store paths specified in the storePaths option that should not be\ncopied.</p>\n</rendered-html>",
                "option_type": "list of (optionally newline-terminated) single-line string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "pU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.suppressedUnits",
                "option_description": "<rendered-html><p>A list of units to skip when generating system systemd configuration\ndirectory. This has priority over upstream units, <code\nclass=\"interpreted-text\" role=\"option\">boot.initrd.systemd.units</code>,\nand <code class=\"interpreted-text\"\nrole=\"option\">boot.initrd.systemd.additionalUpstreamUnits</code>. The\nmain purpose of this is to prevent a upstream systemd unit from being\nadded to the initrd with any modifications made to it by other NixOS\nmodules.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"systemd-backlight@.service\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "pk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.targets",
                "option_description": "<rendered-html><p>Definition of systemd target units.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "p0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.timers",
                "option_description": "<rendered-html><p>Definition of systemd timer units.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "qE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/initrd.nix",
                "option_name": "boot.initrd.systemd.units",
                "option_description": "<rendered-html><p>Definition of systemd units.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "qU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/users-groups.nix",
                "option_name": "boot.initrd.systemd.users",
                "option_description": "<rendered-html><p>Users to include in initrd.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "qk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/users-groups.nix",
                "option_name": "boot.initrd.systemd.users.<name>.group",
                "option_description": "<rendered-html><p>Group the user belongs to in initrd.</p>\n</rendered-html>",
                "option_type": "(optionally newline-terminated) single-line string",
                "option_default": "config.users.users.${name}.group",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "q0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/users-groups.nix",
                "option_name": "boot.initrd.systemd.users.<name>.shell",
                "option_description": "<rendered-html><p>The path to the user\u2019s shell in initrd.</p>\n</rendered-html>",
                "option_type": "path, not containing newlines or colons",
                "option_default": "${pkgs.shadow}/bin/nologin",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "rE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/users-groups.nix",
                "option_name": "boot.initrd.systemd.users.<name>.uid",
                "option_description": "<rendered-html><p>ID of the user in initrd.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "config.users.users.${name}.uid",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "rU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/unl0kr.nix",
                "option_name": "boot.initrd.unl0kr.enable",
                "option_description": "<rendered-html><p>Whether to enable the unl0kr on-screen keyboard in initrd to unlock\nLUKS.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "rk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.initrd.verbose",
                "option_description": "<rendered-html><p>Verbosity of the initrd. Please note that disabling verbosity removes\nonly the mandatory messages generated by the NixOS scripts. For a\ncompletely silent boot, you might also want to set the two following\nconfiguration options:</p>\n<ul>\n<li><code>boot.consoleLogLevel = 0;</code></li>\n<li><code>boot.kernelParams = [ \"quiet\" \"udev.log_level=3\" ];</code></li>\n</ul>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "r0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/nixos-containers.nix",
                "option_name": "boot.isContainer",
                "option_description": "<rendered-html><p>Whether this NixOS machine is a lightweight container running in\nanother NixOS system.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "sE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.discoverPortal",
                "option_description": "<rendered-html><p>iSCSI portal to boot from.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"192.168.1.1:3260\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "sU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.extraConfig",
                "option_description": "<rendered-html><p>Extra lines to append to /etc/iscsid.conf</p>\n</rendered-html>",
                "option_type": "null or strings concatenated with \"\\n\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "sk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.extraConfigFile",
                "option_description": "<rendered-html><p>Append an additional file\u2019s contents to\n<code>/etc/iscsid.conf</code>. Use a non-store path and store passwords\nin this file. Note: the file specified here must be available in the\ninitrd, see: <code>boot.initrd.secrets</code>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "s0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.extraIscsiCommands",
                "option_description": "<rendered-html><p>Extra iscsi commands to run in the initrd.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "tE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.logLevel",
                "option_description": "<rendered-html><p>Higher numbers elicits more logs.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "1",
                "option_example": "8",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "tU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.loginAll",
                "option_description": "<rendered-html><p>Do not log into a specific target on the portal, but to all that we\ndiscover. This overrides setting target.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "tk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.name",
                "option_description": "<rendered-html><p>Name of the iSCSI initiator to boot from. Note, booting from iscsi\nrequires networkd based networking.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"iqn.2020-08.org.linux-iscsi.initiatorhost:example\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "t0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iscsi/root-initiator.nix",
                "option_name": "boot.iscsi-initiator.target",
                "option_description": "<rendered-html><p>Name of the iSCSI target to boot from.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"iqn.2020-08.org.linux-iscsi.targethost:example\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "uE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.kernel.enable",
                "option_description": "<rendered-html><p>Whether to enable the Linux kernel. This is useful for systemd-like\ncontainers which do not require a kernel.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "uU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.kernel.randstructSeed",
                "option_description": "<rendered-html><p>Provides a custom seed for the <code class=\"interpreted-text\"\nrole=\"var\">RANDSTRUCT</code> security option of the Linux kernel. Note\nthat <code class=\"interpreted-text\" role=\"var\">RANDSTRUCT</code> is only\nenabled in NixOS hardened kernels. Using a custom seed requires building\nthe kernel and dependent packages locally, since this customization\nhappens at build time.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "\"my secret seed\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "uk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/sysctl.nix",
                "option_name": "boot.kernel.sysctl",
                "option_description": "<rendered-html><p>Runtime parameters of the Linux kernel, as set by <code\nclass=\"interpreted-text\" role=\"manpage\">sysctl(8)</code>. Note that\nsysctl parameters names must be enclosed in quotes (e.g.\n<code>\"vm.swappiness\"</code> instead of <code>vm.swappiness</code>). The\nvalue of each parameter may be a string, integer, boolean, or null\n(signifying the option will not appear at all).</p>\n</rendered-html>",
                "option_type": "attribute set of (sysctl option value)",
                "option_default": "{ }",
                "option_example": "{ \"net.ipv4.tcp_syncookies\" = false; \"vm.swappiness\" = 60; }\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "u0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/sysctl.nix",
                "option_name": "boot.kernel.sysctl.\"net.core.rmem_max\"",
                "option_description": "<rendered-html><p>The maximum receive socket buffer size in bytes. In case of\nconflicting values, the highest will be used.</p>\n</rendered-html>",
                "option_type": "null or (unsigned integer, meaning >=0)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "vE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/sysctl.nix",
                "option_name": "boot.kernel.sysctl.\"net.core.wmem_max\"",
                "option_description": "<rendered-html><p>The maximum send socket buffer size in bytes. In case of conflicting\nvalues, the highest will be used.</p>\n</rendered-html>",
                "option_type": "null or (unsigned integer, meaning >=0)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "vU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.kernelModules",
                "option_description": "<rendered-html><p>The set of kernel modules to be loaded in the second stage of the\nboot process. Note that modules that are needed to mount the root file\nsystem should be added to <code class=\"interpreted-text\"\nrole=\"option\">boot.initrd.availableKernelModules</code> or <code\nclass=\"interpreted-text\"\nrole=\"option\">boot.initrd.kernelModules</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "vk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.kernelPackages",
                "option_description": "<rendered-html><p>This option allows you to override the Linux kernel used by NixOS.\nSince things like external kernel module packages are tied to the kernel\nyou\u2019re using, it also overrides those. This option is a function that\ntakes Nixpkgs as an argument (as a convenience), and returns an\nattribute set containing at the very least an attribute <code\nclass=\"interpreted-text\" role=\"var\">kernel</code>. Additional attributes\nmay be needed depending on your configuration. For instance, if you use\nthe NVIDIA X driver, then it also needs to contain an attribute <code\nclass=\"interpreted-text\" role=\"var\">nvidia_x11</code>.</p>\n<p>Please note that we strictly support kernel versions that are\nmaintained by the Linux developers only. More information on the\navailability of kernel versions is documented <a\nhref=\"https://nixos.org/manual/nixos/unstable/index.html#sec-kernel-config\">in\nthe Linux section of the manual</a>.</p>\n</rendered-html>",
                "option_type": "raw value",
                "option_default": "pkgs.linuxPackages",
                "option_example": "pkgs.linuxKernel.packages.linux_5_10",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "v0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.kernelParams",
                "option_description": "<rendered-html><p>Parameters added to the kernel command line.</p>\n</rendered-html>",
                "option_type": "list of string, with spaces inside double quotes",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "wE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.kernelPatches",
                "option_description": "<rendered-html><p>A list of additional patches to apply to the kernel.</p>\n<p>Every item should be an attribute set with the following\nattributes:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode nix\"><code class=\"sourceCode nix\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">{</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"va\">name</span> <span class=\"op\">=</span> <span class=\"st\">&quot;foo&quot;</span><span class=\"op\">;</span>                 <span class=\"co\"># descriptive name, required</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"va\">patch</span> <span class=\"op\">=</span> <span class=\"ss\">./foo.patch</span><span class=\"op\">;</span>          <span class=\"co\"># path or derivation that contains the patch source</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                <span class=\"co\"># (required, but can be null if only config changes</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                <span class=\"co\"># are needed)</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"va\">extraStructuredConfig</span> <span class=\"op\">=</span> <span class=\"op\">{</span>     <span class=\"co\"># attrset of extra configuration parameters without the CONFIG_ prefix</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"va\">FOO</span> <span class=\"op\">=</span> lib.kernel.yes<span class=\"op\">;</span>       <span class=\"co\"># (optional)</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">};</span>                            <span class=\"co\"># values should generally be lib.kernel.yes,</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                <span class=\"co\"># lib.kernel.no or lib.kernel.module</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"va\">features</span> <span class=\"op\">=</span> <span class=\"op\">{</span>                  <span class=\"co\"># attrset of extra &quot;features&quot; the kernel is considered to have</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"va\">foo</span> <span class=\"op\">=</span> <span class=\"cn\">true</span><span class=\"op\">;</span>                 <span class=\"co\"># (may be checked by other NixOS modules, optional)</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">};</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"va\">extraConfig</span> <span class=\"op\">=</span> <span class=\"st\">&quot;FOO y&quot;</span><span class=\"op\">;</span>        <span class=\"co\"># extra configuration options in string form without the CONFIG_ prefix</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                <span class=\"co\"># (optional, multiple lines allowed to specify multiple options)</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                <span class=\"co\"># (deprecated, use extraStructuredConfig instead)</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>There\u2019s a small set of existing kernel patches in Nixpkgs, available\nas <code>pkgs.kernelPatches</code>, that follow this format and can be\nused directly.</p>\n</rendered-html>",
                "option_type": "list of (attribute set)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    name = \"foo\";\n    patch = ./foo.patch;\n    extraStructuredConfig.FOO = lib.kernel.yes;\n    features.foo = true;\n  }\n  {\n    name = \"foo-ml-mbox\";\n    patch = (fetchurl {\n      url = \"https://lore.kernel.org/lkml/19700205182810.58382-1-email@domain/t.mbox.gz\";\n      hash = \"sha256-...\";\n    });\n  }\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "wU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/efi.nix",
                "option_name": "boot.loader.efi.canTouchEfiVariables",
                "option_description": "<rendered-html><p>Whether the installation process is allowed to modify EFI boot\nvariables.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "wk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/efi.nix",
                "option_name": "boot.loader.efi.efiSysMountPoint",
                "option_description": "<rendered-html><p>Where the EFI System Partition is mounted.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"/boot\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "w0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/external/external.nix",
                "option_name": "boot.loader.external.enable",
                "option_description": "<rendered-html><p>Whether to enable using an external tool to install your\nbootloader.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "xE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/external/external.nix",
                "option_name": "boot.loader.external.installHook",
                "option_description": "<rendered-html><p>The full path to a program of your choosing which performs the\nbootloader installation process.</p>\n<p>The program will be called with an argument pointing to the output of\nthe system\u2019s toplevel.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "xU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/generations-dir/generations-dir.nix",
                "option_name": "boot.loader.generationsDir.copyKernels",
                "option_description": "<rendered-html><p>Whether copy the necessary boot files into /boot, so /nix/store is\nnot needed by the boot loader.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "xk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/generations-dir/generations-dir.nix",
                "option_name": "boot.loader.generationsDir.enable",
                "option_description": "<rendered-html><p>Whether to create symlinks to the system generations under\n<code>/boot</code>. When enabled, <code>/boot/default/kernel</code>,\n<code>/boot/default/initrd</code>, etc., are updated to point to the\ncurrent generation\u2019s kernel image, initial RAM disk, and other bootstrap\nfiles.</p>\n<p>This optional is not necessary with boot loaders such as GNU GRUB for\nwhich the menu is updated to point to the latest bootstrap files.\nHowever, it is needed for U-Boot on platforms where the boot command\nline is stored in flash memory rather than in a menu file.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "x0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/generic-extlinux-compatible",
                "option_name": "boot.loader.generic-extlinux-compatible.configurationLimit",
                "option_description": "<rendered-html><p>Maximum number of configurations in the boot menu.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "20",
                "option_example": "10",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "yE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/generic-extlinux-compatible",
                "option_name": "boot.loader.generic-extlinux-compatible.enable",
                "option_description": "<rendered-html><p>Whether to generate an extlinux-compatible configuration file under\n<code>/boot/extlinux.conf</code>. For instance, U-Boot\u2019s generic distro\nboot support uses this file format.</p>\n<p>See <a\nhref=\"https://u-boot.readthedocs.io/en/latest/develop/distro.html\">U-boot\u2019s\ndocumentation</a> for more information.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "yU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/generic-extlinux-compatible",
                "option_name": "boot.loader.generic-extlinux-compatible.populateCmd",
                "option_description": "<rendered-html><p>Contains the builder command used to populate an image, honoring all\noptions except the <code>-c &lt;path-to-default-configuration&gt;</code>\nargument. Useful to have for sdImage.populateRootCommands</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "yk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/generic-extlinux-compatible",
                "option_name": "boot.loader.generic-extlinux-compatible.useGenerationDeviceTree",
                "option_description": "<rendered-html><p>Whether to generate Device Tree-related directives in the extlinux\nconfiguration.</p>\n<p>When enabled, the bootloader will attempt to load the device tree\nbinaries from the generation\u2019s kernel.</p>\n<p>Note that this affects all generations, regardless of the setting\nvalue used in their configurations.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "y0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.backgroundColor",
                "option_description": "<rendered-html><p>Background color to be used for GRUB to fill the areas the image\nisn\u2019t filling.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"#7EBAE4\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "zE-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.configurationLimit",
                "option_description": "<rendered-html><p>Maximum of configurations in boot menu. GRUB has problems when there\nare too many entries.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "100",
                "option_example": "120",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "zU-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.configurationName",
                "option_description": "<rendered-html><p>GRUB entry name instead of default.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "\"Stable 2.6.21\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "zk-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.copyKernels",
                "option_description": "<rendered-html><p>Whether the GRUB menu builder should copy kernels and initial\nramdisks to /boot. This is done automatically if /boot is on a different\npartition than /.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "z0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.default",
                "option_description": "<rendered-html><p>Index of the default menu item to be booted. Can also be set to\n\u201csaved\u201d, which will make GRUB select the menu item that was used at the\nlast boot.</p>\n</rendered-html>",
                "option_type": "signed integer or string",
                "option_default": "\"0\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "0E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.device",
                "option_description": "<rendered-html><p>The device on which the GRUB boot loader will be installed. The\nspecial value <code>nodev</code> means that a GRUB boot menu will be\ngenerated, but GRUB itself will not actually be installed. To install\nGRUB on multiple devices, use <code>boot.loader.grub.devices</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "\"/dev/disk/by-id/wwn-0x500001234567890a\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "0U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.devices",
                "option_description": "<rendered-html><p>The devices on which the boot loader, GRUB, will be installed. Can be\nused instead of <code>device</code> to install GRUB onto multiple\ndevices.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"/dev/disk/by-id/wwn-0x500001234567890a\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "0k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.efiInstallAsRemovable",
                "option_description": "<rendered-html><p>Whether to invoke <code>grub-install</code> with\n<code>--removable</code>.</p>\n<p>Unless you turn this on, GRUB will install itself somewhere in\n<code>boot.loader.efi.efiSysMountPoint</code> (exactly where depends on\nother config variables). If you\u2019ve set\n<code>boot.loader.efi.canTouchEfiVariables</code> <em>AND</em> you are\ncurrently booted in UEFI mode, then GRUB will use\n<code>efibootmgr</code> to modify the boot order in the EFI variables of\nyour firmware to include this location. If you are <em>not</em> booted\nin UEFI mode at the time GRUB is being installed, the NVRAM will not be\nmodified, and your system will not find GRUB at boot time. However, GRUB\nwill still return success so you may miss the warning that gets printed\n(\u201c<code>efibootmgr: EFI variables are not supported on this system.</code>\u201d).</p>\n<p>If you turn this feature on, GRUB will install itself in a special\nlocation within <code>efiSysMountPoint</code> (namely\n<code>EFI/boot/boot$arch.efi</code>) which the firmwares are hardcoded\nto try first, regardless of NVRAM EFI variables.</p>\n<p>To summarize, turn this on if:</p>\n<ul>\n<li>You are installing NixOS and want it to boot in UEFI mode, but you\nare currently booted in legacy mode</li>\n<li>You want to make a drive that will boot regardless of the NVRAM\nstate of the computer (like a USB \u201cremovable\u201d drive)</li>\n<li>You simply dislike the idea of depending on NVRAM state to make your\ndrive bootable</li>\n</ul>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "00-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.efiSupport",
                "option_description": "<rendered-html><p>Whether GRUB should be built with EFI support.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "1E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.enable",
                "option_description": "<rendered-html><p>Whether to enable the GNU GRUB boot loader.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "!config.boot.isContainer",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "1U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.enableCryptodisk",
                "option_description": "<rendered-html><p>Enable support for encrypted partitions. GRUB should automatically\nunlock the correct encrypted partition and look for filesystems.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "1k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.entryOptions",
                "option_description": "<rendered-html><p>Options applied to the primary NixOS menu entry.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "\"--class nixos --unrestricted\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "10-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraConfig",
                "option_description": "<rendered-html><p>Additional GRUB commands inserted in the configuration file just\nbefore the menu entries.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1\n  terminal_input --append serial\n  terminal_output --append serial\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "2E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraEntries",
                "option_description": "<rendered-html><p>Any additional entries you want added to the GRUB boot menu.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  # GRUB 2 example\n  menuentry \"Windows 7\" {\n    chainloader (hd0,4)+1\n  }\n  \n  # GRUB 2 with UEFI example, chainloading another distro\n  menuentry \"Fedora\" {\n    set root=(hd1,1)\n    chainloader /efi/fedora/grubx64.efi\n  }\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "2U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraEntriesBeforeNixOS",
                "option_description": "<rendered-html><p>Whether extraEntries are included before the default option.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "2k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraFiles",
                "option_description": "<rendered-html><p>A set of files to be copied to <code class=\"interpreted-text\"\nrole=\"file\">/boot</code>. Each attribute name denotes the destination\nfile name in <code class=\"interpreted-text\" role=\"file\">/boot</code>,\nwhile the corresponding attribute value specifies the source file.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": "{ \"memtest.bin\" = \"${pkgs.memtest86plus}/memtest.bin\"; }\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "20-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraGrubInstallArgs",
                "option_description": "<rendered-html><p>Additional arguments passed to <code>grub-install</code>.</p>\n<p>A use case for this is to build specific GRUB2 modules directly into\nthe GRUB2 kernel image, so that they are available and activated even in\nthe <code>grub rescue</code> shell.</p>\n<p>They are also necessary when the BIOS/UEFI is bugged and cannot\ncorrectly read large disks (e.g. above 2 TB), so GRUB2\u2019s own\n<code>nativedisk</code> and related modules can be used to use its own\ndisk drivers. The example shows one such case. This is also useful for\nbooting from USB. See the <a\nhref=\"https://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/commands/nativedisk.c?h=grub-2.04#n326\">\nGRUB source code </a> for which disk modules are available.</p>\n<p>The list elements are passed directly as <code>argv</code> arguments\nto the <code>grub-install</code> program, in order.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"--modules=nativedisk ahci pata part_gpt part_msdos diskfilter mdraid1x lvm ext2\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "3E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraInstallCommands",
                "option_description": "<rendered-html><p>Additional shell commands inserted in the bootloader installer script\nafter generating menu entries.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  # the example below generates detached signatures that GRUB can verify\n  # https://www.gnu.org/software/grub/manual/grub/grub.html#Using-digital-signatures\n  ''${pkgs.findutils}/bin/find /boot -not -path \"/boot/efi/*\" -type f -name '*.sig' -delete\n  old_gpg_home=$GNUPGHOME\n  export GNUPGHOME=\"$(mktemp -d)\"\n  ''${pkgs.gnupg}/bin/gpg --import ''${priv_key} > /dev/null 2>&1\n  ''${pkgs.findutils}/bin/find /boot -not -path \"/boot/efi/*\" -type f -exec ''${pkgs.gnupg}/bin/gpg --detach-sign \"{}\" \\; > /dev/null 2>&1\n  rm -rf $GNUPGHOME\n  export GNUPGHOME=$old_gpg_home\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "3U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraPerEntryConfig",
                "option_description": "<rendered-html><p>Additional GRUB commands inserted in the configuration file at the\nstart of each NixOS menu entry.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"root (hd0)\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "3k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.extraPrepareConfig",
                "option_description": "<rendered-html><p>Additional bash commands to be run at the script that prepares the\nGRUB menu entries.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "30-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.font",
                "option_description": "<rendered-html><p>Path to a TrueType, OpenType, or pf2 font to be used by Grub.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "\"${pkgs.grub2}/share/grub/unicode.pf2\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "4E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.fontSize",
                "option_description": "<rendered-html><p>Font size for the grub menu. Ignored unless <code>font</code> is set\nto a ttf or otf font.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "16",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "4U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.forceInstall",
                "option_description": "<rendered-html><p>Whether to try and forcibly install GRUB even if problems are\ndetected. It is not recommended to enable this unless you know what you\nare doing.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "4k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.forcei686",
                "option_description": "<rendered-html><p>Whether to force the use of a ia32 boot loader on x64 systems.\nRequired to install and run NixOS on 64bit x86 systems with 32bit\n(U)EFI.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "40-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.fsIdentifier",
                "option_description": "<rendered-html><p>Determines how GRUB will identify devices when generating the\nconfiguration file. A value of uuid / label signifies that grub will\nalways resolve the uuid or label of the device before using it in the\nconfiguration. A value of provided means that GRUB will use the device\nname as show in <code class=\"interpreted-text\" role=\"command\">df</code>\nor <code class=\"interpreted-text\" role=\"command\">mount</code>. Note, zfs\nzpools / datasets are ignored and will always be mounted using their\nlabels.</p>\n</rendered-html>",
                "option_type": "one of \"uuid\", \"label\", \"provided\"",
                "option_default": "\"uuid\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "5E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.gfxmodeBios",
                "option_description": "<rendered-html><p>The gfxmode to pass to GRUB when loading a graphical boot interface\nunder BIOS.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"1024x768\"",
                "option_example": "\"auto\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "5U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.gfxmodeEfi",
                "option_description": "<rendered-html><p>The gfxmode to pass to GRUB when loading a graphical boot interface\nunder EFI.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"auto\"",
                "option_example": "\"1024x768\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "5k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.gfxpayloadBios",
                "option_description": "<rendered-html><p>The gfxpayload to pass to GRUB when loading a graphical boot\ninterface under BIOS.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"text\"",
                "option_example": "\"keep\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "50-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.gfxpayloadEfi",
                "option_description": "<rendered-html><p>The gfxpayload to pass to GRUB when loading a graphical boot\ninterface under EFI.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"keep\"",
                "option_example": "\"text\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "6E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/ipxe.nix",
                "option_name": "boot.loader.grub.ipxe",
                "option_description": "<rendered-html><p>Set of iPXE scripts available for booting from the GRUB boot\nmenu.</p>\n</rendered-html>",
                "option_type": "attribute set of (path or string)",
                "option_default": "{ }",
                "option_example": "{ demo = ''\n    #!ipxe\n    dhcp\n    chain http://boot.ipxe.org/demo/boot.php\n  '';\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "6U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/memtest.nix",
                "option_name": "boot.loader.grub.memtest86.enable",
                "option_description": "<rendered-html><p>Make Memtest86+, a memory testing program, available from the GRUB\nboot menu.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "6k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/memtest.nix",
                "option_name": "boot.loader.grub.memtest86.params",
                "option_description": "<rendered-html><p>Parameters added to the Memtest86+ command line. As of memtest86+\n5.01 the following list of (apparently undocumented) parameters are\naccepted:</p>\n<ul>\n<li><p><code>console=...</code>, set up a serial console. Examples:\n<code>console=ttyS0</code>, <code>console=ttyS0,9600</code> or\n<code>console=ttyS0,115200n8</code>.</p></li>\n<li><p><code>btrace</code>, enable boot trace.</p></li>\n<li><p><code>maxcpus=N</code>, limit number of CPUs.</p></li>\n<li><p><code>onepass</code>, run one pass and exit if there are no\nerrors.</p></li>\n<li><p><code>tstlist=...</code>, list of tests to run. Example:\n<code>0,1,2</code>.</p></li>\n<li><p><code>cpumask=...</code>, set a CPU mask, to select CPUs to use\nfor testing.</p></li>\n</ul>\n<p>This list of command line options was obtained by reading the\nMemtest86+ source code.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"console=ttyS0,115200\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "60-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.mirroredBoots",
                "option_description": "<rendered-html><p>Mirror the boot configuration to multiple partitions and install grub\nto the respective devices corresponding to those partitions.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    devices = [\n      \"/dev/disk/by-id/wwn-0x500001234567890a\"\n    ];\n    path = \"/boot1\";\n  }\n  {\n    devices = [\n      \"/dev/disk/by-id/wwn-0x500009876543210a\"\n    ];\n    path = \"/boot2\";\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "7E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.mirroredBoots.*.devices",
                "option_description": "<rendered-html><p>The path to the devices which will have the GRUB MBR written. Note\nthese are typically device paths and not paths to partitions.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"/dev/disk/by-id/wwn-0x500001234567890a\"\n  \"/dev/disk/by-id/wwn-0x500009876543210a\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "7U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.mirroredBoots.*.efiBootloaderId",
                "option_description": "<rendered-html><p>The id of the bootloader to store in efi nvram. The default is to\nname it NixOS and append the path or efiSysMountPoint. This is only used\nif <code>boot.loader.efi.canTouchEfiVariables</code> is true.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"NixOS-fsid\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "7k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.mirroredBoots.*.efiSysMountPoint",
                "option_description": "<rendered-html><p>The path to the efi system mount point. Usually this is the same\npartition as the above path and can be left as null.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/boot1/efi\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "70-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.mirroredBoots.*.path",
                "option_description": "<rendered-html><p>The path to the boot directory where GRUB will be written. Generally\nthis boot path should double as an EFI path.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"/boot1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "8E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.splashImage",
                "option_description": "<rendered-html><p>Background image used for GRUB. Set to <code>null</code> to run GRUB\nin text mode.</p>\n<div class=\"note\">\n<p>File must be one of .png, .tga, .jpg, or .jpeg. JPEG images must not\nbe progressive. The image will be scaled if necessary to fit the\nscreen.</p>\n</div>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": null,
                "option_example": "./my-background.png",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "8U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.splashMode",
                "option_description": "<rendered-html><p>Whether to stretch the image or show the image in the top-left corner\nunstretched.</p>\n</rendered-html>",
                "option_type": "one of \"normal\", \"stretch\"",
                "option_default": "\"stretch\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "8k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.storePath",
                "option_description": "<rendered-html><p>Path to the Nix store when looking for kernels at boot. Only makes\nsense when copyKernels is false.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"/nix/store\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "80-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.subEntryOptions",
                "option_description": "<rendered-html><p>Options applied to the secondary NixOS submenu entry.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "\"--class nixos\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "9E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.theme",
                "option_description": "<rendered-html><p>Path to the grub theme to be used.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "null",
                "option_example": "\"${pkgs.libsForQt5.breeze-grub}/grub/themes/breeze\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "9U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.timeoutStyle",
                "option_description": "<rendered-html><ul>\n<li><code>menu</code> shows the menu.</li>\n<li><code>countdown</code> uses a text-mode countdown.</li>\n<li><code>hidden</code> hides GRUB entirely.</li>\n</ul>\n<p>When using a theme, the default value (<code>menu</code>) is\nappropriate for the graphical countdown.</p>\n<p>When attempting to do flicker-free boot, <code>hidden</code> should\nbe used.</p>\n<p>See the <a\nhref=\"https://www.gnu.org/software/grub/manual/grub/html_node/timeout.html\">GRUB\ndocumentation section about <code>timeout_style</code></a>.</p>\n<div class=\"note\">\n<p>If this option is set to \u2018countdown\u2019 or \u2018hidden\u2019 [\u2026] and ESC or F4\nare pressed, or SHIFT is held down during that time, it will display the\nmenu and wait for input.</p>\n</div>\n<p>From: <a\nhref=\"https://www.gnu.org/software/grub/manual/grub/html_node/Simple-configuration.html\">Simple\nconfiguration handling page, under GRUB_TIMEOUT_STYLE</a>.</p>\n</rendered-html>",
                "option_type": "one of \"menu\", \"countdown\", \"hidden\"",
                "option_default": "\"menu\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "9k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.useOSProber",
                "option_description": "<rendered-html><p>If set to true, append entries for other OSs detected by\nos-prober.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "90-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.users",
                "option_description": "<rendered-html><p>User accounts for GRUB. When specified, the GRUB command line and all\nboot options except the default are password-protected. All passwords\nand hashes provided will be stored in /boot/grub/grub.cfg, and will be\nvisible to any local user who can read this file. Additionally, any\npasswords and hashes provided directly in a Nix configuration (as\nopposed to external files) will be copied into the Nix store, and will\nbe visible to all local users.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  root = {\n    hashedPasswordFile = \"/path/to/file\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.users.<name>.hashedPassword",
                "option_description": "<rendered-html><p>Specifies the password hash for the account, generated with\ngrub-mkpasswd-pbkdf2. This hash will be copied to the Nix store, and\nwill be visible to all local users.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"grub.pbkdf2.sha512.10000.674DFFDEF76E13EA...2CC972B102CF4355\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.users.<name>.hashedPasswordFile",
                "option_description": "<rendered-html><p>Specifies the path to a file containing the password hash for the\naccount, generated with grub-mkpasswd-pbkdf2. This hash will be stored\nin /boot/grub/grub.cfg, and will be visible to any local user who can\nread this file.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/path/to/file\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.users.<name>.password",
                "option_description": "<rendered-html><p>Specifies the clear text password for the account. This password will\nbe copied to the Nix store, and will be visible to all local users.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"Pa$$w0rd!\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.users.<name>.passwordFile",
                "option_description": "<rendered-html><p>Specifies the path to a file containing the clear text password for\nthe account. This password will be stored in /boot/grub/grub.cfg, and\nwill be visible to any local user who can read this file.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/path/to/file\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_E-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/grub/grub.nix",
                "option_name": "boot.loader.grub.zfsSupport",
                "option_description": "<rendered-html><p>Whether GRUB should be built against libzfs.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_U-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/init-script/init-script.nix",
                "option_name": "boot.loader.initScript.enable",
                "option_description": "<rendered-html><p>Some systems require a /sbin/init script which is started. Or having\nit makes starting NixOS easier. This applies to some kind of hosting\nservices and user mode linux.</p>\n<p>Additionally this script will create\n/boot/init-other-configurations-contents.txt containing contents of\nremaining configurations. You can copy paste them into /sbin/init\nmanually running a rescue system or such.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_k-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix",
                "option_name": "boot.loader.raspberryPi.enable",
                "option_description": "<rendered-html><p>Whether to create files with the system generations in\n<code>/boot</code>. <code>/boot/old</code> will hold files from old\ngenerations.</p>\n<div class=\"note\">\n<p>These options are deprecated, unsupported, and may not work like\nexpected.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_0-XzZABZu4t0s2I3xIK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix",
                "option_name": "boot.loader.raspberryPi.firmwareConfig",
                "option_description": "<rendered-html><p>Extra options that will be appended to <code>/boot/config.txt</code>\nfile. For possible values, see: <a\nhref=\"https://www.raspberrypi.com/documentation/computers/config_txt.html\">https://www.raspberrypi.com/documentation/computers/config_txt.html</a></p>\n<div class=\"note\">\n<p>These options are deprecated, unsupported, and may not work like\nexpected.</p>\n</div>\n</rendered-html>",
                "option_type": "null or strings concatenated with \"\\n\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "AE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix",
                "option_name": "boot.loader.raspberryPi.uboot.configurationLimit",
                "option_description": "<rendered-html><p>Maximum number of configurations in the boot menu.</p>\n<div class=\"note\">\n<p>These options are deprecated, unsupported, and may not work like\nexpected.</p>\n</div>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "20",
                "option_example": "10",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "AU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix",
                "option_name": "boot.loader.raspberryPi.uboot.enable",
                "option_description": "<rendered-html><p>Enable using uboot as bootmanager for the raspberry pi.</p>\n<div class=\"note\">\n<p>These options are deprecated, unsupported, and may not work like\nexpected.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ak-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/raspberrypi/raspberrypi.nix",
                "option_name": "boot.loader.raspberryPi.version",
                "option_description": "<rendered-html>\n</rendered-html>",
                "option_type": "one of 0, 1, 2, 3, 4",
                "option_default": "2",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "A0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.configurationLimit",
                "option_description": "<rendered-html><p>Maximum number of latest generations in the boot menu. Useful to\nprevent boot partition running out of disk space.</p>\n<p><code>null</code> means no limit i.e. all generations that have not\nbeen garbage collected yet.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "120",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "BE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.consoleMode",
                "option_description": "<rendered-html><p>The resolution of the console. The following values are valid:</p>\n<ul>\n<li><code>\"0\"</code>: Standard UEFI 80x25 mode</li>\n<li><code>\"1\"</code>: 80x50 mode, not supported by all devices</li>\n<li><code>\"2\"</code>: The first non-standard mode provided by the device\nfirmware, if any</li>\n<li><code>\"auto\"</code>: Pick a suitable mode automatically using\nheuristics</li>\n<li><code>\"max\"</code>: Pick the highest-numbered available mode</li>\n<li><code>\"keep\"</code>: Keep the mode selected by firmware (the\ndefault)</li>\n</ul>\n</rendered-html>",
                "option_type": "one of \"0\", \"1\", \"2\", \"auto\", \"max\", \"keep\"",
                "option_default": "\"keep\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "BU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.editor",
                "option_description": "<rendered-html><p>Whether to allow editing the kernel command-line before boot. It is\nrecommended to set this to false, as it allows gaining root access by\npassing init=/bin/sh as a kernel parameter. However, it is enabled by\ndefault for backwards compatibility.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Bk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.enable",
                "option_description": "<rendered-html><p>Whether to enable the systemd-boot (formerly gummiboot) EFI boot\nmanager. For more information about systemd-boot: <a\nhref=\"https://www.freedesktop.org/wiki/Software/systemd/systemd-boot/\">https://www.freedesktop.org/wiki/Software/systemd/systemd-boot/</a></p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "B0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.extraEntries",
                "option_description": "<rendered-html><p>Any additional entries you want added to the\n<code>systemd-boot</code> menu. These entries will be copied to <code\nclass=\"interpreted-text\" role=\"file\">$BOOT/loader/entries</code>. Each\nattribute name denotes the destination file name, and the corresponding\nattribute value is the contents of the entry.</p>\n<p>To control the ordering of the entry in the boot menu, use the\nsort-key field, see <a\nhref=\"https://uapi-group.org/specifications/specs/boot_loader_specification/#sorting\">https://uapi-group.org/specifications/specs/boot_loader_specification/#sorting</a>\nand <code class=\"interpreted-text\"\nrole=\"option\">boot.loader.systemd-boot.sortKey</code>.</p>\n</rendered-html>",
                "option_type": "attribute set of strings concatenated with \"\\n\"",
                "option_default": "{ }",
                "option_example": "{ \"memtest86.conf\" = ''\n  title Memtest86+\n  efi /efi/memtest86/memtest.efi\n  sort-key z_memtest\n''; }\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "CE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.extraFiles",
                "option_description": "<rendered-html><p>A set of files to be copied to <code class=\"interpreted-text\"\nrole=\"file\">$BOOT</code>. Each attribute name denotes the destination\nfile name in <code class=\"interpreted-text\" role=\"file\">$BOOT</code>,\nwhile the corresponding attribute value specifies the source file.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": "{ \"efi/memtest86/memtest.efi\" = \"${pkgs.memtest86plus}/memtest.efi\"; }\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "CU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.extraInstallCommands",
                "option_description": "<rendered-html><p>Additional shell commands inserted in the bootloader installer script\nafter generating menu entries. It can be used to expand on extra boot\nentries that cannot incorporate certain pieces of information (such as\nthe resulting <code>init=</code> kernel parameter).</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  default_cfg=$(cat /boot/loader/loader.conf | grep default | awk '{print $2}')\n  init_value=$(cat /boot/loader/entries/$default_cfg | grep init= | awk '{print $2}')\n  sed -i \"s|@INIT@|$init_value|g\" /boot/custom/config_with_placeholder.conf\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ck-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.graceful",
                "option_description": "<rendered-html><p>Invoke <code>bootctl install</code> with the <code>--graceful</code>\noption, which ignores errors when EFI variables cannot be written or\nwhen the EFI System Partition cannot be found. Currently only applies to\nrandom seed operations.</p>\n<p>Only enable this option if <code>systemd-boot</code> otherwise fails\nto install, as the scope or implication of the <code>--graceful</code>\noption may change in the future.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "C0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.memtest86.enable",
                "option_description": "<rendered-html><p>Make Memtest86+ available from the systemd-boot menu. Memtest86+ is a\nprogram for testing memory.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "DE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.memtest86.sortKey",
                "option_description": "<rendered-html><p><code>systemd-boot</code> orders the menu entries by their sort keys,\nso if you want something to appear after all the NixOS entries, it\nshould start with <code class=\"interpreted-text\" role=\"file\">o</code> or\nonwards.</p>\n<p>See also <code class=\"interpreted-text\"\nrole=\"option\">boot.loader.systemd-boot.sortKey</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"o_memtest86\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "DU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.netbootxyz.enable",
                "option_description": "<rendered-html><p>Make <code>netboot.xyz</code> available from the\n<code>systemd-boot</code> menu. <code>netboot.xyz</code> is a menu\nsystem that allows you to boot OS installers and utilities over the\nnetwork.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Dk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.netbootxyz.sortKey",
                "option_description": "<rendered-html><p><code>systemd-boot</code> orders the menu entries by their sort keys,\nso if you want something to appear after all the NixOS entries, it\nshould start with <code class=\"interpreted-text\" role=\"file\">o</code> or\nonwards.</p>\n<p>See also <code class=\"interpreted-text\"\nrole=\"option\">boot.loader.systemd-boot.sortKey</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"o_netbootxyz\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "D0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.sortKey",
                "option_description": "<rendered-html><p>The sort key used for the NixOS bootloader entries. This key\ndetermines sorting relative to non-NixOS entries. See also <a\nhref=\"https://uapi-group.org/specifications/specs/boot_loader_specification/#sorting\">https://uapi-group.org/specifications/specs/boot_loader_specification/#sorting</a></p>\n<p>This option can also be used to control the sorting of NixOS\nspecialisations.</p>\n<p>By default, specialisations inherit the sort key of their parent\ngeneration and will have the same value for both the sort-key and the\nversion (i.e. the generation number), systemd-boot will therefore sort\nthem based on their file name, meaning that in your boot menu you will\nhave each main generation directly followed by its specialisations\nsorted alphabetically by their names.</p>\n<p>If you want a different ordering for a specialisation, you can\noverride its sort-key which will cause the specialisation to be\nuncoupled from its parent generation. It will then be sorted by its new\nsort-key just like any other boot entry.</p>\n<p>The sort-key is stored in the generation\u2019s bootspec, which means that\ngenerations keep their sort-keys even if the original definition of the\ngeneration was removed from the NixOS configuration. It also means that\nupdating the sort-key will only affect new generations, while old ones\nwill keep the sort-key that they were originally built with.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"nixos\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/systemd-boot/systemd-boot.nix",
                "option_name": "boot.loader.systemd-boot.xbootldrMountPoint",
                "option_description": "<rendered-html><p>Where the XBOOTLDR partition is mounted.</p>\n<p>If set, this partition will be used as $BOOT to store boot loader\nentries and extra files instead of the EFI partition. As per the\nbootloader specification, it is recommended that the EFI and XBOOTLDR\npartitions be mounted at <code>/efi</code> and <code>/boot</code>,\nrespectively.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/loader/loader.nix",
                "option_name": "boot.loader.timeout",
                "option_description": "<rendered-html><p>Timeout (in seconds) until loader boots the default menu item. Use\nnull if the loader menu should be displayed indefinitely.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "5",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ek-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/modprobe.nix",
                "option_name": "boot.modprobeConfig.enable",
                "option_description": "<rendered-html><p>Whether to enable modprobe config. This is useful for systems like\ncontainers which do not require a kernel.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "E0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/plymouth.nix",
                "option_name": "boot.plymouth.enable",
                "option_description": "<rendered-html><p>Whether to enable Plymouth boot splash screen.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/plymouth.nix",
                "option_name": "boot.plymouth.extraConfig",
                "option_description": "<rendered-html><p>Literal string to append to <code>configFile</code> and the config\nfile generated by the plymouth module.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/plymouth.nix",
                "option_name": "boot.plymouth.font",
                "option_description": "<rendered-html><p>Font file made available for displaying text on the splash\nscreen.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "\"${pkgs.dejavu_fonts.minimal}/share/fonts/truetype/DejaVuSans.ttf\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Fk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/plymouth.nix",
                "option_name": "boot.plymouth.logo",
                "option_description": "<rendered-html><p>Logo which is displayed on the splash screen. Currently supports PNG\nfile format only.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "\"${pkgs.nixos-icons}/share/icons/hicolor/48x48/apps/nix-snowflake-white.png\"",
                "option_example": "pkgs.fetchurl {\n  url = \"https://nixos.org/logo/nixos-hires.png\";\n  sha256 = \"1ivzgd7iz0i06y36p8m5w48fd8pjqwxhdaavc0pxs7w1g7mcy5si\";\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "F0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/plymouth.nix",
                "option_name": "boot.plymouth.theme",
                "option_description": "<rendered-html><p>Splash screen theme.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"bgrt\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/plymouth.nix",
                "option_name": "boot.plymouth.themePackages",
                "option_description": "<rendered-html><p>Extra theme packages for plymouth.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "<rendered-html><p>A NixOS branded variant of the breeze theme when\n<code>config.boot.plymouth.theme == \"breeze\"</code>, otherwise\n<code>[ ]</code>.</p>\n</rendered-html>",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-2.nix",
                "option_name": "boot.postBootCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed just before systemd is started.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"rm -f /var/log/messages\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Gk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-2.nix",
                "option_name": "boot.readOnlyNixStore",
                "option_description": "<rendered-html><p>If set, NixOS will enforce the immutability of the Nix store by\nmaking <code class=\"interpreted-text\" role=\"file\">/nix/store</code> a\nread-only bind mount. Nix will automatically make the store writable\nwhen needed.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "G0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "boot.resumeDevice",
                "option_description": "<rendered-html><p>Device for manual resume attempt during boot. This should be used\nprimarily if you want to resume from file. If left empty, the swap\npartitions are used. Specify here the device where the file resides. You\nshould also use <code class=\"interpreted-text\"\nrole=\"var\">boot.kernelParams</code> to specify\n<code>\u00abresume_offset\u00bb</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "\"/dev/sda3\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.runSize",
                "option_description": "<rendered-html><p>Size limit for the /run tmpfs. Look at mount(8), tmpfs size option,\nfor the accepted syntax.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"25%\"",
                "option_example": "\"256m\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.specialFileSystems.<name>.depends",
                "option_description": "<rendered-html><p>List of paths that should be mounted before this one. This\nfilesystem\u2019s <code class=\"interpreted-text\" role=\"option\">device</code>\nand <code class=\"interpreted-text\" role=\"option\">mountPoint</code> are\nalways checked and do not need to be included explicitly. If a path is\nadded to this list, any other filesystem whose mount point is a parent\nof the path will be mounted before this filesystem. The paths do not\nneed to actually be the <code class=\"interpreted-text\"\nrole=\"option\">mountPoint</code> of some other filesystem.</p>\n</rendered-html>",
                "option_type": "list of string (with check: non-empty without trailing slash)",
                "option_default": "[ ]",
                "option_example": "[\n  \"/persist\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Hk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.specialFileSystems.<name>.device",
                "option_description": "<rendered-html><p>Location of the device.</p>\n</rendered-html>",
                "option_type": "null or string (with check: non-empty)",
                "option_default": "null",
                "option_example": "\"/dev/sda\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "H0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.specialFileSystems.<name>.fsType",
                "option_description": "<rendered-html><p>Type of the file system.</p>\n</rendered-html>",
                "option_type": "string (with check: non-empty)",
                "option_default": "\"auto\"",
                "option_example": "\"ext3\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "IE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.specialFileSystems.<name>.mountPoint",
                "option_description": "<rendered-html><p>Location of the mounted file system.</p>\n</rendered-html>",
                "option_type": "string (with check: non-empty without trailing slash)",
                "option_default": null,
                "option_example": "\"/mnt/usb\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "IU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.specialFileSystems.<name>.options",
                "option_description": "<rendered-html><p>Options used to mount the file system.</p>\n</rendered-html>",
                "option_type": "non-empty (list of string (with check: non-empty))",
                "option_default": "[\n  \"defaults\"\n]",
                "option_example": "[\n  \"data=journal\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ik-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.specialFileSystems.<name>.stratis.poolUuid",
                "option_description": "<rendered-html><p>UUID of the stratis pool that the fs is located in</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"04c68063-90a5-4235-b9dd-6180098a20d9\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "I0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "boot.supportedFilesystems",
                "option_description": "<rendered-html><p>Names of supported filesystem types, or an attribute set of file\nsystem types and their state. The set form may be used together with\n<code>lib.mkForce</code> to explicitly disable support for specific\nfilesystems, e.g. to disable ZFS with an unsupported kernel.</p>\n</rendered-html>",
                "option_type": "(attribute set of boolean) or (list of string) convertible to it",
                "option_default": "{ }",
                "option_example": "{\n  btrfs = true;\n  zfs = lib.mkForce false;\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/swraid.nix",
                "option_name": "boot.swraid.enable",
                "option_description": "<rendered-html><p>Whether to enable support for Linux MD RAID arrays.</p>\n<p>When this is enabled, mdadm will be added to the system path, and MD\nRAID arrays will be detected and activated automatically, both in\nstage-1 (initramfs) and in stage-2 (the final NixOS system).</p>\n<p>This should be enabled if you want to be able to access and/or boot\nfrom MD RAID arrays. <code class=\"interpreted-text\"\nrole=\"command\">nixos-generate-config</code> should detect it correctly\nin the standard installation procedure.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"`true` if stateVersion is older than 23.11\"",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/swraid.nix",
                "option_name": "boot.swraid.mdadmConf",
                "option_description": "<rendered-html><p>Contents of <code class=\"interpreted-text\"\nrole=\"file\">/etc/mdadm.conf</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Jk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-2.nix",
                "option_name": "boot.systemdExecutable",
                "option_description": "<rendered-html><p>The program to execute to start systemd.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"/run/current-system/systemd/lib/systemd/systemd\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "J0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/tmp.nix",
                "option_name": "boot.tmp.cleanOnBoot",
                "option_description": "<rendered-html><p>Whether to delete all files in <code class=\"interpreted-text\"\nrole=\"file\">/tmp</code> during boot.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/tmp.nix",
                "option_name": "boot.tmp.tmpfsSize",
                "option_description": "<rendered-html><p>Size of tmpfs in percentage. Percentage is defined by systemd.</p>\n</rendered-html>",
                "option_type": "string or (positive integer, meaning >0)",
                "option_default": "\"50%\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/tmp.nix",
                "option_name": "boot.tmp.useTmpfs",
                "option_description": "<rendered-html><p>Whether to mount a tmpfs on <code class=\"interpreted-text\"\nrole=\"file\">/tmp</code> during boot.</p>\n<div class=\"note\">\n<p>Large Nix builds can fail if the mounted tmpfs is not large enough.\nIn such a case either increase the tmpfsSize or disable this option.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Kk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uki.nix",
                "option_name": "boot.uki.configFile",
                "option_description": "<rendered-html><p>The configuration file passed to <code class=\"interpreted-text\"\nrole=\"manpage\">ukify(1)</code> to create the UKI.</p>\n<p>By default this configuration file is created from <code\nclass=\"interpreted-text\" role=\"option\">boot.uki.settings</code>.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "K0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uki.nix",
                "option_name": "boot.uki.name",
                "option_description": "<rendered-html><p>Name of the UKI</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uki.nix",
                "option_name": "boot.uki.settings",
                "option_description": "<rendered-html><p>The configuration settings for ukify. These control what the UKI\ncontains and how it is built.</p>\n</rendered-html>",
                "option_type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uki.nix",
                "option_name": "boot.uki.tries",
                "option_description": "<rendered-html><p>Number of boot attempts before this UKI is considered bad.</p>\n<p>If no tries are specified (the default) automatic boot assessment\nremains inactive.</p>\n<p>See documentation on <a\nhref=\"https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT/\">Automatic Boot\nAssessment</a> and <a\nhref=\"https://uapi-group.org/specifications/specs/boot_loader_specification/#boot-counting\">boot\ncounting</a> for more information.</p>\n</rendered-html>",
                "option_type": "null or (unsigned integer, meaning >=0)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Lk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uki.nix",
                "option_name": "boot.uki.version",
                "option_description": "<rendered-html><p>Version of the image or generation the UKI belongs to</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "config.system.image.version",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "L0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uvesafb.nix",
                "option_name": "boot.uvesafb.enable",
                "option_description": "<rendered-html><p>Whether to enable uvesafb.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ME-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uvesafb.nix",
                "option_name": "boot.uvesafb.gfx-mode",
                "option_description": "<rendered-html><p>Screen resolution in modedb format. See <a\nhref=\"https://docs.kernel.org/fb/uvesafb.html\">uvesafb</a> and <a\nhref=\"https://docs.kernel.org/fb/modedb.html\">modedb</a> documentation\nfor more details. The default value is a sensible default but may be not\nideal for all setups.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"1024x768-32\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "MU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/uvesafb.nix",
                "option_name": "boot.uvesafb.v86d.package",
                "option_description": "<rendered-html><p>Which v86d package to use with uvesafb</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "''\n  config.boot.kernelPackages.v86d.overrideAttrs (old: {\n            hardeningDisable = [ \"all\" ];\n          })''",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Mk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/kernel.nix",
                "option_name": "boot.vesa",
                "option_description": "<rendered-html><p>(Deprecated) This option, if set, activates the VESA 800x600 video\nmode on boot and disables kernel modesetting. It is equivalent to\nspecifying <code>[ \"vga=0x317\" \"nomodeset\" ]</code> in the <code\nclass=\"interpreted-text\" role=\"option\">boot.kernelParams</code> option.\nThis option is deprecated as of 2020: Xorg now works better with\nmodesetting, and you might want a different VESA vga setting,\nanyway.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "M0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.allowHibernation",
                "option_description": "<rendered-html><p>Allow hibernation support, this may be a unsafe option depending on\nyour setup. Make sure to NOT use Swap on ZFS.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.devNodes",
                "option_description": "<rendered-html><p>Name of directory from which to import ZFS devices.</p>\n<p>This should be a path under /dev containing stable names for all\ndevices needed, as import may fail if device nodes are renamed\nconcurrently with a device failing.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "\"/dev/disk/by-id\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.enabled",
                "option_description": "<rendered-html><p>True if ZFS filesystem support is enabled</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "<rendered-html><p><code>true</code> if ZFS filesystem support is enabled</p>\n</rendered-html>",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Nk-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.extraPools",
                "option_description": "<rendered-html><p>Name or GUID of extra ZFS pools that you wish to import during\nboot.</p>\n<p>Usually this is not necessary. Instead, you should set the mountpoint\nproperty of ZFS filesystems to <code>legacy</code> and add the ZFS\nfilesystems to NixOS\u2019s <code class=\"interpreted-text\"\nrole=\"option\">fileSystems</code> option, which makes NixOS automatically\nimport the associated pool.</p>\n<p>However, in some cases (e.g. if you have many filesystems) it may be\npreferable to exclusively use ZFS commands to manage filesystems. If so,\nsince NixOS/systemd will not be managing those filesystems, you will\nneed to specify the ZFS pool here so that NixOS automatically imports it\non every boot.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"tank\"\n  \"data\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "N0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.forceImportAll",
                "option_description": "<rendered-html><p>Forcibly import all ZFS pool(s).</p>\n<p>If you set this option to <code>false</code> and NixOS subsequently\nfails to import your non-root ZFS pool(s), you should manually import\neach pool with \u201czpool import -f &lt;pool-name&gt;\u201d, and then reboot. You\nshould only need to do this once.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "OE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.forceImportRoot",
                "option_description": "<rendered-html><p>Forcibly import the ZFS root pool(s) during early boot.</p>\n<p>This is enabled by default for backwards compatibility purposes, but\nit is highly recommended to disable this option, as it bypasses some of\nthe safeguards ZFS uses to protect your ZFS pools.</p>\n<p>If you set this option to <code>false</code> and NixOS subsequently\nfails to boot because it cannot import the root pool, you should boot\nwith the <code>zfs_force=1</code> option as a kernel parameter (e.g. by\nmanually editing the kernel params in grub during boot). You should only\nneed to do this once.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "OU-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.package",
                "option_description": "<rendered-html><p>Configured ZFS userland tools package, use\n<code>pkgs.zfs_unstable</code> if you want to track the latest staging\nZFS branch.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.zfs",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Ok-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.passwordTimeout",
                "option_description": "<rendered-html><p>Timeout in seconds to wait for password entry for decrypt at\nboot.</p>\n<p>Defaults to 0, which waits forever.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "0",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "O0-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.removeLinuxDRM",
                "option_description": "<rendered-html><p>Patch the kernel to change symbols needed by ZFS from\nEXPORT_SYMBOL_GPL to EXPORT_SYMBOL.</p>\n<p>Currently has no effect, but may again in future if a kernel update\nbreaks ZFS due to symbols being newly changed to GPL.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "PE-XzZABZu4t0s2I3xMK",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/zfs.nix",
                "option_name": "boot.zfs.requestEncryptionCredentials",
                "option_description": "<rendered-html><p>If true on import encryption keys or passwords for all encrypted\ndatasets are requested. To only decrypt selected datasets supply a list\nof dataset names instead. For root pools the encryption key can be\nsupplied via both an interactive prompt (keylocation=prompt) and from a\nfile (keylocation=file://).</p>\n</rendered-html>",
                "option_type": "boolean or list of string",
                "option_default": "true",
                "option_example": "[\n  \"tank\"\n  \"data\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "e9ajzZABYW7nGSBMmosM",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/lvm.nix",
                "option_name": "services.lvm.boot.thin.enable",
                "option_description": "<rendered-html><p>Whether to enable support for booting from ThinLVs.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fNajzZABYW7nGSBMmosM",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/lvm.nix",
                "option_name": "services.lvm.boot.vdo.enable",
                "option_description": "<rendered-html><p>Whether to enable support for booting from VDOLVs.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fNatzZABYW7nGSBMuLIi",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/sysupdate.nix",
                "option_name": "systemd.sysupdate.reboot.enable",
                "option_description": "<rendered-html><p>Whether to automatically reboot after an update.</p>\n<p>If set to <code>true</code>, the system will automatically reboot via\na <code>systemd.timer</code> unit but only after a new version was\ninstalled.</p>\n<p>This uses a unit completely separate from the one performing the\nupdate because it is typically advisable to download updates regularly\nwhile the system is up, but delay reboots until the appropriate time\n(i.e. typically at night).</p>\n<p>Set this to <code>false</code> if you do not want to reboot after an\nupdate. This is useful when you update a container image or another\nsource where rebooting is not necessary in order to finalize the\nupdate.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fdatzZABYW7nGSBMuLIi",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/systemd/sysupdate.nix",
                "option_name": "systemd.sysupdate.reboot.timerConfig",
                "option_description": "<rendered-html><p>The timer configuration for rebooting after an update.</p>\n<p>By default, the upstream configuration is used: <a\nhref=\"https://github.com/systemd/systemd/blob/main/units/systemd-sysupdate-reboot.timer\">https://github.com/systemd/systemd/blob/main/units/systemd-sysupdate-reboot.timer</a></p>\n</rendered-html>",
                "option_type": "attribute set of (systemd option)",
                "option_default": "{ }",
                "option_example": "{\n  OnCalendar = \"Sun 14:00:00\";\n  Unit = \"foo.service\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.directBoot.enable",
                "option_description": "<rendered-html><p>If enabled, the virtual machine will boot directly into the kernel\ninstead of through a bootloader. Read more about this feature in the <a\nhref=\"https://qemu-project.gitlab.io/qemu/system/linuxboot.html\">QEMU\ndocumentation on Direct Linux Boot</a></p>\n<p>This is enabled by default. If you want to test netboot, consider\ndisabling this option. Enable a bootloader with <code\nclass=\"interpreted-text\"\nrole=\"option\">virtualisation.useBootLoader</code> if you need.</p>\n<p>Relevant parameters such as those set in <code>boot.initrd</code> and\n<code>boot.kernelParams</code> are also passed to QEMU. Additional\nparameters can be supplied on invocation through the environment\nvariable <code>$QEMU_KERNEL_PARAMS</code>. They are added to the\n<code>-append</code> option, see <a\nhref=\"https://www.qemu.org/docs/master/system/qemu-manpage\">QEMU User\nDocumentation</a> for details For example, to let QEMU use the parent\nterminal as the serial console, set\n<code>QEMU_KERNEL_PARAMS=\"console=ttyS0\"</code>.</p>\n<p>This will not (re-)boot correctly into a system that has switched to\na different configuration on disk.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"!cfg.useBootLoader\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "N9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.directBoot.initrd",
                "option_description": "<rendered-html><p>In direct boot situations, you may want to influence the initrd to\nload to use your own customized payload.</p>\n<p>This is useful if you want to test the netboot image without testing\nthe firmware or the loading part.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\\${config.system.build.initialRamdisk}/\\${config.system.boot.loader.initrdFile}\"",
                "option_example": null,
                "option_flake": null
            }
        }
    ]
}