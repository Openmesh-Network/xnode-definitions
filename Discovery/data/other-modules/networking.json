{
    "total": {
        "value": 349,
        "relation": "eq"
    },
    "max_score": 1.0,
    "hits": [
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "VUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds",
                "option_description": "<rendered-html><p>This option allows you to define bond devices that aggregate\nmultiple, underlying networking interfaces together. The value of this\noption is an attribute set. Each attribute specifies a bond, with the\nattribute name specifying the name of the bond\u2019s network interface</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  bond0 = {\n    interfaces = [ \"eth0\" \"wlan0\" ];\n    driverOptions = {\n  miimon = \"100\";\n  mode = \"active-backup\";\n}\n;\n  };\n  anotherBond.interfaces = [ \"enp4s0f0\" \"enp4s0f1\" \"enp5s0f0\" \"enp5s0f1\" ];\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "VkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds.<name>.driverOptions",
                "option_description": "<rendered-html><p>Options for the bonding driver. Documentation can be found in <a\nhref=\"https://www.kernel.org/doc/Documentation/networking/bonding.txt\">https://www.kernel.org/doc/Documentation/networking/bonding.txt</a></p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": "{\n  miimon = \"100\";\n  mode = \"active-backup\";\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "V0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds.<name>.interfaces",
                "option_description": "<rendered-html><p>The interfaces to bond together</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": null,
                "option_example": "[\n  \"enp4s0f0\"\n  \"enp4s0f1\"\n  \"wlan0\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "WEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds.<name>.lacp_rate",
                "option_description": "<rendered-html><p>DEPRECATED, use <code>driverOptions</code>. Option specifying the\nrate in which we\u2019ll ask our link partner to transmit LACPDU packets in\n802.3ad mode.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"fast\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "WUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds.<name>.miimon",
                "option_description": "<rendered-html><p>DEPRECATED, use <code>driverOptions</code>. Miimon is the number of\nmillisecond in between each round of polling by the device driver for\nfailed links. By default polling is not enabled and the driver is\ntrusted to properly detect and handle failure scenarios.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "100",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "WkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds.<name>.mode",
                "option_description": "<rendered-html><p>DEPRECATED, use <code>driverOptions</code>. The mode which the bond\nwill be running. The default mode for the bonding driver is balance-rr,\noptimizing for throughput. More information about valid modes can be\nfound at <a\nhref=\"https://www.kernel.org/doc/Documentation/networking/bonding.txt\">https://www.kernel.org/doc/Documentation/networking/bonding.txt</a></p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"active-backup\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "W0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bonds.<name>.xmit_hash_policy",
                "option_description": "<rendered-html><p>DEPRECATED, use <code>driverOptions</code>. Selects the transmit hash\npolicy to use for slave selection in balance-xor, 802.3ad, and tlb\nmodes.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"layer2+3\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "XEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bridges",
                "option_description": "<rendered-html><p>This option allows you to define Ethernet bridge devices that connect\nphysical networks together. The value of this option is an attribute\nset. Each attribute specifies a bridge, with the attribute name\nspecifying the name of the bridge\u2019s network interface.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  br0 = {\n    interfaces = [\n      \"eth0\"\n      \"eth1\"\n    ];\n  };\n  br1 = {\n    interfaces = [\n      \"eth2\"\n      \"wlan0\"\n    ];\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "XUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bridges.<name>.interfaces",
                "option_description": "<rendered-html><p>The physical network interfaces connected by the bridge.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": null,
                "option_example": "[\n  \"eth0\"\n  \"eth1\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "XkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.bridges.<name>.rstp",
                "option_description": "<rendered-html><p>Whether the bridge interface should enable rstp.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "X0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway",
                "option_description": "<rendered-html><p>The default gateway. It can be left empty if it is auto-detected\nthrough DHCP. It can be specified as a string or an option set along\nwith a network interface.</p>\n</rendered-html>",
                "option_type": "null or ((submodule) or string convertible to it)",
                "option_default": "null",
                "option_example": "{\n  address = \"131.211.84.1\";\n  interface = \"enp3s0\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "YEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway.address",
                "option_description": "<rendered-html><p>The default gateway address.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "YUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway.interface",
                "option_description": "<rendered-html><p>The default gateway interface.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"enp0s3\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "YkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway.metric",
                "option_description": "<rendered-html><p>The default gateway metric/preference.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "42",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "Y0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway6",
                "option_description": "<rendered-html><p>The default ipv6 gateway. It can be left empty if it is auto-detected\nthrough DHCP. It can be specified as a string or an option set along\nwith a network interface.</p>\n</rendered-html>",
                "option_type": "null or ((submodule) or string convertible to it)",
                "option_default": "null",
                "option_example": "{\n  address = \"2001:4d0:1e04:895::1\";\n  interface = \"enp3s0\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ZEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway6.address",
                "option_description": "<rendered-html><p>The default gateway address.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ZUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway6.interface",
                "option_description": "<rendered-html><p>The default gateway interface.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"enp0s3\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ZkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGateway6.metric",
                "option_description": "<rendered-html><p>The default gateway metric/preference.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "42",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "Z0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.defaultGatewayWindowSize",
                "option_description": "<rendered-html><p>The window size of the default gateway. It limits maximal data bursts\nthat TCP peers are allowed to send to us.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "524288",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "aEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.IPv6rs",
                "option_description": "<rendered-html><p>Force enable or disable solicitation and receipt of IPv6 Router\nAdvertisements. This is required, for example, when using a static\nunique local IPv6 address (ULA) and global IPv6 address\nauto-configuration with SLAAC.</p>\n</rendered-html>",
                "option_type": "null or boolean",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "aUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.allowInterfaces",
                "option_description": "<rendered-html><p>Enable the DHCP client for any interface whose name matches any of\nthe shell glob patterns in this list. Any interface not explicitly\nmatched by this pattern will be denied. This pattern only applies when\nnon-null.</p>\n</rendered-html>",
                "option_type": "null or (list of string)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "akvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.denyInterfaces",
                "option_description": "<rendered-html><p>Disable the DHCP client for any interface whose name matches any of\nthe shell glob patterns in this list. The purpose of this option is to\nblacklist virtual interfaces such as those created by Xen, libvirt, LXC,\netc.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "a0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.enable",
                "option_description": "<rendered-html><p>Whether to enable dhcpcd for device configuration. This is mainly to\nexplicitly disable dhcpcd (for example when using networkd).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "bEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.extraConfig",
                "option_description": "<rendered-html><p>Literal string to append to the config file generated for dhcpcd.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "bUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.persistent",
                "option_description": "<rendered-html><p>Whenever to leave interfaces configured on dhcpcd daemon shutdown.\nSet to true if you have your root or store mounted over the network or\nthis machine accepts SSH connections through DHCP interfaces and clients\nshould be notified when it shuts down.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "bkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.runHook",
                "option_description": "<rendered-html><p>Shell code that will be run after all other hooks. See\n<code>man dhcpcd-run-hooks</code> for details on what is possible.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"if [[ $reason =~ BOUND ]]; then echo $interface: Routers are $new_routers - were $old_routers; fi\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "b0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/dhcpcd.nix",
                "option_name": "networking.dhcpcd.wait",
                "option_description": "<rendered-html><p>This option specifies when the dhcpcd service will fork to\nbackground. If set to \u201cbackground\u201d, dhcpcd will fork to background\nimmediately. If set to \u201cipv4\u201d or \u201cipv6\u201d, dhcpcd will wait for the\ncorresponding IP address to be assigned. If set to \u201cany\u201d, dhcpcd will\nwait for any type (IPv4 or IPv6) to be assigned. If set to \u201cboth\u201d,\ndhcpcd will wait for both an IPv4 and an IPv6 address before forking.\nThe option \u201cif-carrier-up\u201d is equivalent to \u201cany\u201d if either ethernet is\nplugged nor WiFi is powered, and to \u201cbackground\u201d otherwise.</p>\n</rendered-html>",
                "option_type": "one of \"background\", \"any\", \"ipv4\", \"ipv6\", \"both\", \"if-carrier-up\"",
                "option_default": "\"any\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "cEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.domain",
                "option_description": "<rendered-html><p>The domain. It can be left empty if it is auto-detected through\nDHCP.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"home.arpa\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "cUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/hardware/network/b43.nix",
                "option_name": "networking.enableB43Firmware",
                "option_description": "<rendered-html><p>Turn on this option if you want firmware for the NICs supported by\nthe b43 module.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ckvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.enableIPv6",
                "option_description": "<rendered-html><p>Whether to enable support for IPv6.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "c0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/hardware/network/intel-2200bg.nix",
                "option_name": "networking.enableIntel2200BGFirmware",
                "option_description": "<rendered-html><p>Turn on this option if you want firmware for the Intel PRO/Wireless\n2200BG to be loaded automatically. This is required if you want to use\nthis device.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "dEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.extraHosts",
                "option_description": "<rendered-html><p>Additional verbatim entries to be appended to <code\nclass=\"interpreted-text\" role=\"file\">/etc/hosts</code>. For adding hosts\nfrom derivation results, use <code class=\"interpreted-text\"\nrole=\"option\">networking.hostFiles</code> instead.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"192.168.0.1 lanlocalhost\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "dUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.allowPing",
                "option_description": "<rendered-html><p>Whether to respond to incoming ICMPv4 echo requests (\u201cpings\u201d). ICMPv6\npings are always allowed because the larger address space of IPv6 makes\nnetwork scanning much less effective.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "dkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.allowedTCPPortRanges",
                "option_description": "<rendered-html><p>A range of TCP ports on which incoming connections are accepted.</p>\n</rendered-html>",
                "option_type": "list of attribute set of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    from = 8999;\n    to = 9003;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "d0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.allowedTCPPorts",
                "option_description": "<rendered-html><p>List of TCP ports on which incoming connections are accepted.</p>\n</rendered-html>",
                "option_type": "list of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  22\n  80\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "eEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.allowedUDPPortRanges",
                "option_description": "<rendered-html><p>Range of open UDP ports.</p>\n</rendered-html>",
                "option_type": "list of attribute set of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    from = 60000;\n    to = 61000;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "eUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.allowedUDPPorts",
                "option_description": "<rendered-html><p>List of open UDP ports.</p>\n</rendered-html>",
                "option_type": "list of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  53\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ekvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.autoLoadConntrackHelpers",
                "option_description": "<rendered-html><p>Whether to auto-load connection-tracking helpers. See the description\nat networking.firewall.connectionTrackingModules</p>\n<p>(needs kernel 3.5+)</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "e0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.checkReversePath",
                "option_description": "<rendered-html><p>Performs a reverse path filter test on a packet. If a reply to the\npacket would not be sent via the same interface that the packet arrived\non, it is refused.</p>\n<p>If using asymmetric routing or other complicated routing, set this\noption to loose mode or disable it and setup your own\ncounter-measures.</p>\n<p>This option can be either true (or \u201cstrict\u201d), \u201cloose\u201d (only drop the\npacket if the source address is not reachable via any interface) or\nfalse.</p>\n</rendered-html>",
                "option_type": "boolean or one of \"strict\", \"loose\"",
                "option_default": "<rendered-html><p><code>true</code> except if the iptables based firewall is in use and\nthe kernel lacks rpfilter support</p>\n</rendered-html>",
                "option_example": "\"loose\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "fEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.connectionTrackingModules",
                "option_description": "<rendered-html><p>List of connection-tracking helpers that are auto-loaded. The\ncomplete list of possible values is given in the example.</p>\n<p>As helpers can pose as a security risk, it is advised to set this to\nan empty list and disable the setting\nnetworking.firewall.autoLoadConntrackHelpers unless you know what you\nare doing. Connection tracking is disabled by default.</p>\n<p>Loading of helpers is recommended to be done through the CT target.\nMore info: <a\nhref=\"https://home.regit.org/netfilter-en/secure-use-of-helpers/\">https://home.regit.org/netfilter-en/secure-use-of-helpers/</a></p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"ftp\"\n  \"irc\"\n  \"sane\"\n  \"sip\"\n  \"tftp\"\n  \"amanda\"\n  \"h323\"\n  \"netbios_sn\"\n  \"pptp\"\n  \"snmp\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "fUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.enable",
                "option_description": "<rendered-html><p>Whether to enable the firewall. This is a simple stateful firewall\nthat blocks connection attempts to unauthorised TCP or UDP ports on this\nmachine.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "fkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall-iptables.nix",
                "option_name": "networking.firewall.extraCommands",
                "option_description": "<rendered-html><p>Additional shell commands executed as part of the firewall\ninitialisation script. These are executed just before the final \u201creject\u201d\nfirewall rule is added, so they can be used to allow packets that would\notherwise be refused.</p>\n<p>This option only works with the iptables based firewall.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"iptables -A INPUT -p icmp -j ACCEPT\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "f0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall-nftables.nix",
                "option_name": "networking.firewall.extraForwardRules",
                "option_description": "<rendered-html><p>Additional nftables rules to be appended to the forward-allow\nchain.</p>\n<p>This option only works with the nftables based firewall.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"iifname wg0 accept\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "gEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall-nftables.nix",
                "option_name": "networking.firewall.extraInputRules",
                "option_description": "<rendered-html><p>Additional nftables rules to be appended to the input-allow\nchain.</p>\n<p>This option only works with the nftables based firewall.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"ip6 saddr { fc00::/7, fe80::/10 } tcp dport 24800 accept\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "gUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.extraPackages",
                "option_description": "<rendered-html><p>Additional packages to be included in the environment of the system\nas well as the path of networking.firewall.extraCommands.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "[ pkgs.ipset ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "gkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall-nftables.nix",
                "option_name": "networking.firewall.extraReversePathFilterRules",
                "option_description": "<rendered-html><p>Additional nftables rules to be appended to the rpfilter-allow\nchain.</p>\n<p>This option only works with the nftables based firewall.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"fib daddr . mark . iif type local accept\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "g0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall-iptables.nix",
                "option_name": "networking.firewall.extraStopCommands",
                "option_description": "<rendered-html><p>Additional shell commands executed as part of the firewall shutdown\nscript. These are executed just after the removal of the NixOS input\nrule, or if the service enters a failed state.</p>\n<p>This option only works with the iptables based firewall.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"iptables -P INPUT ACCEPT\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "hEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.filterForward",
                "option_description": "<rendered-html><p>Enable filtering in IP forwarding.</p>\n<p>This option only works with the nftables based firewall.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "hUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.interfaces",
                "option_description": "<rendered-html><p>Interface-specific open ports.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "hkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.interfaces.<name>.allowedTCPPortRanges",
                "option_description": "<rendered-html><p>A range of TCP ports on which incoming connections are accepted.</p>\n</rendered-html>",
                "option_type": "list of attribute set of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    from = 8999;\n    to = 9003;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "h0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.interfaces.<name>.allowedTCPPorts",
                "option_description": "<rendered-html><p>List of TCP ports on which incoming connections are accepted.</p>\n</rendered-html>",
                "option_type": "list of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  22\n  80\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "iEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.interfaces.<name>.allowedUDPPortRanges",
                "option_description": "<rendered-html><p>Range of open UDP ports.</p>\n</rendered-html>",
                "option_type": "list of attribute set of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    from = 60000;\n    to = 61000;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "iUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.interfaces.<name>.allowedUDPPorts",
                "option_description": "<rendered-html><p>List of open UDP ports.</p>\n</rendered-html>",
                "option_type": "list of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "[ ]",
                "option_example": "[\n  53\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ikvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.logRefusedConnections",
                "option_description": "<rendered-html><p>Whether to log rejected or dropped incoming connections. Note: The\nlogs are found in the kernel logs, i.e. dmesg or journalctl -k.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "i0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.logRefusedPackets",
                "option_description": "<rendered-html><p>Whether to log all rejected or dropped incoming packets. This tends\nto give a lot of log messages, so it\u2019s mostly useful for debugging.\nNote: The logs are found in the kernel logs, i.e. dmesg or journalctl\n-k.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "jEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.logRefusedUnicastsOnly",
                "option_description": "<rendered-html><p>If <code class=\"interpreted-text\"\nrole=\"option\">networking.firewall.logRefusedPackets</code> and this\noption are enabled, then only log packets specifically directed at this\nmachine, i.e., not broadcasts or multicasts.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "jUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.logReversePathDrops",
                "option_description": "<rendered-html><p>Logs dropped packets failing the reverse path filter test if the\noption networking.firewall.checkReversePath is enabled.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "jkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.package",
                "option_description": "<rendered-html><p>The package to use for running the firewall service.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "if config.networking.nftables.enable then \"pkgs.nftables\" else \"pkgs.iptables\"",
                "option_example": "pkgs.iptables-legacy",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "j0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.pingLimit",
                "option_description": "<rendered-html><p>If pings are allowed, this allows setting rate limits on them.</p>\n<p>For the iptables based firewall, it should be set like \u201c\u2013limit\n1/minute \u2013limit-burst 5\u201d.</p>\n<p>For the nftables based firewall, it should be set like \u201c2/second\u201d or\n\u201c1/minute burst 5 packets\u201d.</p>\n</rendered-html>",
                "option_type": "null or strings concatenated with \" \"",
                "option_default": "null",
                "option_example": "\"--limit 1/minute --limit-burst 5\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "kEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.rejectPackets",
                "option_description": "<rendered-html><p>If set, refused packets are rejected rather than dropped (ignored).\nThis means that an ICMP \u201cport unreachable\u201d error message is sent back to\nthe client (or a TCP RST packet in case of an existing connection).\nRejecting packets makes port scanning somewhat easier.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "kUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/firewall.nix",
                "option_name": "networking.firewall.trustedInterfaces",
                "option_description": "<rendered-html><p>Traffic coming in from these interfaces will be accepted\nunconditionally. Traffic from the loopback (lo) interface will always be\naccepted.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"enp0s2\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "kkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fooOverUDP",
                "option_description": "<rendered-html><p>This option allows you to configure Foo Over UDP and Generic UDP\nEncapsulation endpoints. See <code class=\"interpreted-text\"\nrole=\"manpage\">ip-fou(8)</code> for details.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  backup = {\n    port = 9002;\n  };\n  primary = {\n    local = {\n      address = \"192.0.2.1\";\n      dev = \"eth0\";\n    };\n    port = 9001;\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "k0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fooOverUDP.<name>.local",
                "option_description": "<rendered-html><p>Local address (and optionally device) to bind to using the given\nport.</p>\n</rendered-html>",
                "option_type": "null or (submodule)",
                "option_default": "null",
                "option_example": "{\n  address = \"203.0.113.22\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "lEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fooOverUDP.<name>.local.address",
                "option_description": "<rendered-html><p>Local address to bind to. The address must be available when the FOU\nendpoint is created, using the scripted network setup this can be\nachieved either by setting <code>dev</code> or adding dependency\ninformation to <code>systemd.services.&lt;name&gt;-fou-encap</code>; it\nisn\u2019t supported when using networkd.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "lUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fooOverUDP.<name>.local.dev",
                "option_description": "<rendered-html><p>Network device to bind to.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"eth0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "lkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fooOverUDP.<name>.port",
                "option_description": "<rendered-html><p>Local port of the encapsulation UDP socket.</p>\n</rendered-html>",
                "option_type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "l0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fooOverUDP.<name>.protocol",
                "option_description": "<rendered-html><p>Protocol number of the encapsulated packets. Specifying\n<code>null</code> (the default) creates a GUE endpoint, specifying a\nprotocol number will create a FOU endpoint.</p>\n</rendered-html>",
                "option_type": "null or integer between 1 and 255 (both inclusive)",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fqdn",
                "option_description": "<rendered-html><p>The fully qualified domain name (FQDN) of this host. It is the result\nof combining <code>networking.hostName</code> and\n<code>networking.domain.</code> Using this option will result in an\nevaluation error if the hostname is empty or no domain is specified.</p>\n<p>Modules that accept a mere <code>networking.hostName</code> but\nprefer a fully qualified domain name may use\n<code>networking.fqdnOrHostName</code> instead.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"${networking.hostName}.${networking.domain}\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.fqdnOrHostName",
                "option_description": "<rendered-html><p>Either the fully qualified domain name (FQDN), or just the host name\nif it does not exists.</p>\n<p>This is a convenience option for modules to read instead of\n<code>fqdn</code> when a mere <code>hostName</code> is also an\nacceptable value; this option does not throw an error when\n<code>domain</code> is unset.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "if cfg.domain == null then cfg.hostName else cfg.fqdn\n",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.greTunnels",
                "option_description": "<rendered-html><p>This option allows you to define Generic Routing Encapsulation (GRE)\ntunnels.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  greBridge = {\n    remote = \"10.0.0.1\";\n    local = \"10.0.0.22\";\n    dev = \"enp4s0f0\";\n    type = \"tap\";\n    ttl = 255;\n  };\n  gre6Tunnel = {\n    remote = \"fd7a:5634::1\";\n    local = \"fd7a:5634::2\";\n    dev = \"enp4s0f0\";\n    type = \"tun6\";\n    ttl = 255;\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "m0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.greTunnels.<name>.dev",
                "option_description": "<rendered-html><p>The underlying network device on which the tunnel resides.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"enp4s0f0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "nEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.greTunnels.<name>.local",
                "option_description": "<rendered-html><p>The address of the local endpoint which the remote side should send\npackets to.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"10.0.0.22\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "nUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.greTunnels.<name>.remote",
                "option_description": "<rendered-html><p>The address of the remote endpoint to forward traffic over.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"10.0.0.1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "nkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.greTunnels.<name>.ttl",
                "option_description": "<rendered-html><p>The time-to-live/hoplimit of the connection to the remote tunnel\nendpoint.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "255",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "n0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.greTunnels.<name>.type",
                "option_description": "<rendered-html><p>Whether the tunnel routes layer 2 (tap) or layer 3 (tun) traffic.</p>\n</rendered-html>",
                "option_type": "one of \"tun\", \"tap\", \"tun6\", \"tap6\"",
                "option_default": "\"tap\"",
                "option_example": "\"tap\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "oEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.hostFiles",
                "option_description": "<rendered-html><p>Files that should be concatenated together to form <code\nclass=\"interpreted-text\" role=\"file\">/etc/hosts</code>.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "<rendered-html><p>Hosts from <code class=\"interpreted-text\"\nrole=\"option\">networking.hosts</code> and <code class=\"interpreted-text\"\nrole=\"option\">networking.extraHosts</code></p>\n</rendered-html>",
                "option_example": "[ \"${pkgs.my-blocklist-package}/share/my-blocklist/hosts\" ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "oUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.hostId",
                "option_description": "<rendered-html><p>The 32-bit host ID of the machine, formatted as 8 hexadecimal\ncharacters.</p>\n<p>You should try to make this ID unique among your machines. You can\ngenerate a random 32-bit ID using the following commands:</p>\n<p><code>head -c 8 /etc/machine-id</code></p>\n<p>(this derives it from the machine-id that systemd generates) or</p>\n<p><code>head -c4 /dev/urandom | od -A none -t x4</code></p>\n<p>The primary use case is to ensure when using ZFS that a pool isn\u2019t\nimported accidentally on a wrong machine.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"4e98920d\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "okvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.hostName",
                "option_description": "<rendered-html><p>The name of the machine. Leave it empty if you want to obtain it from\na DHCP server (if using DHCP). The hostname must be a valid DNS label\n(see RFC 1035 section 2.3.1: \u201cPreferred name syntax\u201d, RFC 1123 section\n2.1: \u201cHost Names and Numbers\u201d) and as such must not contain the domain\npart. This means that the hostname must start with a letter or digit,\nend with a letter or digit, and have as interior characters only\nletters, digits, and hyphen. The maximum length is 63 characters.\nAdditionally it is recommended to only use lower-case characters. If\n(e.g. for legacy reasons) a FQDN is required as the Linux kernel network\nnode hostname (uname \u2013nodename) the option\nboot.kernel.sysctl.\u201ckernel.hostname\u201d can be used as a workaround (but\nthe 64 character limit still applies).</p>\n<p>WARNING: Do not use underscores (_) or you may run into unexpected\nissues.</p>\n</rendered-html>",
                "option_type": "string matching the pattern ^$|^[[:alnum:]]([[:alnum:]_-]{0,61}[[:alnum:]])?$",
                "option_default": "config.system.nixos.distroId",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "o0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.hosts",
                "option_description": "<rendered-html><p>Locally defined maps of hostnames to IP addresses.</p>\n</rendered-html>",
                "option_type": "attribute set of list of string",
                "option_default": null,
                "option_example": "{\n  \"127.0.0.1\" = [ \"foo.bar.baz\" ];\n  \"192.168.0.2\" = [ \"fileserver.local\" \"nameserver.local\" ];\n};\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "pEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces",
                "option_description": "<rendered-html><p>The configuration for each network interface.</p>\n<p>Please note that <code class=\"interpreted-text\"\nrole=\"option\">systemd.network.netdevs</code> has more features and is\nbetter maintained. When building new things, it is advised to use that\ninstead.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  eth0 = {\n    ipv4 = {\n      addresses = [\n        {\n          address = \"131.211.84.78\";\n          prefixLength = 25;\n        }\n      ];\n    };\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "pUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.addresses",
                "option_description": "<rendered-html><p>List of IPv4 addresses that will be statically assigned to the\ninterface.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    address = \"10.0.0.1\";\n    prefixLength = 16;\n  }\n  {\n    address = \"192.168.1.1\";\n    prefixLength = 24;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "pkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.addresses.*.address",
                "option_description": "<rendered-html><p>IPv4 address of the interface. Leave empty to configure the interface\nusing DHCP.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "p0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.addresses.*.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the interface, specified as the number of bits in the\nprefix (<code>24</code>).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "qEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.routes",
                "option_description": "<rendered-html><p>List of extra IPv4 static routes that will be assigned to the\ninterface.</p>\n<div class=\"warning\">\n<p>If the route type is the default <code>unicast</code>, then the scope\nis set differently depending on the value of <code\nclass=\"interpreted-text\" role=\"option\">networking.useNetworkd</code>:\nthe script-based backend sets it to <code>link</code>, while networkd\nsets it to <code>global</code>.</p>\n</div>\n<p>If you want consistency between the two implementations, set the\nscope of the route manually with\n<code>networking.interfaces.eth0.ipv4.routes = [{ options.scope = \"global\"; }]</code>\nfor example.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    address = \"10.0.0.0\";\n    prefixLength = 16;\n  }\n  {\n    address = \"192.168.2.0\";\n    prefixLength = 24;\n    via = \"192.168.1.1\";\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "qUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.routes.*.address",
                "option_description": "<rendered-html><p>IPv4 address of the network.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "qkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.routes.*.options",
                "option_description": "<rendered-html><p>Other route options. See the symbol <code>OPTIONS</code> in the\n<code>ip-route(8)</code> manual page for the details. You may also\nspecify <code>metric</code>, <code>src</code>, <code>protocol</code>,\n<code>scope</code>, <code>from</code> and <code>table</code>, which are\ntechnically not route options, in the sense used in the manual.</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": "{\n  mtu = \"1492\";\n  window = \"524288\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "q0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.routes.*.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the network, specified as the number of bits in the\nprefix (<code>24</code>).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "rEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.routes.*.type",
                "option_description": "<rendered-html><p>Type of the route. See the <code>Route types</code> section in the\n<code>ip-route(8)</code> manual page for the details.</p>\n<p>Note that <code>prohibit</code>, <code>blackhole</code>,\n<code>unreachable</code>, and <code>throw</code> cannot be configured\nper device, so they are not available here. Similarly, <code>nat</code>\nhasn\u2019t been supported since kernel 2.6.</p>\n</rendered-html>",
                "option_type": "null or one of \"unicast\", \"local\", \"broadcast\", \"multicast\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "rUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv4.routes.*.via",
                "option_description": "<rendered-html><p>IPv4 address of the next hop.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "rkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.addresses",
                "option_description": "<rendered-html><p>List of IPv6 addresses that will be statically assigned to the\ninterface.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    address = \"fdfd:b3f0:482::1\";\n    prefixLength = 48;\n  }\n  {\n    address = \"2001:1470:fffd:2098::e006\";\n    prefixLength = 64;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "r0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.addresses.*.address",
                "option_description": "<rendered-html><p>IPv6 address of the interface. Leave empty to configure the interface\nusing DHCP.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "sEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.addresses.*.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the interface, specified as the number of bits in the\nprefix (<code>64</code>).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "sUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.routes",
                "option_description": "<rendered-html><p>List of extra IPv6 static routes that will be assigned to the\ninterface.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    address = \"fdfd:b3f0::\";\n    prefixLength = 48;\n  }\n  {\n    address = \"2001:1470:fffd:2098::\";\n    prefixLength = 64;\n    via = \"fdfd:b3f0::1\";\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "skvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.routes.*.address",
                "option_description": "<rendered-html><p>IPv6 address of the network.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "s0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.routes.*.options",
                "option_description": "<rendered-html><p>Other route options. See the symbol <code>OPTIONS</code> in the\n<code>ip-route(8)</code> manual page for the details. You may also\nspecify <code>metric</code>, <code>src</code>, <code>protocol</code>,\n<code>scope</code>, <code>from</code> and <code>table</code>, which are\ntechnically not route options, in the sense used in the manual.</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": "{\n  mtu = \"1492\";\n  window = \"524288\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "tEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.routes.*.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the network, specified as the number of bits in the\nprefix (<code>64</code>).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "tUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.routes.*.type",
                "option_description": "<rendered-html><p>Type of the route. See the <code>Route types</code> section in the\n<code>ip-route(8)</code> manual page for the details.</p>\n<p>Note that <code>prohibit</code>, <code>blackhole</code>,\n<code>unreachable</code>, and <code>throw</code> cannot be configured\nper device, so they are not available here. Similarly, <code>nat</code>\nhasn\u2019t been supported since kernel 2.6.</p>\n</rendered-html>",
                "option_type": "null or one of \"unicast\", \"local\", \"broadcast\", \"multicast\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "tkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.ipv6.routes.*.via",
                "option_description": "<rendered-html><p>IPv6 address of the next hop.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "t0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.macAddress",
                "option_description": "<rendered-html><p>MAC address of the interface. Leave empty to use the default.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"00:11:22:33:44:55\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "uEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.mtu",
                "option_description": "<rendered-html><p>MTU size for packets leaving the interface. Leave empty to use the\ndefault.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "9000",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "uUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.name",
                "option_description": "<rendered-html><p>Name of the interface.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"eth0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ukvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.proxyARP",
                "option_description": "<rendered-html><p>Turn on proxy_arp for this device. This is mainly useful for creating\npseudo-bridges between a real interface and a virtual network such as\nVPN or a virtual machine for interfaces that don\u2019t support real bridging\n(most wlan interfaces). As ARP proxying acts slightly above the\nlink-layer, below-ip traffic isn\u2019t bridged, so things like DHCP won\u2019t\nwork. The advantage above using NAT lies in the fact that no IP\naddresses are shared, so all hosts are reachable/routeable.</p>\n<p>WARNING: turns on ip-routing, so if you have multiple interfaces, you\nshould think of the consequence and setup firewall rules to limit\nthis.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "u0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.tempAddress",
                "option_description": "<rendered-html><p>When IPv6 is enabled with SLAAC, this option controls the use of\ntemporary address (aka privacy extensions) on this interface. This is\nused to reduce tracking.</p>\n<p>See also the global option <a\nhref=\"https://search.nixos.org/options?channel=unstable&amp;show=networking.tempAddresses&amp;query=networking.tempAddresses\">networking.tempAddresses</a>,\nwhich applies to all interfaces where this is not set.</p>\n<p>Possible values are:</p>\n<ul>\n<li><code>\"default\"</code> to generate IPv6 temporary addresses and use\nthese as source addresses in routing;</li>\n<li><code>\"disabled\"</code> to completely disable IPv6 temporary\naddresses;</li>\n<li><code>\"enabled\"</code> to generate IPv6 temporary addresses but\nstill use EUI-64 addresses as source addresses;</li>\n</ul>\n</rendered-html>",
                "option_type": "one of \"default\", \"disabled\", \"enabled\"",
                "option_default": "config.networking.tempAddresses",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "vEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.useDHCP",
                "option_description": "<rendered-html><p>Whether this interface should be configured with DHCP. Overrides the\ndefault set by <code class=\"interpreted-text\"\nrole=\"option\">networking.useDHCP</code>. If <code>null</code> (the\ndefault), DHCP is enabled if the interface has no IPv4 addresses\nconfigured with <code class=\"interpreted-text\"\nrole=\"option\">networking.interfaces.&lt;name&gt;.ipv4.addresses</code>,\nand disabled otherwise.</p>\n</rendered-html>",
                "option_type": "null or boolean",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "vUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.virtual",
                "option_description": "<rendered-html><p>Whether this interface is virtual and should be created by tunctl.\nThis is mainly useful for creating bridges between a host and a virtual\nnetwork such as VPN or a virtual machine.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "vkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.virtualOwner",
                "option_description": "<rendered-html><p>In case of a virtual device, the user who owns it.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"root\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "v0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.virtualType",
                "option_description": "<rendered-html><p>The type of interface to create. The default is TUN for an interface\nname starting with \u201ctun\u201d, otherwise TAP.</p>\n</rendered-html>",
                "option_type": "one of \"tun\", \"tap\"",
                "option_default": "if hasPrefix \"tun\" name then \"tun\" else \"tap\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "wEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.wakeOnLan.enable",
                "option_description": "<rendered-html><p>Whether to enable wol on this interface.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "wUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.interfaces.<name>.wakeOnLan.policy",
                "option_description": "<rendered-html><p>The <a\nhref=\"https://www.freedesktop.org/software/systemd/man/systemd.link.html#WakeOnLan=\">Wake-on-LAN\npolicy</a> to set for the device.</p>\n<p>The options are</p>\n<ul>\n<li><code>phy</code>: Wake on PHY activity</li>\n<li><code>unicast</code>: Wake on unicast messages</li>\n<li><code>multicast</code>: Wake on multicast messages</li>\n<li><code>broadcast</code>: Wake on broadcast messages</li>\n<li><code>arp</code>: Wake on ARP</li>\n<li><code>magic</code>: Wake on receipt of a magic packet</li>\n</ul>\n</rendered-html>",
                "option_type": "list of (one of \"phy\", \"unicast\", \"multicast\", \"broadcast\", \"arp\", \"magic\", \"secureon\")",
                "option_default": "[\n  \"magic\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "wkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/iproute2.nix",
                "option_name": "networking.iproute2.enable",
                "option_description": "<rendered-html><p>Whether to enable copying IP route configuration files.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "w0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/iproute2.nix",
                "option_name": "networking.iproute2.rttablesExtraConfig",
                "option_description": "<rendered-html><p>Verbatim lines to add to /etc/iproute2/rt_tables</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "xEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/jool.nix",
                "option_name": "networking.jool.enable",
                "option_description": "<rendered-html><p>Whether to enable Jool, an Open Source implementation of IPv4/IPv6\ntranslation on Linux.</p>\n<p>Jool can perform stateless IP/ICMP translation (SIIT) or stateful\nNAT64, analogous to the IPv4 NAPT. Refer to the upstream <a\nhref=\"https://nicmx.github.io/Jool/en/intro-xlat.html\">documentation</a>\nfor the supported modes of translation and how to configure them.</p>\n<p>Enabling this option will install the Jool kernel module and the\ncommand line tools for controlling it.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "xUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/jool.nix",
                "option_name": "networking.jool.nat64",
                "option_description": "<rendered-html><p>Definitions of NAT64 instances of Jool. See the <a\nhref=\"https://nicmx.github.io/Jool/en/config-atomic.html\">documentation</a>\nfor the available options. Also check out the <a\nhref=\"https://nicmx.github.io/Jool/en/run-nat64.html\">tutorial</a> for\nan introduction to NAT64 and how to troubleshoot the setup.</p>\n<p>The attribute name defines the name of the instance, with the main\none being <code>default</code>: this can be accessed from the command\nline without specifying the name with <code>-i</code>.</p>\n<div class=\"note\">\n<p>Instances created imperatively from the command line will not\ninterfere with the NixOS instances, provided the respective\n<code>pool4</code> addresses and port ranges are not overlapping.</p>\n</div>\n<div class=\"warning\">\n<p>Changes to an instance performed via\n<code>jool -i &lt;name&gt;</code> are applied correctly but will be lost\nafter restarting the respective\n<code>jool-nat64-&lt;name&gt;.service</code>.</p>\n</div>\n</rendered-html>",
                "option_type": "attribute set of (JSON value)",
                "option_default": "{ }",
                "option_example": "{\n  default = {\n    # custom NAT64 prefix\n    global.pool6 = \"2001:db8:64::/96\";\n\n    # Port forwarding\n    bib = [\n      { # SSH 192.0.2.16 \u2192 2001:db8:a::1\n        \"protocol\"     = \"TCP\";\n        \"ipv4 address\" = \"192.0.2.16#22\";\n        \"ipv6 address\" = \"2001:db8:a::1#22\";\n      }\n      { # DNS (TCP) 192.0.2.16 \u2192 2001:db8:a::2\n        \"protocol\"     = \"TCP\";\n        \"ipv4 address\" = \"192.0.2.16#53\";\n        \"ipv6 address\" = \"2001:db8:a::2#53\";\n      }\n      { # DNS (UDP) 192.0.2.16 \u2192 2001:db8:a::2\n        \"protocol\" = \"UDP\";\n        \"ipv4 address\" = \"192.0.2.16#53\";\n        \"ipv6 address\" = \"2001:db8:a::2#53\";\n      }\n    ];\n\n    pool4 = [\n      # Port ranges for dynamic translation\n      { protocol =  \"TCP\";  prefix = \"192.0.2.16/32\"; \"port range\" = \"40001-65535\"; }\n      { protocol =  \"UDP\";  prefix = \"192.0.2.16/32\"; \"port range\" = \"40001-65535\"; }\n      { protocol = \"ICMP\";  prefix = \"192.0.2.16/32\"; \"port range\" = \"40001-65535\"; }\n\n      # Ports for static BIB entries\n      { protocol =  \"TCP\";  prefix = \"192.0.2.16/32\"; \"port range\" = \"22\"; }\n      { protocol =  \"UDP\";  prefix = \"192.0.2.16/32\"; \"port range\" = \"53\"; }\n    ];\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "xkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/jool.nix",
                "option_name": "networking.jool.nat64.<name>.framework",
                "option_description": "<rendered-html><p>The framework to use for attaching Jool\u2019s translation to the exist\nkernel packet processing rules. See the <a\nhref=\"https://nicmx.github.io/Jool/en/intro-jool.html#design\">documentation</a>\nfor the differences between the two options.</p>\n</rendered-html>",
                "option_type": "one of \"netfilter\", \"iptables\"",
                "option_default": "\"netfilter\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "x0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/jool.nix",
                "option_name": "networking.jool.nat64.<name>.global.pool6",
                "option_description": "<rendered-html><p>The prefix used for embedding IPv4 into IPv6 addresses. Defaults to\nthe well-known NAT64 prefix, defined by <a\nhref=\"https://datatracker.ietf.org/doc/html/rfc6052\">RFC 6052</a>.</p>\n</rendered-html>",
                "option_type": "Network prefix in CIDR notation",
                "option_default": "\"64:ff9b::/96\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "yEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/jool.nix",
                "option_name": "networking.jool.siit",
                "option_description": "<rendered-html><p>Definitions of SIIT instances of Jool. See the <a\nhref=\"https://nicmx.github.io/Jool/en/config-atomic.html\">documentation</a>\nfor the available options. Also check out the <a\nhref=\"https://nicmx.github.io/Jool/en/run-vanilla.html\">tutorial</a> for\nan introduction to SIIT and how to troubleshoot the setup.</p>\n<p>The attribute name defines the name of the instance, with the main\none being <code>default</code>: this can be accessed from the command\nline without specifying the name with <code>-i</code>.</p>\n<div class=\"note\">\n<p>Instances created imperatively from the command line will not\ninterfere with the NixOS instances, provided the respective EAMT\naddresses and port ranges are not overlapping.</p>\n</div>\n<div class=\"warning\">\n<p>Changes to an instance performed via\n<code>jool -i &lt;name&gt;</code> are applied correctly but will be lost\nafter restarting the respective\n<code>jool-siit-&lt;name&gt;.service</code>.</p>\n</div>\n</rendered-html>",
                "option_type": "attribute set of (JSON value)",
                "option_default": "{ }",
                "option_example": "{\n  default = {\n    # Maps any IPv4 address x.y.z.t to 2001:db8::x.y.z.t and v.v.\n    global.pool6 = \"2001:db8::/96\";\n\n    # Explicit address mappings\n    eamt = [\n      # 2001:db8:1:: \u2190\u2192 192.0.2.0\n      { \"ipv6 prefix\" = \"2001:db8:1::/128\"; \"ipv4 prefix\" = \"192.0.2.0\"; }\n      # 2001:db8:1::x \u2190\u2192 198.51.100.x\n      { \"ipv6 prefix\" = \"2001:db8:2::/120\"; \"ipv4 prefix\" = \"198.51.100.0/24\"; }\n    ];\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "yUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/jool.nix",
                "option_name": "networking.jool.siit.<name>.framework",
                "option_description": "<rendered-html><p>The framework to use for attaching Jool\u2019s translation to the exist\nkernel packet processing rules. See the <a\nhref=\"https://nicmx.github.io/Jool/en/intro-jool.html#design\">documentation</a>\nfor the differences between the two options.</p>\n</rendered-html>",
                "option_type": "one of \"netfilter\", \"iptables\"",
                "option_default": "\"netfilter\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ykvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.localCommands",
                "option_description": "<rendered-html><p>Shell commands to be executed at the end of the\n<code>network-setup</code> systemd service. Note that if you are using\nDHCP to obtain the network configuration, interfaces may not be fully\nconfigured yet.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"text=anything; echo You can put $text here.\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "y0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.macvlans",
                "option_description": "<rendered-html><p>This option allows you to define macvlan interfaces which should be\nautomatically created.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  wan = {\n    interface = \"enp2s0\";\n    mode = \"vepa\";\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "zEvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.macvlans.<name>.interface",
                "option_description": "<rendered-html><p>The interface the macvlan will transmit packets through.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"enp4s0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "zUvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.macvlans.<name>.mode",
                "option_description": "<rendered-html><p>The mode of the macvlan device.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"vepa\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "zkvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.nameservers",
                "option_description": "<rendered-html><p>The list of nameservers. It can be left empty if it is auto-detected\nthrough DHCP.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"130.161.158.4\"\n  \"130.161.33.17\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "z0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.dmzHost",
                "option_description": "<rendered-html><p>The local IP address to which all traffic that does not match any\nforwarding rule is forwarded.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"10.0.0.1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "0EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.enable",
                "option_description": "<rendered-html><p>Whether to enable Network Address Translation (NAT).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "0UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.enableIPv6",
                "option_description": "<rendered-html><p>Whether to enable IPv6 NAT.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "0kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.externalIP",
                "option_description": "<rendered-html><p>The public IP address to which packets from the local network are to\nbe rewritten. If this is left empty, the IP address associated with the\nexternal interface will be used.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"203.0.113.123\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "00vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.externalIPv6",
                "option_description": "<rendered-html><p>The public IPv6 address to which packets from the local network are\nto be rewritten. If this is left empty, the IP address associated with\nthe external interface will be used.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"2001:dc0:2001:11::175\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "1EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.externalInterface",
                "option_description": "<rendered-html><p>The name of the external network interface.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"eth1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "1UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat-iptables.nix",
                "option_name": "networking.nat.extraCommands",
                "option_description": "<rendered-html><p>Additional shell commands executed as part of the nat initialisation\nscript.</p>\n<p>This option is incompatible with the nftables based nat module.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"iptables -A INPUT -p icmp -j ACCEPT\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "1kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat-iptables.nix",
                "option_name": "networking.nat.extraStopCommands",
                "option_description": "<rendered-html><p>Additional shell commands executed as part of the nat teardown\nscript.</p>\n<p>This option is incompatible with the nftables based nat module.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"iptables -D INPUT -p icmp -j ACCEPT || true\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "10vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.forwardPorts",
                "option_description": "<rendered-html><p>List of forwarded ports from the external interface to internal\ndestinations by using DNAT. Destination can be IPv6 if IPv6 NAT is\nenabled.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[\n  {\n    destination = \"10.0.0.1:80\";\n    proto = \"tcp\";\n    sourcePort = 8080;\n  }\n  {\n    destination = \"[fc00::2]:80\";\n    proto = \"tcp\";\n    sourcePort = 8080;\n  }\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "2EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.forwardPorts.*.destination",
                "option_description": "<rendered-html><p>Forward connection to destination ip:port (or [ipv6]:port); to\nspecify a port range, use ip:start-end</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"10.0.0.1:80\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "2UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.forwardPorts.*.loopbackIPs",
                "option_description": "<rendered-html><p>Public IPs for NAT reflection; for connections to\n<code>loopbackip:sourcePort</code> from the host itself and from other\nhosts behind NAT</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[ \"55.1.2.3\" ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "2kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.forwardPorts.*.proto",
                "option_description": "<rendered-html><p>Protocol of forwarded connection</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"tcp\"",
                "option_example": "\"udp\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "20vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.forwardPorts.*.sourcePort",
                "option_description": "<rendered-html><p>Source port of the external interface; to specify a port range, use a\nstring with a colon (e.g. \u201c60000:61000\u201d)</p>\n</rendered-html>",
                "option_type": "signed integer or string matching the pattern [[:digit:]]+:[[:digit:]]+",
                "option_default": null,
                "option_example": "8080",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "3EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.internalIPs",
                "option_description": "<rendered-html><p>The IP address ranges for which to perform NAT. Packets coming from\nthese addresses (on any interface) and destined for the external\ninterface will be rewritten.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"192.168.1.0/24\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "3UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.internalIPv6s",
                "option_description": "<rendered-html><p>The IPv6 address ranges for which to perform NAT. Packets coming from\nthese addresses (on any interface) and destined for the external\ninterface will be rewritten.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"fc00::/64\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "3kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nat.nix",
                "option_name": "networking.nat.internalInterfaces",
                "option_description": "<rendered-html><p>The interfaces for which to perform NAT. Packets coming from these\ninterface and destined for the external interface will be rewritten.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"eth0\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "30vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.appendNameservers",
                "option_description": "<rendered-html><p>A list of name servers that should be appended to the ones configured\nin NetworkManager or received by DHCP.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "4EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.connectionConfig",
                "option_description": "<rendered-html><p>Configuration for the [connection] section of NetworkManager.conf.\nRefer to <a\nhref=\"https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html\">\n<span>https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html#id-1.2.3.11</span>\n</a> or <code class=\"interpreted-text\"\nrole=\"manpage\">NetworkManager.conf(5)</code> for more information.</p>\n</rendered-html>",
                "option_type": "attribute set of (null or boolean or signed integer or string)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "4UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.dhcp",
                "option_description": "<rendered-html><p>Which program (or internal library) should be used for DHCP.</p>\n</rendered-html>",
                "option_type": "one of \"dhcpcd\", \"internal\"",
                "option_default": "\"internal\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "4kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.dispatcherScripts",
                "option_description": "<rendered-html><p>A list of scripts which will be executed in response to network\nevents.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[ {\n  source = pkgs.writeText \"upHook\" ''\n    if [ \"$2\" != \"up\" ]; then\n      logger \"exit: event $2 != up\"\n      exit\n    fi\n\n    # coreutils and iproute are in PATH too\n    logger \"Device $DEVICE_IFACE coming up\"\n  '';\n  type = \"basic\";\n} ]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "40vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.dispatcherScripts.*.source",
                "option_description": "<rendered-html><p>Path to the hook script.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "5EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.dispatcherScripts.*.type",
                "option_description": "<rendered-html><p>Dispatcher hook type. Look up the hooks described at [<a\nhref=\"https://developer.gnome.org/NetworkManager/stable/NetworkManager.html](https://developer.gnome.org/NetworkManager/stable/NetworkManager.html)\">https://developer.gnome.org/NetworkManager/stable/NetworkManager.html](https://developer.gnome.org/NetworkManager/stable/NetworkManager.html)</a>\nand choose the type depending on the output folder. You should then\nfilter the event type (e.g., \u201cup\u201d/\u201cdown\u201d) from within your script.</p>\n</rendered-html>",
                "option_type": "one of \"basic\", \"pre-down\", \"pre-up\"",
                "option_default": "\"basic\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "5UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.dns",
                "option_description": "<rendered-html><p>Set the DNS (<code>resolv.conf</code>) processing mode.</p>\n<p>A description of these modes can be found in the main section of <a\nhref=\"https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html\">\n<span>https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html</span>\n</a> or in <code class=\"interpreted-text\"\nrole=\"manpage\">NetworkManager.conf(5)</code>.</p>\n</rendered-html>",
                "option_type": "one of \"default\", \"dnsmasq\", \"systemd-resolved\", \"none\"",
                "option_default": "\"default\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "5kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.enable",
                "option_description": "<rendered-html><p>Whether to use NetworkManager to obtain an IP address and other\nconfiguration for all network interfaces that are not manually\nconfigured. If enabled, a group <code>networkmanager</code> will be\ncreated. Add all users that should have permission to change network\nsettings to this group.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "50vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.enableStrongSwan",
                "option_description": "<rendered-html><p>Enable the StrongSwan plugin.</p>\n<p>If you enable this option the <code>networkmanager_strongswan</code>\nplugin will be added to the <code class=\"interpreted-text\"\nrole=\"option\">networking.networkmanager.plugins</code> option so you\ndon\u2019t need to do that yourself.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "6EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.ensureProfiles.environmentFiles",
                "option_description": "<rendered-html><p>Files to load as environment file. Environment variables from this\nfile will be substituted into the static configuration file using <a\nhref=\"https://github.com/a8m/envsubst\">envsubst</a>.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "[ ]",
                "option_example": "[\n  \"/run/secrets/network-manager.env\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "6UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.ensureProfiles.profiles",
                "option_description": "<rendered-html><p>Declaratively define NetworkManager profiles. You can find\ninformation about the generated file format <a\nhref=\"https://networkmanager.dev/docs/api/latest/nm-settings-keyfile.html\">here</a>\nand <a\nhref=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/assembly_networkmanager-connection-profiles-in-keyfile-format_configuring-and-managing-networking\">here</a>.\nYou current profiles which are most likely stored in\n<code>/etc/NetworkManager/system-connections</code> and there is <a\nhref=\"https://github.com/janik-haag/nm2nix\">a tool</a> to convert them\nto the needed nix code. If you add a new ad-hoc connection via a GUI or\nnmtui or anything similar it should just work together with the\ndeclarative ones. And if you edit a declarative profile NetworkManager\nwill move it to the persistent storage and treat it like a ad-hoc one,\nbut there will be two profiles as soon as the systemd unit from this\noption runs again which can be confusing since NetworkManager tools will\nstart displaying two profiles with the same name and probably a bit\ndifferent settings depending on what you edited. A profile won\u2019t be\ndeleted even if it\u2019s removed from the config until the system reboots\nbecause that\u2019s when NetworkManager clears it\u2019s temp directory. If\n<code>networking.resolvconf.enable</code> is true, attributes affecting\nthe name resolution (such as <code>ignore-auto-dns</code>) may not end\nup changing <code>/etc/resolv.conf</code> as expected when other name\nservices (for example <code>networking.dhcpcd</code>) are enabled. Run\n<code>resolvconf -l</code> in the terminal to see what each service\nproduces.</p>\n</rendered-html>",
                "option_type": "attribute set of (attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string)))",
                "option_default": "{ }",
                "option_example": "{\n  home-wifi = {\n    connection = {\n      id = \"home-wifi\";\n      permissions = \"\";\n      type = \"wifi\";\n    };\n    ipv4 = {\n      dns-search = \"\";\n      method = \"auto\";\n    };\n    ipv6 = {\n      addr-gen-mode = \"stable-privacy\";\n      dns-search = \"\";\n      method = \"auto\";\n    };\n    wifi = {\n      mac-address-blacklist = \"\";\n      mode = \"infrastructure\";\n      ssid = \"Home Wi-Fi\";\n    };\n    wifi-security = {\n      auth-alg = \"open\";\n      key-mgmt = \"wpa-psk\";\n      psk = \"$HOME_WIFI_PASSWORD\";\n    };\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "6kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.ensureProfiles.profiles.<name>.connection.id",
                "option_description": "<rendered-html><p>This is the name that will be displayed by NetworkManager and\nGUIs.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "60vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.ensureProfiles.profiles.<name>.connection.type",
                "option_description": "<rendered-html><p>The connection type defines the connection kind, like vpn, wireguard,\ngsm, wifi and more.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"vpn\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "7EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.ethernet.macAddress",
                "option_description": "<rendered-html><p>Set the MAC address of the interface.</p>\n<ul>\n<li><code>\"XX:XX:XX:XX:XX:XX\"</code>: MAC address of the interface</li>\n<li><code>\"permanent\"</code>: Use the permanent MAC address of the\ndevice</li>\n<li><code>\"preserve\"</code>: Don\u2019t change the MAC address of the device\nupon activation</li>\n<li><code>\"random\"</code>: Generate a randomized value upon each\nconnect</li>\n<li><code>\"stable\"</code>: Generate a stable, hashed MAC address</li>\n</ul>\n</rendered-html>",
                "option_type": "string or one of \"permanent\", \"preserve\", \"random\", \"stable\"",
                "option_default": "\"preserve\"",
                "option_example": "\"00:11:22:33:44:55\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "7UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.fccUnlockScripts",
                "option_description": "<rendered-html><p>List of FCC unlock scripts to enable on the system, behaving as\ndescribed in <a\nhref=\"https://modemmanager.org/docs/modemmanager/fcc-unlock/#integration-with-third-party-fcc-unlock-tools\">https://modemmanager.org/docs/modemmanager/fcc-unlock/#integration-with-third-party-fcc-unlock-tools</a>.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[{ id = \"03f0:4e1d\"; path = \"${pkgs.modemmanager}/share/ModemManager/fcc-unlock.available.d/03f0:4e1d\"; }]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "7kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.fccUnlockScripts.*.id",
                "option_description": "<rendered-html><p>vid:pid of either the PCI or USB vendor and product ID</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "70vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.fccUnlockScripts.*.path",
                "option_description": "<rendered-html><p>Path to the unlock script</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "8EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.insertNameservers",
                "option_description": "<rendered-html><p>A list of name servers that should be inserted before the ones\nconfigured in NetworkManager or received by DHCP.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "8UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.logLevel",
                "option_description": "<rendered-html><p>Set the default logging verbosity level.</p>\n</rendered-html>",
                "option_type": "one of \"OFF\", \"ERR\", \"WARN\", \"INFO\", \"DEBUG\", \"TRACE\"",
                "option_default": "\"WARN\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "8kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.plugins",
                "option_description": "<rendered-html><p>List of NetworkManager plug-ins to enable. Some plug-ins are enabled\nby the NetworkManager module by default.</p>\n</rendered-html>",
                "option_type": "list of NetworkManager plug-in",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "80vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.settings",
                "option_description": "<rendered-html><p>Configuration added to the generated NetworkManager.conf, note that\nyou can overwrite settings with this. Refer to <a\nhref=\"https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html\">\n<span>https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html</span>\n</a> or <code class=\"interpreted-text\"\nrole=\"manpage\">NetworkManager.conf(5)</code> for more information.</p>\n</rendered-html>",
                "option_type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "9EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.unmanaged",
                "option_description": "<rendered-html><p>List of interfaces that will not be managed by NetworkManager.\nInterface name can be specified here, but if you need more fidelity,\nrefer to <a\nhref=\"https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html#device-spec\">\n<span>https://developer.gnome.org/NetworkManager/stable/NetworkManager.conf.html#device-spec</span>\n</a> or the \u201cDevice List Format\u201d Appendix of <code\nclass=\"interpreted-text\"\nrole=\"manpage\">NetworkManager.conf(5)</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "9UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.wifi.backend",
                "option_description": "<rendered-html><p>Specify the Wi-Fi backend used for the device. Currently supported\nare <code class=\"interpreted-text\" role=\"option\">wpa_supplicant</code>\nor <code class=\"interpreted-text\" role=\"option\">iwd</code>\n(experimental).</p>\n</rendered-html>",
                "option_type": "one of \"wpa_supplicant\", \"iwd\"",
                "option_default": "\"wpa_supplicant\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "9kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.wifi.macAddress",
                "option_description": "<rendered-html><p>Set the MAC address of the interface.</p>\n<ul>\n<li><code>\"XX:XX:XX:XX:XX:XX\"</code>: MAC address of the interface</li>\n<li><code>\"permanent\"</code>: Use the permanent MAC address of the\ndevice</li>\n<li><code>\"preserve\"</code>: Don\u2019t change the MAC address of the device\nupon activation</li>\n<li><code>\"random\"</code>: Generate a randomized value upon each\nconnect</li>\n<li><code>\"stable\"</code>: Generate a stable, hashed MAC address</li>\n<li><code>\"stable-ssid\"</code>: Generate a stable MAC addressed based on\nWi-Fi network</li>\n</ul>\n</rendered-html>",
                "option_type": "string or one of \"permanent\", \"preserve\", \"random\", \"stable\", \"stable-ssid\"",
                "option_default": "\"preserve\"",
                "option_example": "\"00:11:22:33:44:55\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "90vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.wifi.powersave",
                "option_description": "<rendered-html><p>Whether to enable Wi-Fi power saving.</p>\n</rendered-html>",
                "option_type": "null or boolean",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "-EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/networkmanager.nix",
                "option_name": "networking.networkmanager.wifi.scanRandMacAddress",
                "option_description": "<rendered-html><p>Whether to enable MAC address randomization of a Wi-Fi device during\nscanning.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "-UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.checkRuleset",
                "option_description": "<rendered-html><p>Run <code>nft check</code> on the ruleset to spot syntax errors\nduring build. Because this is executed in a sandbox, the check might\nfail if it requires access to any environmental factors or paths outside\nthe Nix store. To circumvent this, the ruleset file can be edited using\nthe preCheckRuleset option to work in the sandbox environment.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "-kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.checkRulesetRedirects",
                "option_description": "<rendered-html><p>Set of paths that should be intercepted and rewritten while checking\nthe ruleset using <code>pkgs.buildPackages.libredirect</code>.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{\n  \"/etc/hosts\" = config.environment.etc.hosts.source;\n  \"/etc/protocols\" = config.environment.etc.protocols.source;\n  \"/etc/services\" = config.environment.etc.services.source;\n}\n",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "-0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.enable",
                "option_description": "<rendered-html><p>Whether to enable nftables and use nftables based firewall if\nenabled. nftables is a Linux-based packet filtering framework intended\nto replace frameworks like iptables.</p>\n<p>Note that if you have Docker enabled you will not be able to use\nnftables without intervention. Docker uses iptables internally to setup\nNAT for containers. This module disables the ip_tables kernel module,\nhowever Docker automatically loads the module. Please see <a\nhref=\"https://github.com/NixOS/nixpkgs/issues/24318#issuecomment-289216273\">https://github.com/NixOS/nixpkgs/issues/24318#issuecomment-289216273</a>\nfor more information.</p>\n<p>There are other programs that use iptables internally too, such as\nlibvirt. For information on how the two firewalls interact, see <a\nhref=\"https://wiki.nftables.org/wiki-nftables/index.php/Troubleshooting#Question_4._How_do_nftables_and_iptables_interact_when_used_on_the_same_system.3F\">https://wiki.nftables.org/wiki-nftables/index.php/Troubleshooting#Question_4._How_do_nftables_and_iptables_interact_when_used_on_the_same_system.3F</a>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "_EvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.extraDeletions",
                "option_description": "<rendered-html><p>Extra deletion commands to be run on every firewall start, reload and\nafter stopping the firewall.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  # this makes deleting a non-existing table a no-op instead of an error\n  table inet some-table;\n  \n  delete table inet some-table;\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "_UvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.flattenRulesetFile",
                "option_description": "<rendered-html><p>Use <code>builtins.readFile</code> rather than <code>include</code>\nto handle <code class=\"interpreted-text\"\nrole=\"option\">networking.nftables.rulesetFile</code>. It is useful when\nyou want to apply <code class=\"interpreted-text\"\nrole=\"option\">networking.nftables.preCheckRuleset</code> to <code\nclass=\"interpreted-text\"\nrole=\"option\">networking.nftables.rulesetFile</code>.</p>\n<div class=\"note\">\n<p>It is expected that <code class=\"interpreted-text\"\nrole=\"option\">networking.nftables.rulesetFile</code> can be accessed\nfrom the build sandbox.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "_kvRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.flushRuleset",
                "option_description": "<rendered-html><p>Whether to enable flushing the entire ruleset on each reload.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "_0vRtpABZu4t0s2IRInB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.preCheckRuleset",
                "option_description": "<rendered-html><p>This script gets run before the ruleset is checked. It can be used to\ncreate additional files needed for the ruleset check to work, or modify\nthe ruleset for cases the build environment cannot cover.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "sed 's/skgid meadow/skgid nogroup/g' -i ruleset.conf\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "AEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.ruleset",
                "option_description": "<rendered-html><p>The ruleset to be used with nftables. Should be in a format that can\nbe loaded using \u201c/bin/nft -f\u201d. The ruleset is updated atomically. Note\nthat if the tables should be cleaned first, either:</p>\n<ul>\n<li>networking.nftables.flushRuleset = true; needs to be set (flushes\nall tables)</li>\n<li>networking.nftables.extraDeletions needs to be set</li>\n<li>or networking.nftables.tables can be used, which will clean up the\ntable automatically</li>\n</ul>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  # Check out https://wiki.nftables.org/ for better documentation.\n  # Table for both IPv4 and IPv6.\n  table inet filter {\n    # Block all incoming connections traffic except SSH and \"ping\".\n    chain input {\n      type filter hook input priority 0;\n  \n      # accept any localhost traffic\n      iifname lo accept\n  \n      # accept traffic originated from us\n      ct state {established, related} accept\n  \n      # ICMP\n      # routers may also want: mld-listener-query, nd-router-solicit\n      ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept\n      ip protocol icmp icmp type { destination-unreachable, router-advertisement, time-exceeded, parameter-problem } accept\n  \n      # allow \"ping\"\n      ip6 nexthdr icmpv6 icmpv6 type echo-request accept\n      ip protocol icmp icmp type echo-request accept\n  \n      # accept SSH connections (required for a server)\n      tcp dport 22 accept\n  \n      # count and drop any other traffic\n      counter drop\n    }\n  \n    # Allow all outgoing connections.\n    chain output {\n      type filter hook output priority 0;\n      accept\n    }\n  \n    chain forward {\n      type filter hook forward priority 0;\n      accept\n    }\n  }\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "AUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.rulesetFile",
                "option_description": "<rendered-html><p>The ruleset file to be used with nftables. Should be in a format that\ncan be loaded using \u201cnft -f\u201d. The ruleset is updated atomically.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "AkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.tables",
                "option_description": "<rendered-html><p>Tables to be added to ruleset. Tables will be added together with\ndelete statements to clean up the table before every update.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  filter = {\n    content = ''\n      # Check out https://wiki.nftables.org/ for better documentation.\n      # Table for both IPv4 and IPv6.\n      # Block all incoming connections traffic except SSH and \"ping\".\n      chain input {\n        type filter hook input priority 0;\n      \n        # accept any localhost traffic\n        iifname lo accept\n      \n        # accept traffic originated from us\n        ct state {established, related} accept\n      \n        # ICMP\n        # routers may also want: mld-listener-query, nd-router-solicit\n        ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept\n        ip protocol icmp icmp type { destination-unreachable, router-advertisement, time-exceeded, parameter-problem } accept\n      \n        # allow \"ping\"\n        ip6 nexthdr icmpv6 icmpv6 type echo-request accept\n        ip protocol icmp icmp type echo-request accept\n      \n        # accept SSH connections (required for a server)\n        tcp dport 22 accept\n      \n        # count and drop any other traffic\n        counter drop\n      }\n      \n      # Allow all outgoing connections.\n      chain output {\n        type filter hook output priority 0;\n        accept\n      }\n      \n      chain forward {\n        type filter hook forward priority 0;\n        accept\n      }\n    '';\n    family = \"inet\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "A0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.tables.<name>.content",
                "option_description": "<rendered-html><p>The table content.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "BEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.tables.<name>.enable",
                "option_description": "<rendered-html><p>Enable this table.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "BUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.tables.<name>.family",
                "option_description": "<rendered-html><p>Table family.</p>\n</rendered-html>",
                "option_type": "one of \"ip\", \"ip6\", \"inet\", \"arp\", \"bridge\", \"netdev\"",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "BkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/nftables.nix",
                "option_name": "networking.nftables.tables.<name>.name",
                "option_description": "<rendered-html><p>Table name.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "B0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces",
                "option_description": "<rendered-html><p>OpenConnect interfaces.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  openconnect0 = {\n    gateway = \"gateway.example.com\";\n    passwordFile = \"/var/lib/secrets/openconnect-passwd\";\n    protocol = \"anyconnect\";\n    user = \"example-user\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "CEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.autoStart",
                "option_description": "<rendered-html><p>Whether this VPN connection should be started automatically.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "CUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.certificate",
                "option_description": "<rendered-html><p>Certificate to authenticate with.</p>\n</rendered-html>",
                "option_type": "null or path or PKCS#11 URI",
                "option_default": "null",
                "option_example": "\"/var/lib/secrets/openconnect_certificate.pem\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "CkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.extraOptions",
                "option_description": "<rendered-html><p>Extra config to be appended to the interface config. It should\ncontain long-format options as would be accepted on the command line by\n<code>openconnect</code> (see <a\nhref=\"https://www.infradead.org/openconnect/manual.html\">https://www.infradead.org/openconnect/manual.html</a>).\nNon-key-value options like <code>deflate</code> can be used by declaring\nthem as booleans, i. e. <code>deflate = true;</code>.</p>\n</rendered-html>",
                "option_type": "attribute set of (string or boolean)",
                "option_default": "{ }",
                "option_example": "{\n  compression = \"stateless\";\n  no-dtls = true;\n  no-http-keepalive = true;\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "C0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.gateway",
                "option_description": "<rendered-html><p>Gateway server to connect to.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"gateway.example.com\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "DEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.passwordFile",
                "option_description": "<rendered-html><p>File containing the password to authenticate with. This is passed to\n<code>openconnect</code> via the <code>--passwd-on-stdin</code>\noption.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "null",
                "option_example": "\"/var/lib/secrets/openconnect-passwd\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "DUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.privateKey",
                "option_description": "<rendered-html><p>Private key to authenticate with.</p>\n</rendered-html>",
                "option_type": "null or path or PKCS#11 URI",
                "option_default": "null",
                "option_example": "\"/var/lib/secrets/openconnect_private_key.pem\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "DkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.protocol",
                "option_description": "<rendered-html><p>Protocol to use.</p>\n</rendered-html>",
                "option_type": "one of \"anyconnect\", \"array\", \"nc\", \"pulse\", \"gp\", \"f5\", \"fortinet\"",
                "option_default": null,
                "option_example": "\"anyconnect\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "D0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.interfaces.<name>.user",
                "option_description": "<rendered-html><p>Username to authenticate with.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"example-user\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "EEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/openconnect.nix",
                "option_name": "networking.openconnect.package",
                "option_description": "<rendered-html><p>The openconnect package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.openconnect",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "EUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.allProxy",
                "option_description": "<rendered-html><p>This option specifies the all_proxy environment variable.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "config.networking.proxy.default",
                "option_example": "\"http://127.0.0.1:3128\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "EkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.default",
                "option_description": "<rendered-html><p>This option specifies the default value for httpProxy, httpsProxy,\nftpProxy and rsyncProxy.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"http://127.0.0.1:3128\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "E0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.ftpProxy",
                "option_description": "<rendered-html><p>This option specifies the ftp_proxy environment variable.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "config.networking.proxy.default",
                "option_example": "\"http://127.0.0.1:3128\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "FEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.httpProxy",
                "option_description": "<rendered-html><p>This option specifies the http_proxy environment variable.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "config.networking.proxy.default",
                "option_example": "\"http://127.0.0.1:3128\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "FUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.httpsProxy",
                "option_description": "<rendered-html><p>This option specifies the https_proxy environment variable.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "config.networking.proxy.default",
                "option_example": "\"http://127.0.0.1:3128\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "FkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.noProxy",
                "option_description": "<rendered-html><p>This option specifies the no_proxy environment variable. If a default\nproxy is used and noProxy is null, then noProxy will be set to\n127.0.0.1,localhost.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"127.0.0.1,localhost,.localdomain\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "F0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.proxy.rsyncProxy",
                "option_description": "<rendered-html><p>This option specifies the rsync_proxy environment variable.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "config.networking.proxy.default",
                "option_example": "\"http://127.0.0.1:3128\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "GEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.dnsExtensionMechanism",
                "option_description": "<rendered-html><p>Enable the <code>edns0</code> option in <code\nclass=\"interpreted-text\" role=\"file\">resolv.conf</code>. With that\noption set, <code>glibc</code> supports use of the extension mechanisms\nfor DNS (EDNS) specified in RFC 2671. The most popular user of that\nfeature is DNSSEC, which does not work without it.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "GUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.dnsSingleRequest",
                "option_description": "<rendered-html><p>Recent versions of glibc will issue both ipv4 (A) and ipv6 (AAAA)\naddress queries at the same time, from the same port. Sometimes upstream\nrouters will systemically drop the ipv4 queries. The symptom of this\nproblem is that \u2018getent hosts example.com\u2019 only returns ipv6 (or perhaps\nonly ipv4) addresses. The workaround for this is to specify the option\n\u2018single-request\u2019 in /etc/resolv.conf. This option enables that.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "GkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.enable",
                "option_description": "<rendered-html><p>Whether DNS configuration is managed by resolvconf.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "!(config.environment.etc ? \"resolv.conf\")",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "G0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.extraConfig",
                "option_description": "<rendered-html><p>Extra configuration to append to <code class=\"interpreted-text\"\nrole=\"file\">resolvconf.conf</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "\"libc=NO\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "HEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.extraOptions",
                "option_description": "<rendered-html><p>Set the options in <code class=\"interpreted-text\"\nrole=\"file\">/etc/resolv.conf</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"ndots:1\"\n  \"rotate\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "HUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.package",
                "option_description": "<rendered-html><p>The package that provides the system-wide resolvconf command.\nDefaults to <code>openresolv</code> if this module is enabled.\nOtherwise, can be used by other modules (for example <code\nclass=\"interpreted-text\" role=\"option\">services.resolved</code>) to\nprovide a compatibility layer.</p>\n<p>This option generally shouldn\u2019t be set by the user.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.openresolv",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "HkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/resolvconf.nix",
                "option_name": "networking.resolvconf.useLocalResolver",
                "option_description": "<rendered-html><p>Use local DNS server for resolving.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "H0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/rxe.nix",
                "option_name": "networking.rxe.enable",
                "option_description": "<rendered-html><p>Whether to enable RDMA over converged ethernet.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "IEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/rxe.nix",
                "option_name": "networking.rxe.interfaces",
                "option_description": "<rendered-html><p>Enable RDMA on the listed interfaces. The corresponding virtual RDMA\ninterfaces will be named rxe_&lt;interface&gt;. UDP port 4791 must be\nopen on the respective ethernet interfaces.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"eth0\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "IUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.search",
                "option_description": "<rendered-html><p>The list of search paths used when resolving domain names.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"example.com\"\n  \"home.arpa\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "IkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits",
                "option_description": "<rendered-html><p>This option allows you to define 6-to-4 interfaces which should be\nautomatically created.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  hurricane = {\n    remote = \"10.0.0.1\";\n    local = \"10.0.0.22\";\n    ttl = 255;\n  };\n  msipv6 = {\n    remote = \"192.168.0.1\";\n    dev = \"enp3s0\";\n    ttl = 127;\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "I0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.dev",
                "option_description": "<rendered-html><p>The underlying network device on which the tunnel resides.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"enp4s0f0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "JEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.encapsulation",
                "option_description": "<rendered-html><p>Configures encapsulation in UDP packets.</p>\n</rendered-html>",
                "option_type": "null or (submodule)",
                "option_default": "null",
                "option_example": "{\n  port = 9001;\n  type = \"fou\";\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "JUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.encapsulation.port",
                "option_description": "<rendered-html><p>Destination port for encapsulated packets.</p>\n</rendered-html>",
                "option_type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": null,
                "option_example": "9001",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "JkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.encapsulation.sourcePort",
                "option_description": "<rendered-html><p>Source port for encapsulated packets. Will be chosen automatically by\nthe kernel if unset.</p>\n</rendered-html>",
                "option_type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "null",
                "option_example": "9002",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "J0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.encapsulation.type",
                "option_description": "<rendered-html><p>Selects encapsulation type. See <code class=\"interpreted-text\"\nrole=\"manpage\">ip-link(8)</code> for details.</p>\n</rendered-html>",
                "option_type": "one of \"fou\", \"gue\"",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "KEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.local",
                "option_description": "<rendered-html><p>The address of the local endpoint which the remote side should send\npackets to.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"10.0.0.22\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "KUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.remote",
                "option_description": "<rendered-html><p>The address of the remote endpoint to forward traffic over.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"10.0.0.1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "KkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.sits.<name>.ttl",
                "option_description": "<rendered-html><p>The time-to-live of the connection to the remote tunnel endpoint.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "255",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "K0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/stevenblack.nix",
                "option_name": "networking.stevenblack.block",
                "option_description": "<rendered-html><p>Additional blocklist extensions.</p>\n</rendered-html>",
                "option_type": "list of (one of \"fakenews\", \"gambling\", \"porn\", \"social\")",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "LEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/stevenblack.nix",
                "option_name": "networking.stevenblack.enable",
                "option_description": "<rendered-html><p>Whether to enable the stevenblack hosts file blocklist.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "LUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/stevenblack.nix",
                "option_name": "networking.stevenblack.package",
                "option_description": "<rendered-html><p>The stevenblack-blocklist package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.stevenblack-blocklist",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "LkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant",
                "option_description": "<rendered-html><p>Interfaces for which to start <code class=\"interpreted-text\"\nrole=\"command\">wpa_supplicant</code>. The supplicant is used to scan for\nand associate with wireless networks, or to authenticate with 802.1x\ncapable network switches.</p>\n<p>The value of this option is an attribute set. Each attribute\nconfigures a <code class=\"interpreted-text\"\nrole=\"command\">wpa_supplicant</code> service, where the attribute name\nspecifies the name of the interface that <code class=\"interpreted-text\"\nrole=\"command\">wpa_supplicant</code> operates on. The attribute name can\nbe a space separated list of interfaces. The attribute names\n<code>WLAN</code>, <code>LAN</code> and <code>DBUS</code> have a special\nmeaning. <code>WLAN</code> and <code>LAN</code> are configurations for\nuniversal <code class=\"interpreted-text\"\nrole=\"command\">wpa_supplicant</code> service that is started for each\nWLAN interface or for each LAN interface, respectively.\n<code>DBUS</code> defines a device-unrelated <code\nclass=\"interpreted-text\" role=\"command\">wpa_supplicant</code> service\nthat can be accessed through <code>D-Bus</code>.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{ \"wlan0 wlan1\" = {\n    configFile.path = \"/etc/wpa_supplicant.conf\";\n    userControlled.group = \"network\";\n    extraConf = ''\n      ap_scan=1\n      p2p_disabled=1\n    '';\n    extraCmdArgs = \"-u -W\";\n    bridge = \"br0\";\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "L0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.bridge",
                "option_description": "<rendered-html><p>Name of the bridge interface that wpa_supplicant should listen\nat.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "MEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.configFile.path",
                "option_description": "<rendered-html><p>External <code>wpa_supplicant.conf</code> configuration file. The\nconfiguration options defined declaratively within\n<code>networking.supplicant</code> have precedence over options defined\nin <code>configFile</code>.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "null",
                "option_example": "/etc/wpa_supplicant.conf",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "MUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.configFile.writable",
                "option_description": "<rendered-html><p>Whether the configuration file at <code>configFile.path</code> should\nbe written to by <code>wpa_supplicant</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "MkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.driver",
                "option_description": "<rendered-html><p>Force a specific wpa_supplicant driver.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "\"nl80211,wext\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "M0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.extraCmdArgs",
                "option_description": "<rendered-html><p>Command line arguments to add when executing\n<code>wpa_supplicant</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "\"-e/run/wpa_supplicant/entropy.bin\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "NEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.extraConf",
                "option_description": "<rendered-html><p>Configuration options for <code>wpa_supplicant.conf</code>. Options\ndefined here have precedence over options in <code>configFile</code>.\nNOTE: Do not write sensitive data into <code>extraConf</code> as it will\nbe world-readable in the <code>nix-store</code>. For sensitive\ninformation use the <code>configFile</code> instead.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  ap_scan=1\n  device_name=My-NixOS-Device\n  device_type=1-0050F204-1\n  driver_param=use_p2p_group_interface=1\n  disable_scan_offload=1\n  p2p_listen_reg_class=81\n  p2p_listen_channel=1\n  p2p_oper_reg_class=81\n  p2p_oper_channel=1\n  manufacturer=NixOS\n  model_name=NixOS_Unstable\n  model_number=2015\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "NUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.userControlled.enable",
                "option_description": "<rendered-html><p>Allow normal users to control wpa_supplicant through wpa_gui or\nwpa_cli. This is useful for laptop users that switch networks a lot and\ndon\u2019t want to depend on a large package such as NetworkManager just to\npick nearby access points.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "NkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.userControlled.group",
                "option_description": "<rendered-html><p>Members of this group can control wpa_supplicant.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"wheel\"",
                "option_example": "\"network\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "N0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/supplicant.nix",
                "option_name": "networking.supplicant.<name>.userControlled.socketDir",
                "option_description": "<rendered-html><p>Directory of sockets for controlling wpa_supplicant.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"/run/wpa_supplicant\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "OEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/tcpcrypt.nix",
                "option_name": "networking.tcpcrypt.enable",
                "option_description": "<rendered-html><p>Whether to enable opportunistic TCP encryption. If the other end\nspeaks Tcpcrypt, then your traffic will be encrypted; otherwise it will\nbe sent in clear text. Thus, Tcpcrypt alone provides no guarantees \u2013 it\nis best effort. If, however, a Tcpcrypt connection is successful and any\nattackers that exist are passive, then Tcpcrypt guarantees privacy.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "OUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.tempAddresses",
                "option_description": "<rendered-html><p>Whether to enable IPv6 Privacy Extensions for interfaces not\nconfigured explicitly in <a\nhref=\"https://search.nixos.org/options?channel=unstable&amp;show=networking.interfaces.&lt;name&gt;.tempAddress&amp;query=networking.interfaces.&lt;name&gt;.tempAddress\">networking.interfaces.&lt;name&gt;.tempAddress</a>.</p>\n<p>This sets the ipv6.conf.*.use_tempaddr sysctl for all interfaces.\nPossible values are:</p>\n<ul>\n<li><code>\"default\"</code> to generate IPv6 temporary addresses and use\nthese as source addresses in routing;</li>\n<li><code>\"disabled\"</code> to completely disable IPv6 temporary\naddresses;</li>\n<li><code>\"enabled\"</code> to generate IPv6 temporary addresses but\nstill use EUI-64 addresses as source addresses;</li>\n</ul>\n</rendered-html>",
                "option_type": "one of \"default\", \"disabled\", \"enabled\"",
                "option_default": "if ${config.networking.enableIPv6} then \"default\" else \"disabled\"\n",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "OkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/config/networking.nix",
                "option_name": "networking.timeServers",
                "option_description": "<rendered-html><p>The set of NTP servers from which to synchronise.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"0.nixos.pool.ntp.org\"\n  \"1.nixos.pool.ntp.org\"\n  \"2.nixos.pool.ntp.org\"\n  \"3.nixos.pool.ntp.org\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "O0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.addr",
                "option_description": "<rendered-html><p>Virtual shared IP address.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "PEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.advBase",
                "option_description": "<rendered-html><p>Advertisement frequency in seconds.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": "1",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "PUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.advSkew",
                "option_description": "<rendered-html><p>Advertisement skew in seconds.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": "0",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "PkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.deadratio",
                "option_description": "<rendered-html><p>Ratio to consider a host as dead.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": "3",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "P0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.downscript",
                "option_description": "<rendered-html><p>Command to run after become backup, the interface name, virtual\naddress and optional extra parameters are passed as arguments.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": "pkgs.writeScript \"downscript\" ''\n  #!/bin/sh\n  ${pkgs.iproute2}/bin/ip addr del \"$2\"/24 dev \"$1\"\n'';\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "QEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.enable",
                "option_description": "<rendered-html><p>Whether to enable ucarp, userspace implementation of CARP.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "QUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.extraParam",
                "option_description": "<rendered-html><p>Extra parameter to pass to the up/down scripts.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "QkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.ignoreIfState",
                "option_description": "<rendered-html><p>Ignore interface state, e.g., down or no carrier.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "Q0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.interface",
                "option_description": "<rendered-html><p>Network interface to bind to.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"eth0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "REvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.neutral",
                "option_description": "<rendered-html><p>Do not run downscript at start if the host is the backup.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "RUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.noMcast",
                "option_description": "<rendered-html><p>Use broadcast instead of multicast advertisements.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "RkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.package",
                "option_description": "<rendered-html><p>The ucarp package to use. Please note that the default package,\npkgs.ucarp, has not received any upstream updates for a long time and\ncan be considered as unmaintained.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.ucarp",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "R0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.passwordFile",
                "option_description": "<rendered-html><p>File containing shared password between CARP hosts.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"/run/keys/ucarp-password\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "SEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.preempt",
                "option_description": "<rendered-html><p>Enable preemptive failover. Thus, this host becomes the CARP master\nas soon as possible.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "SUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.shutdown",
                "option_description": "<rendered-html><p>Call downscript at exit.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "SkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.srcIp",
                "option_description": "<rendered-html><p>Source (real) IP address of this host.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "S0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.upscript",
                "option_description": "<rendered-html><p>Command to run after become master, the interface name, virtual\naddress and optional extra parameters are passed as arguments.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": "pkgs.writeScript \"upscript\" ''\n  #!/bin/sh\n  ${pkgs.iproute2}/bin/ip addr add \"$2\"/24 dev \"$1\"\n'';\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "TEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/ucarp.nix",
                "option_name": "networking.ucarp.vhId",
                "option_description": "<rendered-html><p>Virtual IP identifier shared between CARP hosts.</p>\n</rendered-html>",
                "option_type": "integer between 1 and 255 (both inclusive)",
                "option_default": null,
                "option_example": "1",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "TUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.useDHCP",
                "option_description": "<rendered-html><p>Whether to use DHCP to obtain an IP address and other configuration\nfor all network interfaces that do not have any manually configured IPv4\naddresses.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "TkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.useHostResolvConf",
                "option_description": "<rendered-html><p>In containers, whether to use the <code class=\"interpreted-text\"\nrole=\"file\">resolv.conf</code> supplied by the host.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "T0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.useNetworkd",
                "option_description": "<rendered-html><p>Whether we should use networkd as the network configuration backend\nor the legacy script based system. Note that this option is\nexperimental, enable at your own risk.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "UEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/hardware/udev.nix",
                "option_name": "networking.usePredictableInterfaceNames",
                "option_description": "<rendered-html><p>Whether to assign <a\nhref=\"https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/\">predictable\nnames to network interfaces</a>. If enabled, interfaces are assigned\nnames that contain topology information (e.g. <code>wlp3s0</code>) and\nthus should be stable across reboots. If disabled, names depend on the\norder in which interfaces are discovered by the kernel, which may change\nrandomly across reboots; for instance, you may find <code>eth0</code>\nand <code>eth1</code> flipping unpredictably.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "UUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vlans",
                "option_description": "<rendered-html><p>This option allows you to define vlan devices that tag packets on top\nof a physical interface. The value of this option is an attribute set.\nEach attribute specifies a vlan, with the name specifying the name of\nthe vlan interface.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  vlan0 = {\n    id = 3;\n    interface = \"enp3s0\";\n  };\n  vlan1 = {\n    id = 1;\n    interface = \"wlan0\";\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "UkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vlans.<name>.id",
                "option_description": "<rendered-html><p>The vlan identifier</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": null,
                "option_example": "1",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "U0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vlans.<name>.interface",
                "option_description": "<rendered-html><p>The interface the vlan will transmit packets through.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"enp4s0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "VEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches",
                "option_description": "<rendered-html><p>This option allows you to define Open vSwitches that connect physical\nnetworks together. The value of this option is an attribute set. Each\nattribute specifies a vswitch, with the attribute name specifying the\nname of the vswitch\u2019s network interface.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  vs0 = {\n    interfaces = {\n      eth0 = { };\n      lo1 = {\n        type = \"internal\";\n      };\n    };\n  };\n  vs1 = {\n    interfaces = [\n      {\n        name = \"eth2\";\n      }\n      {\n        name = \"lo2\";\n        type = \"internal\";\n      }\n    ];\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "VUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.controllers",
                "option_description": "<rendered-html><p>Specify the controller targets. For the allowed options see\n<code>man 8 ovs-vsctl</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"ptcp:6653:[::1]\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "VkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.extraOvsctlCmds",
                "option_description": "<rendered-html><p>Commands to manipulate the Open vSwitch database. Every line executed\nwith <code>ovs-vsctl</code>. All commands are bundled together with the\noperations for adding the interfaces into one atomic operation.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  set-fail-mode <switch_name> secure\n  set Bridge <switch_name> stp_enable=true\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "V0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.interfaces",
                "option_description": "<rendered-html><p>The physical network interfaces connected by the vSwitch.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "WEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.interfaces.<name>.name",
                "option_description": "<rendered-html><p>Name of the interface</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"eth0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "WUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.interfaces.<name>.type",
                "option_description": "<rendered-html><p>Openvswitch type to assign to interface</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"internal\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "WkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.interfaces.<name>.vlan",
                "option_description": "<rendered-html><p>Vlan tag to apply to interface</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "10",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "W0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.openFlowRules",
                "option_description": "<rendered-html><p>OpenFlow rules to insert into the Open vSwitch. All\n<code>openFlowRules</code> are loaded with <code>ovs-ofctl</code> within\none atomic operation.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  actions=normal\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "XEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.openFlowVersion",
                "option_description": "<rendered-html><p>Version of OpenFlow protocol to use when communicating with the\nswitch internally (e.g. with <code>openFlowRules</code>).</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"OpenFlow13\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "XUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.vswitches.<name>.supportedOpenFlowVersions",
                "option_description": "<rendered-html><p>Supported versions to enable on this switch.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"OpenFlow13\"\n]",
                "option_example": "[\n  \"OpenFlow10\"\n  \"OpenFlow13\"\n  \"OpenFlow14\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "XkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces",
                "option_description": "<rendered-html><p>Wireguard interfaces.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  wg0 = {\n    address = [\n      \"192.168.20.4/24\"\n    ];\n    peers = [\n      {\n        allowedIPs = [\n          \"192.168.20.1/32\"\n        ];\n        endpoint = \"demo.wireguard.io:12913\";\n        publicKey = \"xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=\";\n      }\n    ];\n    privateKey = \"yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "X0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.address",
                "option_description": "<rendered-html><p>The IP addresses of the interface.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"192.168.2.1/24\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "YEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.autostart",
                "option_description": "<rendered-html><p>Whether to bring up this interface automatically during boot.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "false",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "YUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.configFile",
                "option_description": "<rendered-html><p>wg-quick .conf file, describing the interface. Using this option can\nbe a useful means of configuring WireGuard if one has an existing .conf\nfile. This overrides any other configuration interface configuration\noptions. See wg-quick manpage for more details.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/secret/wg0.conf\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "YkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.dns",
                "option_description": "<rendered-html><p>The IP addresses of DNS servers to configure.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"192.168.2.2\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "Y0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.listenPort",
                "option_description": "<rendered-html><p>16-bit port for listening. Optional; if not specified, automatically\ngenerated based on interface name.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "51820",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ZEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.mtu",
                "option_description": "<rendered-html><p>If not specified, the MTU is automatically determined from the\nendpoint addresses or the system default route, which is usually a sane\nchoice. However, to manually specify an MTU to override this automatic\ndiscovery, this value may be specified explicitly.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "1248",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ZUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers",
                "option_description": "<rendered-html><p>Peers linked to the interface.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ZkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers.*.allowedIPs",
                "option_description": "<rendered-html><p>List of IP (v4 or v6) addresses with CIDR masks from which this peer\nis allowed to send incoming traffic and to which outgoing traffic for\nthis peer is directed. The catch-all 0.0.0.0/0 may be specified for\nmatching all IPv4 addresses, and ::/0 may be specified for matching all\nIPv6 addresses.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": null,
                "option_example": "[\n  \"10.192.122.3/32\"\n  \"10.192.124.1/24\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "Z0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers.*.endpoint",
                "option_description": "<rendered-html><p>Endpoint IP or hostname of the peer, followed by a colon, and then a\nport number of the peer.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"demo.wireguard.io:12913\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "aEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers.*.persistentKeepalive",
                "option_description": "<rendered-html><p>This is optional and is by default off, because most users will not\nneed it. It represents, in seconds, between 1 and 65535 inclusive, how\noften to send an authenticated empty packet to the peer, for the purpose\nof keeping a stateful firewall or NAT mapping valid persistently. For\nexample, if the interface very rarely sends traffic, but it might at\nanytime receive traffic from a peer, and it is behind NAT, the interface\nmight benefit from having a persistent keepalive interval of 25 seconds;\nhowever, most users will not need this.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "25",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "aUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers.*.presharedKey",
                "option_description": "<rendered-html><p>Base64 preshared key generated by <code class=\"interpreted-text\"\nrole=\"command\">wg genpsk</code>. Optional, and may be omitted. This\noption adds an additional layer of symmetric-key cryptography to be\nmixed into the already existing public-key cryptography, for\npost-quantum resistance.</p>\n<p>Warning: Consider using presharedKeyFile instead if you do not want\nto store the key in the world-readable Nix store.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"rVXs/Ni9tu3oDBLS4hOyAUAa1qTWVA3loR8eL20os3I=\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "akvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers.*.presharedKeyFile",
                "option_description": "<rendered-html><p>File pointing to preshared key as generated by <code\nclass=\"interpreted-text\" role=\"command\">wg genpsk</code>. Optional, and\nmay be omitted. This option adds an additional layer of symmetric-key\ncryptography to be mixed into the already existing public-key\ncryptography, for post-quantum resistance.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/private/wireguard_psk\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "a0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.peers.*.publicKey",
                "option_description": "<rendered-html><p>The base64 public key to the peer.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "bEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.postDown",
                "option_description": "<rendered-html><p>Command called after the interface is taken down.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.iproute2}/bin/ip netns del foo\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "bUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.postUp",
                "option_description": "<rendered-html><p>Commands called after the interface setup.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.iproute2}/bin/ip netns add foo\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "bkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.preDown",
                "option_description": "<rendered-html><p>Command called before the interface is taken down.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.iproute2}/bin/ip netns del foo\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "b0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.preUp",
                "option_description": "<rendered-html><p>Commands called at the start of the interface setup.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.iproute2}/bin/ip netns add foo\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "cEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.privateKey",
                "option_description": "<rendered-html><p>Base64 private key generated by <code class=\"interpreted-text\"\nrole=\"command\">wg genkey</code>.</p>\n<p>Warning: Consider using privateKeyFile instead if you do not want to\nstore the key in the world-readable Nix store.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "cUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.privateKeyFile",
                "option_description": "<rendered-html><p>Private key file as generated by <code class=\"interpreted-text\"\nrole=\"command\">wg genkey</code>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/private/wireguard_key\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ckvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wg-quick.nix",
                "option_name": "networking.wg-quick.interfaces.<name>.table",
                "option_description": "<rendered-html><p>The kernel routing table to add this interface\u2019s associated routes\nto. Setting this is useful for e.g. policy routing (\u201cip rule\u201d) or\nvirtual routing and forwarding (\u201cip vrf\u201d). Both numeric table IDs and\ntable names (/etc/rt_tables) can be used. Defaults to \u201cmain\u201d.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"main\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "c0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.enable",
                "option_description": "<rendered-html><p>Whether to enable WireGuard.</p>\n<p>Please note that <code class=\"interpreted-text\"\nrole=\"option\">systemd.network.netdevs</code> has more features and is\nbetter maintained. When building new things, it is advised to use that\ninstead.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "config.networking.wireguard.interfaces != { }",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "dEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces",
                "option_description": "<rendered-html><p>WireGuard interfaces.</p>\n<p>Please note that <code class=\"interpreted-text\"\nrole=\"option\">systemd.network.netdevs</code> has more features and is\nbetter maintained. When building new things, it is advised to use that\ninstead.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  wg0 = {\n    ips = [\n      \"192.168.20.4/24\"\n    ];\n    peers = [\n      {\n        allowedIPs = [\n          \"192.168.20.1/32\"\n        ];\n        endpoint = \"demo.wireguard.io:12913\";\n        publicKey = \"xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=\";\n      }\n    ];\n    privateKey = \"yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "dUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.allowedIPsAsRoutes",
                "option_description": "<rendered-html><p>Determines whether to add allowed IPs as routes or not.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": "false",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "dkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.fwMark",
                "option_description": "<rendered-html><p>Mark all wireguard packets originating from this interface with the\ngiven firewall mark. The firewall mark can be used in firewalls or\npolicy routing to filter the wireguard packets. This can be useful for\nsetup where all traffic goes through the wireguard tunnel, because the\nwireguard packets need to be routed differently.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"0x6e6978\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "d0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.generatePrivateKeyFile",
                "option_description": "<rendered-html><p>Automatically generate a private key with <code\nclass=\"interpreted-text\" role=\"command\">wg genkey</code>, at the\nprivateKeyFile location.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "eEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.interfaceNamespace",
                "option_description": "<rendered-html><p>The pre-existing network namespace the WireGuard interface is moved\nto. The special value <code>init</code> means the init namespace. When\n<code>null</code>, the interface is not moved. See <a\nhref=\"https://www.wireguard.com/netns/\">documentation</a>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"init\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "eUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.ips",
                "option_description": "<rendered-html><p>The IP addresses of the interface.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"192.168.2.1/24\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ekvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.listenPort",
                "option_description": "<rendered-html><p>16-bit port for listening. Optional; if not specified, automatically\ngenerated based on interface name.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "51820",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "e0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.metric",
                "option_description": "<rendered-html><p>Set the metric of routes related to this Wireguard interface.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "700",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "fEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.mtu",
                "option_description": "<rendered-html><p>Set the maximum transmission unit in bytes for the wireguard\ninterface. Beware that the wireguard packets have a header that may add\nup to 80 bytes to the mtu. By default, the MTU is (1500 - 80) = 1420.\nHowever, if the MTU of the upstream network is lower, the MTU of the\nwireguard network has to be adjusted as well.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "1280",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "fUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers",
                "option_description": "<rendered-html><p>Peers linked to the interface.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "fkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.allowedIPs",
                "option_description": "<rendered-html><p>List of IP (v4 or v6) addresses with CIDR masks from which this peer\nis allowed to send incoming traffic and to which outgoing traffic for\nthis peer is directed. The catch-all 0.0.0.0/0 may be specified for\nmatching all IPv4 addresses, and ::/0 may be specified for matching all\nIPv6 addresses.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": null,
                "option_example": "[\n  \"10.192.122.3/32\"\n  \"10.192.124.1/24\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "f0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.dynamicEndpointRefreshRestartSeconds",
                "option_description": "<rendered-html><p>When the dynamic endpoint refresh that is configured via\ndynamicEndpointRefreshSeconds exits (likely due to a failure), restart\nthat service after this many seconds.</p>\n<p>If set to <code>null</code> the value of <code\nclass=\"interpreted-text\"\nrole=\"option\">networking.wireguard.dynamicEndpointRefreshSeconds</code>\nwill be used as the default.</p>\n</rendered-html>",
                "option_type": "null or (unsigned integer, meaning >=0)",
                "option_default": "null",
                "option_example": "5",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "gEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.dynamicEndpointRefreshSeconds",
                "option_description": "<rendered-html><p>Periodically re-execute the <code>wg</code> utility every this many\nseconds in order to let WireGuard notice DNS / hostname changes.</p>\n<p>Setting this to <code>0</code> disables periodic reexecution.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "0",
                "option_example": "5",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "gUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.endpoint",
                "option_description": "<rendered-html><p>Endpoint IP or hostname of the peer, followed by a colon, and then a\nport number of the peer.</p>\n<p>Warning for endpoints with changing IPs: The WireGuard kernel side\ncannot perform DNS resolution. Thus DNS resolution is done once by the\n<code>wg</code> userspace utility, when setting up WireGuard.\nConsequently, if the IP address behind the name changes, WireGuard will\nnot notice. This is especially common for dynamic-DNS setups, but also\napplies to any other DNS-based setup. If you do not use IP endpoints,\nyou likely want to set <code class=\"interpreted-text\"\nrole=\"option\">networking.wireguard.dynamicEndpointRefreshSeconds</code>\nto refresh the IPs periodically.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"demo.wireguard.io:12913\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "gkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.name",
                "option_description": "<rendered-html><p>Name used to derive peer unit name.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "publicKey",
                "option_example": "\"bernd\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "g0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.persistentKeepalive",
                "option_description": "<rendered-html><p>This is optional and is by default off, because most users will not\nneed it. It represents, in seconds, between 1 and 65535 inclusive, how\noften to send an authenticated empty packet to the peer, for the purpose\nof keeping a stateful firewall or NAT mapping valid persistently. For\nexample, if the interface very rarely sends traffic, but it might at\nanytime receive traffic from a peer, and it is behind NAT, the interface\nmight benefit from having a persistent keepalive interval of 25 seconds;\nhowever, most users will not need this.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": "25",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "hEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.presharedKey",
                "option_description": "<rendered-html><p>Base64 preshared key generated by <code class=\"interpreted-text\"\nrole=\"command\">wg genpsk</code>. Optional, and may be omitted. This\noption adds an additional layer of symmetric-key cryptography to be\nmixed into the already existing public-key cryptography, for\npost-quantum resistance.</p>\n<p>Warning: Consider using presharedKeyFile instead if you do not want\nto store the key in the world-readable Nix store.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"rVXs/Ni9tu3oDBLS4hOyAUAa1qTWVA3loR8eL20os3I=\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "hUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.presharedKeyFile",
                "option_description": "<rendered-html><p>File pointing to preshared key as generated by <code\nclass=\"interpreted-text\" role=\"command\">wg genpsk</code>. Optional, and\nmay be omitted. This option adds an additional layer of symmetric-key\ncryptography to be mixed into the already existing public-key\ncryptography, for post-quantum resistance.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/private/wireguard_psk\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "hkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.peers.*.publicKey",
                "option_description": "<rendered-html><p>The base64 public key of the peer.</p>\n</rendered-html>",
                "option_type": "(optionally newline-terminated) single-line string",
                "option_default": null,
                "option_example": "\"xTIBA5rboUvnH4htodjb6e697QjLERt1NAB4mZqp8Dg=\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "h0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.postSetup",
                "option_description": "<rendered-html><p>Commands called at the end of the interface setup.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "''printf \"nameserver 10.200.100.1\" | ${pkgs.openresolv}/bin/resolvconf -a wg0 -m 0''\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "iEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.postShutdown",
                "option_description": "<rendered-html><p>Commands called after shutting down the interface.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.openresolv}/bin/resolvconf -d wg0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "iUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.preSetup",
                "option_description": "<rendered-html><p>Commands called at the start of the interface setup.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.iproute2}/bin/ip netns add foo\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "ikvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.preShutdown",
                "option_description": "<rendered-html><p>Commands called before shutting down the interface.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\" or (list of string) convertible to it",
                "option_default": "\"\"",
                "option_example": "\"${pkgs.iproute2}/bin/ip netns del foo\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "i0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.privateKey",
                "option_description": "<rendered-html><p>Base64 private key generated by <code class=\"interpreted-text\"\nrole=\"command\">wg genkey</code>.</p>\n<p>Warning: Consider using privateKeyFile instead if you do not want to\nstore the key in the world-readable Nix store.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"yAnz5TF+lXXJte14tji3zlMNq+hd2rYUIgJBgB3fBmk=\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "jEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.privateKeyFile",
                "option_description": "<rendered-html><p>Private key file as generated by <code class=\"interpreted-text\"\nrole=\"command\">wg genkey</code>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/private/wireguard_key\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "jUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.socketNamespace",
                "option_description": "<rendered-html><p>The pre-existing network namespace in which the WireGuard interface\nis created, and which retains the socket even if the interface is moved\nvia <code class=\"interpreted-text\"\nrole=\"option\">interfaceNamespace</code>. When <code>null</code>, the\ninterface is created in the init namespace. See <a\nhref=\"https://www.wireguard.com/netns/\">documentation</a>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"container\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "jkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wireguard.nix",
                "option_name": "networking.wireguard.interfaces.<name>.table",
                "option_description": "<rendered-html><p>The kernel routing table to add this interface\u2019s associated routes\nto. Setting this is useful for e.g. policy routing (\u201cip rule\u201d) or\nvirtual routing and forwarding (\u201cip vrf\u201d). Both numeric table IDs and\ntable names (/etc/rt_tables) can be used. Defaults to \u201cmain\u201d.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"main\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "j0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.allowAuxiliaryImperativeNetworks",
                "option_description": "<rendered-html><p>Whether to allow configuring networks \u201cimperatively\u201d (e.g. via\n<code>wpa_supplicant_gui</code>) and declaratively via <a\nhref=\"https://search.nixos.org/options?channel=unstable&amp;show=networking.wireless.networks&amp;query=networking.wireless.networks\">networking.wireless.networks</a>.</p>\n<p>Please note that this adds a custom patch to\n<code>wpa_supplicant</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "kEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/hardware/network/ath-user-regd.nix",
                "option_name": "networking.wireless.athUserRegulatoryDomain",
                "option_description": "<rendered-html><p>If enabled, sets the ATH_USER_REGD kernel config switch to true to\ndisable the enforcement of EEPROM regulatory restrictions for ath\ndrivers. Requires at least Linux 5.8.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "kUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.dbusControlled",
                "option_description": "<rendered-html><p>Whether to enable the DBus control interface. This is only needed\nwhen using NetworkManager or connman.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "length config.networking.wireless.interfaces < 2",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "kkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.driver",
                "option_description": "<rendered-html><p>Force a specific wpa_supplicant driver.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"nl80211,wext\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "k0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.enable",
                "option_description": "<rendered-html><p>Whether to enable wpa_supplicant.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "lEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.environmentFile",
                "option_description": "<rendered-html><p>File consisting of lines of the form <code>varname=value</code> to\ndefine variables for the wireless configuration.</p>\n<p>See section \u201cEnvironmentFile=\u201d in <a\nhref=\"https://www.freedesktop.org/software/systemd/man/systemd.exec.html\"><code\nclass=\"interpreted-text\" role=\"manpage\">systemd.exec(5)</code></a> for a\nsyntax reference.</p>\n<p>Secrets (PSKs, passwords, etc.) can be provided without adding them\nto the world-readable Nix store by defining them in the environment file\nand referring to them in option <code class=\"interpreted-text\"\nrole=\"option\">networking.wireless.networks</code> with the syntax\n<code>@varname@</code>. Example:</p>\n<pre><code># content of /run/secrets/wireless.env\nPSK_HOME=mypassword\nPASS_WORK=myworkpassword</code></pre>\n<pre><code># wireless-related configuration\nnetworking.wireless.environmentFile = &quot;/run/secrets/wireless.env&quot;;\nnetworking.wireless.networks = {\n  home.psk = &quot;@PSK_HOME@&quot;;\n  work.auth = &#39;&#39;\n    eap=PEAP\n    identity=&quot;my-user@example.com&quot;\n    password=&quot;@PASS_WORK@&quot;\n  &#39;&#39;;\n};</code></pre>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "null",
                "option_example": "\"/run/secrets/wireless.env\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "lUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.extraConfig",
                "option_description": "<rendered-html><p>Extra lines appended to the configuration file. See <code\nclass=\"interpreted-text\" role=\"manpage\">wpa_supplicant.conf(5)</code>\nfor available options.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "''\n  p2p_disabled=1\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "lkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.fallbackToWPA2",
                "option_description": "<rendered-html><p>Whether to fall back to WPA2 authentication protocols if WPA3 failed.\nThis allows old wireless cards (that lack recent features required by\nWPA3) to connect to mixed WPA2/WPA3 access points.</p>\n<p>To avoid possible downgrade attacks, disable this options.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "l0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.interfaces",
                "option_description": "<rendered-html><p>The interfaces <code class=\"interpreted-text\"\nrole=\"command\">wpa_supplicant</code> will use. If empty, it will\nautomatically use all wireless interfaces.</p>\n<div class=\"note\">\n<p>A separate wpa_supplicant instance will be started for each\ninterface.</p>\n</div>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"wlan0\"\n  \"wlan1\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iwd.nix",
                "option_name": "networking.wireless.iwd.enable",
                "option_description": "<rendered-html><p>Whether to enable iwd.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iwd.nix",
                "option_name": "networking.wireless.iwd.package",
                "option_description": "<rendered-html><p>The iwd package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.iwd",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/iwd.nix",
                "option_name": "networking.wireless.iwd.settings",
                "option_description": "<rendered-html><p>Options passed to iwd. See <a\nhref=\"https://iwd.wiki.kernel.org/networkconfigurationsettings\">here</a>\nfor supported options.</p>\n</rendered-html>",
                "option_type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))",
                "option_default": "{ }",
                "option_example": "{\n  Network = {\n    EnableIPv6 = true;\n    RoutePriorityOffset = 300;\n  };\n  Settings = {\n    AutoConnect = true;\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "m0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks",
                "option_description": "<rendered-html><p>The network definitions to automatically connect to when <code\nclass=\"interpreted-text\" role=\"command\">wpa_supplicant</code> is\nrunning. If this parameter is left empty wpa_supplicant will use\n/etc/wpa_supplicant.conf as the configuration file.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{ echelon = {                   # SSID with no spaces or special characters\n    psk = \"abcdefgh\";           # (password will be written to /nix/store!)\n  };\n\n  echelon = {                   # safe version of the above: read PSK from the\n    psk = \"@PSK_ECHELON@\";      # variable PSK_ECHELON, defined in environmentFile,\n  };                            # this won't leak into /nix/store\n\n  \"echelon's AP\" = {            # SSID with spaces and/or special characters\n     psk = \"ijklmnop\";          # (password will be written to /nix/store!)\n  };\n\n  \"free.wifi\" = {};             # Public wireless network\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "nEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.auth",
                "option_description": "<rendered-html><p>Use this option to configure advanced authentication methods like\nEAP. See <code class=\"interpreted-text\"\nrole=\"manpage\">wpa_supplicant.conf(5)</code> for example\nconfigurations.</p>\n<div class=\"warning\">\n<p>Be aware that this will be written to the nix store in plaintext! Use\nan environment variable for secrets.</p>\n</div>\n<div class=\"note\">\n<p>Mutually exclusive with <code class=\"interpreted-text\"\nrole=\"var\">psk</code> and <code class=\"interpreted-text\"\nrole=\"var\">pskRaw</code>.</p>\n</div>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "''\n  eap=PEAP\n  identity=\"user@example.com\"\n  password=\"@EXAMPLE_PASSWORD@\"\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "nUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.authProtocols",
                "option_description": "<rendered-html><p>The list of authentication protocols accepted by this network. This\ncorresponds to the <code>key_mgmt</code> option in wpa_supplicant.</p>\n</rendered-html>",
                "option_type": "list of (one of \"WPA-PSK\", \"WPA-EAP\", \"IEEE8021X\", \"NONE\", \"WPA-NONE\", \"FT-PSK\", \"FT-EAP\", \"FT-EAP-SHA384\", \"WPA-PSK-SHA256\", \"WPA-EAP-SHA256\", \"SAE\", \"FT-SAE\", \"WPA-EAP-SUITE-B\", \"WPA-EAP-SUITE-B-192\", \"OSEN\", \"FILS-SHA256\", \"FILS-SHA384\", \"FT-FILS-SHA256\", \"FT-FILS-SHA384\", \"OWE\", \"DPP\")",
                "option_default": "[\n  \"WPA-PSK\"\n  \"WPA-EAP\"\n  \"SAE\"\n  \"FT-PSK\"\n  \"FT-EAP\"\n  \"FT-SAE\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "nkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.extraConfig",
                "option_description": "<rendered-html><p>Extra configuration lines appended to the network block. See <code\nclass=\"interpreted-text\" role=\"manpage\">wpa_supplicant.conf(5)</code>\nfor available options.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": "''\n  bssid_blacklist=02:11:22:33:44:55 02:22:aa:44:55:66\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "n0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.hidden",
                "option_description": "<rendered-html><p>Set this to <code>true</code> if the SSID of the network is\nhidden.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "{ echelon = {\n    hidden = true;\n    psk = \"abcdefgh\";\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "oEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.priority",
                "option_description": "<rendered-html><p>By default, all networks will get same priority group (0). If some of\nthe networks are more desirable, this field can be used to change the\norder in which wpa_supplicant goes through the networks when selecting a\nBSS. The priority groups will be iterated in decreasing priority (i.e.,\nthe larger the priority value, the sooner the network is matched against\nthe scan results). Within each priority group, networks will be selected\nbased on security policy, signal strength, etc.</p>\n</rendered-html>",
                "option_type": "null or signed integer",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "oUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.psk",
                "option_description": "<rendered-html><p>The network\u2019s pre-shared key in plaintext defaulting to being a\nnetwork without any authentication.</p>\n<div class=\"warning\">\n<p>Be aware that this will be written to the nix store in plaintext! Use\nan environment variable instead.</p>\n</div>\n<div class=\"note\">\n<p>Mutually exclusive with <code class=\"interpreted-text\"\nrole=\"var\">pskRaw</code>.</p>\n</div>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "okvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.networks.<name>.pskRaw",
                "option_description": "<rendered-html><p>The network\u2019s pre-shared key in hex defaulting to being a network\nwithout any authentication.</p>\n<div class=\"warning\">\n<p>Be aware that this will be written to the nix store in plaintext! Use\nan environment variable instead.</p>\n</div>\n<div class=\"note\">\n<p>Mutually exclusive with <code class=\"interpreted-text\"\nrole=\"var\">psk</code>.</p>\n</div>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "o0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.scanOnLowSignal",
                "option_description": "<rendered-html><p>Whether to periodically scan for (better) networks when the signal of\nthe current one is low. This will make roaming between access points\nfaster, but will consume more power.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "pEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.userControlled.enable",
                "option_description": "<rendered-html><p>Allow normal users to control wpa_supplicant through wpa_gui or\nwpa_cli. This is useful for laptop users that switch networks a lot and\ndon\u2019t want to depend on a large package such as NetworkManager just to\npick nearby access points.</p>\n<p>When using a declarative network specification you cannot persist any\nsettings via wpa_gui or wpa_cli.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "pUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/wpa_supplicant.nix",
                "option_name": "networking.wireless.userControlled.group",
                "option_description": "<rendered-html><p>Members of this group can control wpa_supplicant.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"wheel\"",
                "option_example": "\"network\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "pkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces",
                "option_description": "<rendered-html><p>Creating multiple WLAN interfaces on top of one physical WLAN device\n(NIC).</p>\n<p>The name of the WLAN interface corresponds to the name of the\nattribute. A NIC is referenced by the persistent device name of the WLAN\ninterface that <code>udev</code> assigns to a NIC by default. If a NIC\nsupports multiple WLAN interfaces, then the one NIC can be used as\n<code>device</code> for multiple WLAN interfaces. If a NIC is used for\ncreating WLAN interfaces, then the default WLAN interface with a\npersistent device name form <code>udev</code> is not created. A WLAN\ninterface with the persistent name assigned from <code>udev</code> would\nhave to be created explicitly.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  wlan-station0 = {\n      device = \"wlp6s0\";\n  };\n  wlan-adhoc0 = {\n      type = \"ibss\";\n      device = \"wlp6s0\";\n      mac = \"02:00:00:00:00:01\";\n  };\n  wlan-p2p0 = {\n      device = \"wlp6s0\";\n      mac = \"02:00:00:00:00:02\";\n  };\n  wlan-ap0 = {\n      device = \"wlp6s0\";\n      mac = \"02:00:00:00:00:03\";\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "p0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces.<name>.device",
                "option_description": "<rendered-html><p>The name of the underlying hardware WLAN device as assigned by\n<code>udev</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"wlp6s0\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "qEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces.<name>.flags",
                "option_description": "<rendered-html><p>Flags for interface of type <code>monitor</code>.</p>\n</rendered-html>",
                "option_type": "null or one of \"none\", \"fcsfail\", \"control\", \"otherbss\", \"cook\", \"active\"",
                "option_default": "null",
                "option_example": "\"control\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "qUvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces.<name>.fourAddr",
                "option_description": "<rendered-html><p>Whether to enable <code>4-address mode</code> with type\n<code>managed</code>.</p>\n</rendered-html>",
                "option_type": "null or boolean",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "qkvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces.<name>.mac",
                "option_description": "<rendered-html><p>MAC address to use for the device. If <code>null</code>, then the MAC\nof the underlying hardware WLAN device is used.</p>\n<p>INFO: Locally administered MAC addresses are of the form:</p>\n<ul>\n<li>x2:xx:xx:xx:xx:xx</li>\n<li>x6:xx:xx:xx:xx:xx</li>\n<li>xA:xx:xx:xx:xx:xx</li>\n<li>xE:xx:xx:xx:xx:xx</li>\n</ul>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"02:00:00:00:00:01\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "q0vRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces.<name>.meshID",
                "option_description": "<rendered-html><p>MeshID of interface with type <code>mesh</code>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "rEvRtpABZu4t0s2IRIrB",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/network-interfaces.nix",
                "option_name": "networking.wlanInterfaces.<name>.type",
                "option_description": "<rendered-html><p>The type of the WLAN interface. The type has to be supported by the\nunderlying hardware of the device.</p>\n</rendered-html>",
                "option_type": "one of \"managed\", \"ibss\", \"monitor\", \"mesh\", \"wds\"",
                "option_default": "\"managed\"",
                "option_example": "\"ibss\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "mtPdtpABYW7nGSBMcqmp",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/desktops/gnome/glib-networking.nix",
                "option_name": "services.gnome.glib-networking.enable",
                "option_description": "<rendered-html><p>Whether to enable network extensions for GLib.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "0tPdtpABYW7nGSBMcrmy",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/websockify.nix",
                "option_name": "services.networking.websockify.enable",
                "option_description": "<rendered-html><p>Whether to enable websockify to forward websocket connections to TCP\nconnections.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "09PdtpABYW7nGSBMcrmy",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/websockify.nix",
                "option_name": "services.networking.websockify.portMap",
                "option_description": "<rendered-html><p>Ports to map by default.</p>\n</rendered-html>",
                "option_type": "attribute set of signed integer",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "1NPdtpABYW7nGSBMcrmy",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/websockify.nix",
                "option_name": "services.networking.websockify.sslCert",
                "option_description": "<rendered-html><p>Path to the SSL certificate.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-693bc46d169f5af9c992095736e82c3488bf7dbb",
            "_type": "_doc",
            "_id": "1dPdtpABYW7nGSBMcrmy",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/services/networking/websockify.nix",
                "option_name": "services.networking.websockify.sslKey",
                "option_description": "<rendered-html><p>Path to the SSL key.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "config.services.networking.websockify.sslCert",
                "option_example": null,
                "option_flake": null
            }
        }
    ]
}