{
    "total": {
        "value": 272,
        "relation": "eq"
    },
    "max_score": 1.0,
    "hits": [
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FdajzZABYW7nGSBMmXP_",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/security/misc.nix",
                "option_name": "security.virtualisation.flushL1DataCache",
                "option_description": "<rendered-html><p>Whether the hypervisor should flush the L1 data cache before entering\nguests. See also <a\nhref=\"https://search.nixos.org/options?channel=unstable&amp;show=security.allowSimultaneousMultithreading&amp;query=security.allowSimultaneousMultithreading\">security.allowSimultaneousMultithreading</a>.</p>\n<ul>\n<li><code>null</code>: uses the kernel default</li>\n<li><code>\"never\"</code>: disables L1 data cache flushing entirely. May\nbe appropriate if all guests are trusted.</li>\n<li><code>\"cond\"</code>: flushes L1 data cache only for pre-determined\ncode paths. May leak information about the host address space\nlayout.</li>\n<li><code>\"always\"</code>: flushes L1 data cache every time the\nhypervisor enters the guest. May incur significant performance\ncost.</li>\n</ul>\n</rendered-html>",
                "option_type": "null or one of \"never\", \"cond\", \"always\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.additionalPaths",
                "option_description": "<rendered-html><p>A list of paths whose closure should be made available to the VM.</p>\n<p>When 9p is used, the closure is registered in the Nix database in the\nVM. All other paths in the host Nix store appear in the guest Nix store\nas well, but are considered garbage (because they are not registered in\nthe Nix database of the guest).</p>\n<p>When <code class=\"interpreted-text\"\nrole=\"option\">virtualisation.useNixStoreImage</code> is set, the closure\nis copied to the Nix store image.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.enable",
                "option_description": "<rendered-html><p>Whether to enable Anbox.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "E9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.extraInit",
                "option_description": "<rendered-html><p>Extra shell commands to be run inside the container image during\ninit.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.image",
                "option_description": "<rendered-html><p>Base android image for Anbox.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.anbox.image",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.imageModifications",
                "option_description": "<rendered-html><p>Commands to edit the image filesystem.</p>\n<p>This can be used to e.g. bundle a privileged F-Droid.</p>\n<p>Commands are ran with PWD being at the root of the filesystem.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.ipv4.container.address",
                "option_description": "<rendered-html><p>IPv4 Container address.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"192.168.250.2\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "F9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.ipv4.container.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the Container address, specified as the number of bits\nin the prefix (<code>24</code>).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "24",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.ipv4.dns",
                "option_description": "<rendered-html><p>Container DNS server.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"1.1.1.1\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.ipv4.gateway.address",
                "option_description": "<rendered-html><p>IPv4 Host address.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"192.168.250.1\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/anbox.nix",
                "option_name": "virtualisation.anbox.ipv4.gateway.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the Host address, specified as the number of bits in\nthe prefix (<code>24</code>).</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "24",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "G9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/appvm.nix",
                "option_name": "virtualisation.appvm.enable",
                "option_description": "<rendered-html><p>This enables AppVMs and related virtualisation settings.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/appvm.nix",
                "option_name": "virtualisation.appvm.user",
                "option_description": "<rendered-html><p>AppVM user login. Currently only AppVMs are supported for a single\nuser only.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.bios",
                "option_description": "<rendered-html><p>An alternate BIOS (such as <code>qboot</code>) with which to start\nthe VM. Should contain a file named <code>bios.bin</code>. If\n<code>null</code>, QEMU\u2019s builtin SeaBIOS will be used.</p>\n</rendered-html>",
                "option_type": "null or package",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.bootLoaderDevice",
                "option_description": "<rendered-html><p>The path (inside th VM) to the device to boot from when legacy\nbooting.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "/dev/disk/by-id/virtio-root",
                "option_example": "\"/dev/disk/by-id/virtio-boot-loader-device\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "H9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.bootPartition",
                "option_description": "<rendered-html><p>The path (inside the VM) to the device containing the EFI System\nPartition (ESP).</p>\n<p>If you are <em>not</em> booting from a UEFI firmware, this value is,\nby default, <code>null</code>. The ESP is mounted to\n<code>boot.loader.efi.efiSysMountpoint</code>.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "if cfg.useEFIBoot then \"/dev/disk/by-label/ESP\" else null",
                "option_example": "\"/dev/disk/by-label/esp\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "INatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containerd.nix",
                "option_name": "virtualisation.containerd.args",
                "option_description": "<rendered-html><p>extra args to append to the containerd cmdline</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "IdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containerd.nix",
                "option_name": "virtualisation.containerd.configFile",
                "option_description": "<rendered-html><p>Path to containerd config file. Setting this option will override any\nconfiguration applied by the settings option.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ItatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containerd.nix",
                "option_name": "virtualisation.containerd.enable",
                "option_description": "<rendered-html><p>Whether to enable containerd container runtime.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "I9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containerd.nix",
                "option_name": "virtualisation.containerd.settings",
                "option_description": "<rendered-html><p>Verbatim lines to add to containerd.toml</p>\n</rendered-html>",
                "option_type": "TOML value",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.containersConf.cniPlugins",
                "option_description": "<rendered-html><p>CNI plugins to install on the system.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[\n  pkgs.cni-plugins\n]\n",
                "option_example": "[\n  pkgs.cniPlugins.dnsname\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.containersConf.settings",
                "option_description": "<rendered-html><p>containers.conf configuration</p>\n</rendered-html>",
                "option_type": "TOML value",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "JtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.enable",
                "option_description": "<rendered-html><p>This option enables the common /etc/containers configuration\nmodule.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "J9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.ociSeccompBpfHook.enable",
                "option_description": "<rendered-html><p>Enable the OCI seccomp BPF hook</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.policy",
                "option_description": "<rendered-html><p>Signature verification policy file. If this option is empty the\ndefault policy file from <code>skopeo</code> will be used.</p>\n</rendered-html>",
                "option_type": "attribute set",
                "option_default": "{ }",
                "option_example": "{\n  default = [ { type = \"insecureAcceptAnything\"; } ];\n  transports = {\n    docker-daemon = {\n      \"\" = [ { type = \"insecureAcceptAnything\"; } ];\n    };\n  };\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.registries.block",
                "option_description": "<rendered-html><p>List of blocked repositories.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "KtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.registries.insecure",
                "option_description": "<rendered-html><p>List of insecure repositories.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "K9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.registries.search",
                "option_description": "<rendered-html><p>List of repositories to search.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"docker.io\"\n  \"quay.io\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/containers.nix",
                "option_name": "virtualisation.containers.storage.settings",
                "option_description": "<rendered-html><p>storage.conf configuration</p>\n</rendered-html>",
                "option_type": "TOML value",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.cores",
                "option_description": "<rendered-html><p>Specify the number of cores the guest is permitted to use. The number\ncan be higher than the available cores on the host system.</p>\n</rendered-html>",
                "option_type": "positive integer, meaning >0",
                "option_default": "1",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "LtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.enable",
                "option_description": "<rendered-html><p>Whether to enable Container Runtime Interface for OCI (CRI-O).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "L9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.extraPackages",
                "option_description": "<rendered-html><p>Extra packages to be installed in the CRI-O wrapper.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "[\n  pkgs.gvisor\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "MNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.logLevel",
                "option_description": "<rendered-html><p>Log level to be used</p>\n</rendered-html>",
                "option_type": "one of \"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
                "option_default": "\"info\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "MdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.pauseCommand",
                "option_description": "<rendered-html><p>Override the default pause command</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/pause\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "MtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.pauseImage",
                "option_description": "<rendered-html><p>Override the default pause image for pod sandboxes</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"k8s.gcr.io/pause:3.2\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "M9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.runtime",
                "option_description": "<rendered-html><p>Override the default runtime</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"crun\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.settings",
                "option_description": "<rendered-html><p>Configuration for cri-o, see <a\nhref=\"https://github.com/cri-o/cri-o/blob/master/docs/crio.conf.5.md\">https://github.com/cri-o/cri-o/blob/master/docs/crio.conf.5.md</a>.</p>\n</rendered-html>",
                "option_type": "TOML value",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/cri-o.nix",
                "option_name": "virtualisation.cri-o.storageDriver",
                "option_description": "<rendered-html><p>Storage driver to be used</p>\n</rendered-html>",
                "option_type": "one of \"aufs\", \"btrfs\", \"devmapper\", \"overlay\", \"vfs\", \"zfs\"",
                "option_default": "\"overlay\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "NtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.directBoot.enable",
                "option_description": "<rendered-html><p>If enabled, the virtual machine will boot directly into the kernel\ninstead of through a bootloader. Read more about this feature in the <a\nhref=\"https://qemu-project.gitlab.io/qemu/system/linuxboot.html\">QEMU\ndocumentation on Direct Linux Boot</a></p>\n<p>This is enabled by default. If you want to test netboot, consider\ndisabling this option. Enable a bootloader with <code\nclass=\"interpreted-text\"\nrole=\"option\">virtualisation.useBootLoader</code> if you need.</p>\n<p>Relevant parameters such as those set in <code>boot.initrd</code> and\n<code>boot.kernelParams</code> are also passed to QEMU. Additional\nparameters can be supplied on invocation through the environment\nvariable <code>$QEMU_KERNEL_PARAMS</code>. They are added to the\n<code>-append</code> option, see <a\nhref=\"https://www.qemu.org/docs/master/system/qemu-manpage\">QEMU User\nDocumentation</a> for details For example, to let QEMU use the parent\nterminal as the serial console, set\n<code>QEMU_KERNEL_PARAMS=\"console=ttyS0\"</code>.</p>\n<p>This will not (re-)boot correctly into a system that has switched to\na different configuration on disk.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"!cfg.useBootLoader\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "N9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.directBoot.initrd",
                "option_description": "<rendered-html><p>In direct boot situations, you may want to influence the initrd to\nload to use your own customized payload.</p>\n<p>This is useful if you want to test the netboot image without testing\nthe firmware or the loading part.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\\${config.system.build.initialRamdisk}/\\${config.system.boot.loader.initrdFile}\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ONatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.diskImage",
                "option_description": "<rendered-html><p>Path to the disk image containing the root filesystem. The image will\nbe created on startup if it does not exist.</p>\n<p>If null, a tmpfs will be used as the root filesystem and the VM\u2019s\nstate will not be persistent.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "\"./${config.system.name}.qcow2\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "OdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.diskSize",
                "option_description": "<rendered-html><p>The disk size in megabytes of the virtual machine.</p>\n</rendered-html>",
                "option_type": "null or (positive integer, meaning >0)",
                "option_default": "1024",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "OtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.autoPrune.dates",
                "option_description": "<rendered-html><p>Specification (in the format described by <a\nhref=\"https://www.freedesktop.org/software/systemd/man/systemd.time.html\"><code\nclass=\"interpreted-text\" role=\"manpage\">systemd.time(7)</code></a>) of\nthe time at which the prune will occur.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"weekly\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "O9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.autoPrune.enable",
                "option_description": "<rendered-html><p>Whether to periodically prune Docker resources. If enabled, a systemd\ntimer will run <code>docker system prune -f</code> as specified by the\n<code>dates</code> option.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "PNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.autoPrune.flags",
                "option_description": "<rendered-html><p>Any additional flags passed to <code class=\"interpreted-text\"\nrole=\"command\">docker system prune</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"--all\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "PdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.daemon.settings",
                "option_description": "<rendered-html><p>Configuration for docker daemon. The attributes are serialized to\nJSON used as daemon.conf. See <a\nhref=\"https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file\">https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file</a></p>\n</rendered-html>",
                "option_type": "JSON value",
                "option_default": "{ }",
                "option_example": "{\n  fixed-cidr-v6 = \"fd00::/80\";\n  ipv6 = true;\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "PtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.enable",
                "option_description": "<rendered-html><p>This option enables docker, a daemon that manages linux containers.\nUsers in the \u201cdocker\u201d group can interact with the daemon (e.g. to start\nor stop containers) using the <code class=\"interpreted-text\"\nrole=\"command\">docker</code> command line tool.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "P9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.enableNvidia",
                "option_description": "<rendered-html><p><strong>Deprecated</strong>, please use\nvirtualisation.containers.cdi.dynamic.nvidia.enable instead.</p>\n<p>Enable nvidia-docker wrapper, supporting NVIDIA GPUs inside docker\ncontainers.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "QNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.enableOnBoot",
                "option_description": "<rendered-html><p>When enabled dockerd is started on boot. This is required for\ncontainers which are created with the <code>--restart=always</code> flag\nto work. If this option is disabled, docker might be started on demand\nby socket activation.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "QdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.extraOptions",
                "option_description": "<rendered-html><p>The extra command-line options to pass to <code\nclass=\"interpreted-text\" role=\"command\">docker</code> daemon.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \" \"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "QtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.extraPackages",
                "option_description": "<rendered-html><p>Extra packages to add to PATH for the docker daemon process.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "with pkgs; [ criu ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Q9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.listenOptions",
                "option_description": "<rendered-html><p>A list of unix and tcp docker should listen to. The format follows\nListenStream as described in systemd.socket(5).</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"/run/docker.sock\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "RNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.liveRestore",
                "option_description": "<rendered-html><p>Allow dockerd to be restarted without affecting running container.\nThis option is incompatible with docker swarm.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "RdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.logDriver",
                "option_description": "<rendered-html><p>This option determines which Docker log driver to use.</p>\n</rendered-html>",
                "option_type": "one of \"none\", \"json-file\", \"syslog\", \"journald\", \"gelf\", \"fluentd\", \"awslogs\", \"splunk\", \"etwlogs\", \"gcplogs\", \"local\"",
                "option_default": "\"journald\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "RtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.package",
                "option_description": "<rendered-html><p>The docker package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.docker",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "R9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker-rootless.nix",
                "option_name": "virtualisation.docker.rootless.daemon.settings",
                "option_description": "<rendered-html><p>Configuration for docker daemon. The attributes are serialized to\nJSON used as daemon.conf. See <a\nhref=\"https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file\">https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file</a></p>\n</rendered-html>",
                "option_type": "JSON value",
                "option_default": "{ }",
                "option_example": "{\n  fixed-cidr-v6 = \"fd00::/80\";\n  ipv6 = true;\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "SNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker-rootless.nix",
                "option_name": "virtualisation.docker.rootless.enable",
                "option_description": "<rendered-html><p>This option enables docker in a rootless mode, a daemon that manages\nlinux containers. To interact with the daemon, one needs to set <code\nclass=\"interpreted-text\"\nrole=\"command\">DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "SdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker-rootless.nix",
                "option_name": "virtualisation.docker.rootless.package",
                "option_description": "<rendered-html><p>The docker package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.docker",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "StatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker-rootless.nix",
                "option_name": "virtualisation.docker.rootless.setSocketVariable",
                "option_description": "<rendered-html><p>Point <code class=\"interpreted-text\"\nrole=\"command\">DOCKER_HOST</code> to rootless Docker instance for normal\nusers by default.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "S9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/docker.nix",
                "option_name": "virtualisation.docker.storageDriver",
                "option_description": "<rendered-html><p>This option determines which Docker <a\nhref=\"https://docs.docker.com/storage/storagedriver/select-storage-driver/\">storage\ndriver</a> to use. By default it lets docker automatically choose the\npreferred storage driver. However, it is recommended to specify a\nstorage driver explicitly, as docker\u2019s default varies over versions.</p>\n<div class=\"warning\">\n<p>Changing the storage driver will cause any existing containers and\nimages to become inaccessible.</p>\n</div>\n</rendered-html>",
                "option_type": "null or one of \"aufs\", \"btrfs\", \"devicemapper\", \"overlay\", \"overlay2\", \"zfs\"",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "TNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.efi.OVMF",
                "option_description": "<rendered-html><p>OVMF firmware package, defaults to OVMF configured with secure boot\nif needed.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "''\n  (pkgs.OVMF.override {\n            secureBoot = cfg.useSecureBoot;\n          }).fd''",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "TdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.efi.firmware",
                "option_description": "<rendered-html><p>Firmware binary for EFI implementation, defaults to OVMF.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "cfg.efi.OVMF.firmware",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "TtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.efi.keepVariables",
                "option_description": "<rendered-html><p>Whether to keep EFI variable values from the generated system\nimage</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "cfg.useBootLoader",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "T9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.efi.variables",
                "option_description": "<rendered-html><p>Platform-specific flash binary for EFI variables,\nimplementation-dependent to the EFI firmware. Defaults to OVMF.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": "cfg.efi.OVMF.variables",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "UNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.emptyDiskImages",
                "option_description": "<rendered-html><p>Additional disk images to provide to the VM. The value is a list of\nsize in megabytes of each disk. These disks are writeable by the VM.</p>\n</rendered-html>",
                "option_type": "list of (positive integer, meaning >0)",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "UdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.fileSystems",
                "option_description": "<rendered-html><p>The file systems to be mounted. It must include an entry for the root\ndirectory (<code>mountPoint = \"/\"</code>). Each entry in the list is an\nattribute set with the following fields: <code>mountPoint</code>,\n<code>device</code>, <code>fsType</code> (a file system type recognised\nby <code class=\"interpreted-text\" role=\"command\">mount</code>; defaults\nto <code>\"auto\"</code>), and <code>options</code> (the mount options\npassed to <code class=\"interpreted-text\" role=\"command\">mount</code>\nusing the <code class=\"interpreted-text\" role=\"option\">-o</code> flag;\ndefaults to <code>[ \"defaults\" ]</code>).</p>\n<p>Instead of specifying <code>device</code>, you can also specify a\nvolume label (<code>label</code>) for file systems that support it, such\nas ext2/ext3 (see <code class=\"interpreted-text\"\nrole=\"command\">mke2fs -L</code>).</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  \"/\".device = \"/dev/hda1\";\n  \"/data\" = {\n    device = \"/dev/hda2\";\n    fsType = \"ext3\";\n    options = [ \"data=journal\" ];\n  };\n  \"/bigdisk\".label = \"bigdisk\";\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "UtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.autoFormat",
                "option_description": "<rendered-html><p>If the device does not currently contain a filesystem (as determined\nby <code class=\"interpreted-text\" role=\"command\">blkid</code>), then\nautomatically format it with the filesystem type specified in <code\nclass=\"interpreted-text\" role=\"option\">fsType</code>. Use with\ncaution.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "U9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.autoResize",
                "option_description": "<rendered-html><p>If set, the filesystem is grown to its maximum size before being\nmounted. (This is typically the size of the containing partition.) This\nis currently only supported for ext2/3/4 filesystems that are mounted\nduring early boot.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "VNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.depends",
                "option_description": "<rendered-html><p>List of paths that should be mounted before this one. This\nfilesystem\u2019s <code class=\"interpreted-text\" role=\"option\">device</code>\nand <code class=\"interpreted-text\" role=\"option\">mountPoint</code> are\nalways checked and do not need to be included explicitly. If a path is\nadded to this list, any other filesystem whose mount point is a parent\nof the path will be mounted before this filesystem. The paths do not\nneed to actually be the <code class=\"interpreted-text\"\nrole=\"option\">mountPoint</code> of some other filesystem.</p>\n</rendered-html>",
                "option_type": "list of string (with check: non-empty without trailing slash)",
                "option_default": "[ ]",
                "option_example": "[\n  \"/persist\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "VdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.device",
                "option_description": "<rendered-html><p>Location of the device.</p>\n</rendered-html>",
                "option_type": "null or string (with check: non-empty)",
                "option_default": "null",
                "option_example": "\"/dev/sda\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "VtatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/encrypted-devices.nix",
                "option_name": "virtualisation.fileSystems.<name>.encrypted.blkDev",
                "option_description": "<rendered-html><p>Location of the backing encrypted device.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/dev/sda1\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "V9atzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/encrypted-devices.nix",
                "option_name": "virtualisation.fileSystems.<name>.encrypted.enable",
                "option_description": "<rendered-html><p>The block device is backed by an encrypted one, adds this device as a\ninitrd luks entry.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "WNatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/encrypted-devices.nix",
                "option_name": "virtualisation.fileSystems.<name>.encrypted.keyFile",
                "option_description": "<rendered-html><p>Path to a keyfile used to unlock the backing encrypted device. When\nsystemd stage 1 is not enabled, at the time this keyfile is accessed,\nthe <code>neededForBoot</code> filesystems (see\n<code>utils.fsNeededForBoot</code>) will have been mounted under\n<code>/mnt-root</code>, so the keyfile path should usually start with\n\u201c/mnt-root/\u201d. When systemd stage 1 is enabled,\n<code>fsNeededForBoot</code> file systems will be mounted as needed\nunder <code>/sysroot</code>, and the keyfile will not be accessed until\nits requisite mounts are done.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/mnt-root/root/.swapkey\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "WdatzZABYW7nGSBMuLQj",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/encrypted-devices.nix",
                "option_name": "virtualisation.fileSystems.<name>.encrypted.label",
                "option_description": "<rendered-html><p>Label of the unlocked encrypted device. Set\n<code>fileSystems.&lt;name?&gt;.device</code> to\n<code>/dev/mapper/&lt;label&gt;</code> to mount the unlocked device.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"rootfs\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "WtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.fsType",
                "option_description": "<rendered-html><p>Type of the file system.</p>\n</rendered-html>",
                "option_type": "string (with check: non-empty)",
                "option_default": "\"auto\"",
                "option_example": "\"ext3\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "W9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.label",
                "option_description": "<rendered-html><p>Label of the device (if any).</p>\n</rendered-html>",
                "option_type": "null or string (with check: non-empty)",
                "option_default": "null",
                "option_example": "\"root-partition\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "XNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.mountPoint",
                "option_description": "<rendered-html><p>Location of the mounted file system.</p>\n</rendered-html>",
                "option_type": "string (with check: non-empty without trailing slash)",
                "option_default": null,
                "option_example": "\"/mnt/usb\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "XdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/system/boot/stage-1.nix",
                "option_name": "virtualisation.fileSystems.<name>.neededForBoot",
                "option_description": "<rendered-html><p>If set, this file system will be mounted in the initial ramdisk. Note\nthat the file system will always be mounted in the initial ramdisk if\nits mount point is one of the following: <code class=\"interpreted-text\"\nrole=\"file\">/</code>, <code class=\"interpreted-text\"\nrole=\"file\">/nix</code>, <code class=\"interpreted-text\"\nrole=\"file\">/nix/store</code>, <code class=\"interpreted-text\"\nrole=\"file\">/var</code>, <code class=\"interpreted-text\"\nrole=\"file\">/var/log</code>, <code class=\"interpreted-text\"\nrole=\"file\">/var/lib</code>, <code class=\"interpreted-text\"\nrole=\"file\">/var/lib/nixos</code>, <code class=\"interpreted-text\"\nrole=\"file\">/etc</code>, <code class=\"interpreted-text\"\nrole=\"file\">/usr</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "XtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.noCheck",
                "option_description": "<rendered-html><p>Disable running fsck on this filesystem.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "X9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.options",
                "option_description": "<rendered-html><p>Options used to mount the file system.</p>\n</rendered-html>",
                "option_type": "non-empty (list of string (with check: non-empty))",
                "option_default": "[\n  \"defaults\"\n]",
                "option_example": "[\n  \"data=journal\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "YNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/overlayfs.nix",
                "option_name": "virtualisation.fileSystems.<name>.overlay.lowerdir",
                "option_description": "<rendered-html><p>The list of path(s) to the lowerdir(s).</p>\n<p>To create a writable overlay, you MUST provide an upperdir and a\nworkdir.</p>\n<p>You can create a read-only overlay when you provide multiple (at\nleast 2!) lowerdirs and neither an upperdir nor a workdir.</p>\n</rendered-html>",
                "option_type": "null or (non-empty (list of (string or path in the Nix store)))",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "YdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/overlayfs.nix",
                "option_name": "virtualisation.fileSystems.<name>.overlay.upperdir",
                "option_description": "<rendered-html><p>The path to the upperdir.</p>\n<p>If this is null, a read-only overlay is created using the\nlowerdir.</p>\n<p>If you set this to some value you MUST also set\n<code>workdir</code>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "YtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems/overlayfs.nix",
                "option_name": "virtualisation.fileSystems.<name>.overlay.workdir",
                "option_description": "<rendered-html><p>The path to the workdir.</p>\n<p>This MUST be set if you set <code>upperdir</code>.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Y9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/tasks/filesystems.nix",
                "option_name": "virtualisation.fileSystems.<name>.stratis.poolUuid",
                "option_description": "<rendered-html><p>UUID of the stratis pool that the fs is located in</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"04c68063-90a5-4235-b9dd-6180098a20d9\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ZNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts",
                "option_description": "<rendered-html><p>When using the SLiRP user networking (default), this option allows to\nforward ports to/from the host/guest.</p>\n<div class=\"warning\">\n<p>If the NixOS firewall on the virtual machine is enabled, you also\nhave to open the guest ports to enable the traffic between host and\nguest.</p>\n</div>\n<div class=\"note\">\n<p>Currently QEMU supports only IPv4 forwarding.</p>\n</div>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": "[ ]",
                "option_example": "[ # forward local port 2222 -> 22, to ssh into the VM\n  { from = \"host\"; host.port = 2222; guest.port = 22; }\n\n  # forward local port 80 -> 10.0.2.10:80 in the VLAN\n  { from = \"guest\";\n    guest.address = \"10.0.2.10\"; guest.port = 80;\n    host.address = \"127.0.0.1\"; host.port = 80;\n  }\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ZdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts.*.from",
                "option_description": "<rendered-html><p>Controls the direction in which the ports are mapped:</p>\n<ul>\n<li><code>\"host\"</code> means traffic from the host ports is forwarded\nto the given guest port.</li>\n<li><code>\"guest\"</code> means traffic from the guest ports is forwarded\nto the given host port.</li>\n</ul>\n</rendered-html>",
                "option_type": "one of \"host\", \"guest\"",
                "option_default": "\"host\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ZtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts.*.guest.address",
                "option_description": "<rendered-html><p>The IPv4 address on the guest VLAN.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "Z9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts.*.guest.port",
                "option_description": "<rendered-html><p>The guest port to be mapped.</p>\n</rendered-html>",
                "option_type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "aNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts.*.host.address",
                "option_description": "<rendered-html><p>The IPv4 address of the host.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "adatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts.*.host.port",
                "option_description": "<rendered-html><p>The host port to be mapped.</p>\n</rendered-html>",
                "option_type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "atatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.forwardPorts.*.proto",
                "option_description": "<rendered-html><p>The protocol to forward.</p>\n</rendered-html>",
                "option_type": "one of \"tcp\", \"udp\"",
                "option_default": "\"tcp\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "a9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.graphics",
                "option_description": "<rendered-html><p>Whether to run QEMU with a graphics window, or in nographic mode.\nSerial console will be enabled on both settings, but this will change\nthe preferred console.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "bNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.host.pkgs",
                "option_description": "<rendered-html><p>Package set to use for the host-specific packages of the VM runner.\nChanging this to e.g. a Darwin package set allows running NixOS VMs on\nDarwin.</p>\n</rendered-html>",
                "option_type": "An evaluation of Nixpkgs; the top level attribute set of packages",
                "option_default": "pkgs",
                "option_example": "import pkgs.path { system = \"x86_64-darwin\"; }\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "bdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/hyperv-guest.nix",
                "option_name": "virtualisation.hypervGuest.enable",
                "option_description": "<rendered-html><p>Whether to enable Hyper-V Guest Support.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "btatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/hyperv-guest.nix",
                "option_name": "virtualisation.hypervGuest.videoMode",
                "option_description": "<rendered-html><p>Resolution at which to initialize the video adapter.</p>\n<p>Supports screen resolution up to Full HD 1920x1080 with 32 bit color\non Windows Server 2012, and 1600x1200 with 16 bit color on Windows\nServer 2008 R2 or earlier.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"1152x864\"",
                "option_example": "\"1024x768\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "b9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.clientPackage",
                "option_description": "<rendered-html><p>The incus client package to use. This package is added to PATH.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "config.virtualisation.incus.package.client",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "cNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.enable",
                "option_description": "<rendered-html><p>Whether to enable incusd, a daemon that manages containers and\nvirtual machines.</p>\n<p>Users in the \u201cincus-admin\u201d group can interact with the daemon (e.g.\nto start or stop containers) using the <code class=\"interpreted-text\"\nrole=\"command\">incus</code> command line tool, among others .</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "cdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.lxcPackage",
                "option_description": "<rendered-html><p>The lxc package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "config.virtualisation.lxc.package",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ctatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.package",
                "option_description": "<rendered-html><p>The incus-lts package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.incus-lts",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "c9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.preseed",
                "option_description": "<rendered-html><p>Configuration for Incus preseed, see <a\nhref=\"https://linuxcontainers.org/incus/docs/main/howto/initialize/#non-interactive-configuration\">https://linuxcontainers.org/incus/docs/main/howto/initialize/#non-interactive-configuration</a>\nfor supported values.</p>\n<p>Changes to this will be re-applied to Incus which will overwrite\nexisting entities or create missing ones, but entities will <em>not</em>\nbe removed by preseed.</p>\n</rendered-html>",
                "option_type": "null or (YAML value)",
                "option_default": "null",
                "option_example": "{\n  networks = [\n    {\n      config = {\n        \"ipv4.address\" = \"10.0.100.1/24\";\n        \"ipv4.nat\" = \"true\";\n      };\n      name = \"incusbr0\";\n      type = \"bridge\";\n    }\n  ];\n  profiles = [\n    {\n      devices = {\n        eth0 = {\n          name = \"eth0\";\n          network = \"incusbr0\";\n          type = \"nic\";\n        };\n        root = {\n          path = \"/\";\n          pool = \"default\";\n          size = \"35GiB\";\n          type = \"disk\";\n        };\n      };\n      name = \"default\";\n    }\n  ];\n  storage_pools = [\n    {\n      config = {\n        source = \"/var/lib/incus/storage-pools/default\";\n      };\n      driver = \"dir\";\n      name = \"default\";\n    }\n  ];\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "dNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.socketActivation",
                "option_description": "<rendered-html><p>Whether to enable socket-activation for starting incus.service.\nEnabling this option will stop incus.service from starting automatically\non boot. .</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ddatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.softDaemonRestart",
                "option_description": "<rendered-html><p>Allow for incus.service to be stopped without affecting running\ninstances.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "dtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.startTimeout",
                "option_description": "<rendered-html><p>Time to wait (in seconds) for incusd to become ready to process\nrequests. If incusd does not reply within the configured time,\n<code>incus.service</code> will be considered failed and systemd will\nattempt to restart it.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": "600",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "d9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.ui.enable",
                "option_description": "<rendered-html><p>Whether to enable (experimental) Incus UI.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "eNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/incus.nix",
                "option_name": "virtualisation.incus.ui.package",
                "option_description": "<rendered-html><p>The ui package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.incus.ui",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "edatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.interfaces",
                "option_description": "<rendered-html><p>Network interfaces to add to the VM.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  enp1s0 = {\n    vlan = 1;\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "etatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.interfaces.<name>.assignIP",
                "option_description": "<rendered-html><p>Automatically assign an IP address to the network interface using the\nsame scheme as virtualisation.vlans.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "e9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.interfaces.<name>.vlan",
                "option_description": "<rendered-html><p>VLAN to which the network interface is connected.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/kvmgt.nix",
                "option_name": "virtualisation.kvmgt.device",
                "option_description": "<rendered-html><p>PCI ID of graphics card. You can figure it with <code\nclass=\"interpreted-text\"\nrole=\"command\">ls /sys/class/mdev_bus</code>.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"0000:00:02.0\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "fdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/kvmgt.nix",
                "option_name": "virtualisation.kvmgt.enable",
                "option_description": "<rendered-html><p>Whether to enable KVMGT (iGVT-g) VGPU support. Allows Qemu/KVM guests\nto share host\u2019s Intel integrated graphics card. Currently only one\ngraphical device can be shared. To allow users to access the device\nwithout root add them to the kvm group:\n<code>users.extraUsers.&lt;yourusername&gt;.extraGroups = [ \"kvm\" ];</code>\n.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ftatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/kvmgt.nix",
                "option_name": "virtualisation.kvmgt.vgpus",
                "option_description": "<rendered-html><p>Virtual GPUs to be used in Qemu. You can find devices via <code\nclass=\"interpreted-text\"\nrole=\"command\">ls /sys/bus/pci/devices/*/mdev_supported_types</code> and\nfind info about device via <code class=\"interpreted-text\"\nrole=\"command\">cat /sys/bus/pci/devices/*/mdev_supported_types/i915-GVTg_V5_4/description</code></p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  i915-GVTg_V5_8 = {\n    uuid = [\n      \"a297db4a-f4c2-11e6-90f6-d3b88d6c9525\"\n    ];\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "f9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/kvmgt.nix",
                "option_name": "virtualisation.kvmgt.vgpus.<name>.uuid",
                "option_description": "<rendered-html><p>UUID(s) of VGPU device. You can generate one with\n<code>libossp_uuid</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "gNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.allowedBridges",
                "option_description": "<rendered-html><p>List of bridge devices that can be used by qemu:///session</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"virbr0\"\n]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "gdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.enable",
                "option_description": "<rendered-html><p>This option enables libvirtd, a daemon that manages virtual machines.\nUsers in the \u201clibvirtd\u201d group can interact with the daemon (e.g. to\nstart or stop VMs) using the <code class=\"interpreted-text\"\nrole=\"command\">virsh</code> command line tool, among others.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "gtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.extraConfig",
                "option_description": "<rendered-html><p>Extra contents appended to the libvirtd configuration file,\nlibvirtd.conf.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "g9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.extraOptions",
                "option_description": "<rendered-html><p>Extra command line arguments passed to libvirtd on startup.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"--verbose\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "hNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.hooks",
                "option_description": "<rendered-html><p>Hooks related options.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "hdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.hooks.daemon",
                "option_description": "<rendered-html><p>Hooks that will be placed under /var/lib/libvirt/hooks/daemon.d/ and\ncalled for daemon start/shutdown/SIGHUP events. Please see <a\nhref=\"https://libvirt.org/hooks.html\">https://libvirt.org/hooks.html</a>\nfor documentation.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "htatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.hooks.libxl",
                "option_description": "<rendered-html><p>Hooks that will be placed under /var/lib/libvirt/hooks/libxl.d/ and\ncalled for libxl-handled xen domains begin/end events. Please see <a\nhref=\"https://libvirt.org/hooks.html\">https://libvirt.org/hooks.html</a>\nfor documentation.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "h9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.hooks.lxc",
                "option_description": "<rendered-html><p>Hooks that will be placed under /var/lib/libvirt/hooks/lxc.d/ and\ncalled for lxc domains begin/end events. Please see <a\nhref=\"https://libvirt.org/hooks.html\">https://libvirt.org/hooks.html</a>\nfor documentation.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "iNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.hooks.network",
                "option_description": "<rendered-html><p>Hooks that will be placed under /var/lib/libvirt/hooks/lxc.d/ and\ncalled for networks begin/end events. Please see <a\nhref=\"https://libvirt.org/hooks.html\">https://libvirt.org/hooks.html</a>\nfor documentation.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "idatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.hooks.qemu",
                "option_description": "<rendered-html><p>Hooks that will be placed under /var/lib/libvirt/hooks/qemu.d/ and\ncalled for qemu domains begin/end/migrate events. Please see <a\nhref=\"https://libvirt.org/hooks.html\">https://libvirt.org/hooks.html</a>\nfor documentation.</p>\n</rendered-html>",
                "option_type": "attribute set of path",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "itatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.nss",
                "option_description": "<rendered-html><p>libvirt NSS module options.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "i9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.nss.enable",
                "option_description": "<rendered-html><p>This option enables the older libvirt NSS module. This method uses\nDHCP server records, therefore is dependent on the hostname provided by\nthe guest. Please see <a\nhref=\"https://libvirt.org/nss.html\">https://libvirt.org/nss.html</a> for\nmore information.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "jNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.nss.enableGuest",
                "option_description": "<rendered-html><p>This option enables the newer libvirt_guest NSS module. This module\nuses the libvirt guest name instead of the hostname of the guest. Please\nsee <a\nhref=\"https://libvirt.org/nss.html\">https://libvirt.org/nss.html</a> for\nmore information.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "jdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.onBoot",
                "option_description": "<rendered-html><p>Specifies the action to be done to / on the guests when the host\nboots. The \u201cstart\u201d option starts all guests that were running prior to\nshutdown regardless of their autostart settings. The \u201cignore\u201d option\nwill not start the formerly running guest on boot. However, any guest\nmarked as autostart will still be automatically started by libvirtd.</p>\n</rendered-html>",
                "option_type": "one of \"start\", \"ignore\"",
                "option_default": "\"start\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "jtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.onShutdown",
                "option_description": "<rendered-html><p>When shutting down / restarting the host what method should be used\nto gracefully halt the guests. Setting to \u201cshutdown\u201d will cause an ACPI\nshutdown of each guest. \u201csuspend\u201d will attempt to save the state of the\nguests ready to restore on boot.</p>\n</rendered-html>",
                "option_type": "one of \"shutdown\", \"suspend\"",
                "option_default": "\"suspend\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "j9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.package",
                "option_description": "<rendered-html><p>The libvirt package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.libvirt",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "kNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.parallelShutdown",
                "option_description": "<rendered-html><p>Number of guests that will be shutdown concurrently, taking effect\nwhen onShutdown is set to \u201cshutdown\u201d. If set to 0, guests will be\nshutdown one after another. Number of guests on shutdown at any time\nwill not exceed number set in this variable.</p>\n</rendered-html>",
                "option_type": "unsigned integer, meaning >=0",
                "option_default": "0",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "kdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu",
                "option_description": "<rendered-html><p>QEMU related options.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ktatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.ovmf",
                "option_description": "<rendered-html><p>QEMU\u2019s OVMF options.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "k9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.ovmf.enable",
                "option_description": "<rendered-html><p>Allows libvirtd to take advantage of OVMF when creating new QEMU VMs\nwith UEFI boot.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "lNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.ovmf.packages",
                "option_description": "<rendered-html><p>List of OVMF packages to use. Each listed package must contain files\nnames FV/OVMF_CODE.fd and FV/OVMF_VARS.fd or FV/AAVMF_CODE.fd and\nFV/AAVMF_VARS.fd</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ pkgs.OVMF.fd ]",
                "option_example": "[ pkgs.OVMFFull.fd pkgs.pkgsCross.aarch64-multiplatform.OVMF.fd ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ldatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.package",
                "option_description": "<rendered-html><p>The qemu package to use. <code>pkgs.qemu</code> can emulate alien\narchitectures (e.g. aarch64 on x86) <code>pkgs.qemu_kvm</code> saves\ndisk space allowing to emulate only host architectures.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.qemu",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ltatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.runAsRoot",
                "option_description": "<rendered-html><p>If true, libvirtd runs qemu as root. If false, libvirtd runs qemu as\nunprivileged user qemu-libvirtd. Changing this option to false may cause\nfile permission issues for existing guests. To fix these, manually\nchange ownership of affected files in /var/lib/libvirt/qemu to\nqemu-libvirtd.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "l9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.swtpm",
                "option_description": "<rendered-html><p>QEMU\u2019s swtpm options.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "mNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.swtpm.enable",
                "option_description": "<rendered-html><p>Allows libvirtd to use swtpm to create an emulated TPM.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "mdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.swtpm.package",
                "option_description": "<rendered-html><p>The swtpm package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.swtpm",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "mtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.verbatimConfig",
                "option_description": "<rendered-html><p>Contents written to the qemu configuration file, qemu.conf. Make sure\nto include a proper namespace configuration when supplying custom\nconfiguration.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "''\n  namespaces = []\n''",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "m9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.qemu.vhostUserPackages",
                "option_description": "<rendered-html><p>Packages containing out-of-tree vhost-user drivers.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "[ pkgs.virtiofsd ]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "nNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/libvirtd.nix",
                "option_name": "virtualisation.libvirtd.sshProxy",
                "option_description": "<rendered-html><p>Weither to configure OpenSSH to use the <a\nhref=\"https://libvirt.org/ssh-proxy.html\">SSH Proxy</a>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ndatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxc.nix",
                "option_name": "virtualisation.lxc.defaultConfig",
                "option_description": "<rendered-html><p>Default config (default.conf) for new containers, i.e. for network\nconfig. See <code class=\"interpreted-text\"\nrole=\"manpage\">lxc.container.conf(5)</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ntatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxc.nix",
                "option_name": "virtualisation.lxc.enable",
                "option_description": "<rendered-html><p>This enables Linux Containers (LXC), which provides tools for\ncreating and managing system or application containers on Linux.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "n9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxcfs.nix",
                "option_name": "virtualisation.lxc.lxcfs.enable",
                "option_description": "<rendered-html><p>This enables LXCFS, a FUSE filesystem for LXC. To use lxcfs in\ninclude the following configuration in your container configuration:</p>\n<pre><code>virtualisation.lxc.defaultConfig = &quot;lxc.include = ${pkgs.lxcfs}/share/lxc/config/common.conf.d/00-lxcfs.conf&quot;;</code></pre>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "oNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxc.nix",
                "option_name": "virtualisation.lxc.package",
                "option_description": "<rendered-html><p>The lxc package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.lxc",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "odatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxc.nix",
                "option_name": "virtualisation.lxc.systemConfig",
                "option_description": "<rendered-html><p>This is the system-wide LXC config. See <code\nclass=\"interpreted-text\" role=\"manpage\">lxc.system.conf(5)</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "otatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxc.nix",
                "option_name": "virtualisation.lxc.usernetConfig",
                "option_description": "<rendered-html><p>This is the config file for managing unprivileged user network\nadministration access in LXC. See <code class=\"interpreted-text\"\nrole=\"manpage\">lxc-usernet(5)</code>.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "o9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd-agent.nix",
                "option_name": "virtualisation.lxd.agent.enable",
                "option_description": "<rendered-html><p>Whether to enable LXD agent.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "pNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.enable",
                "option_description": "<rendered-html><p>This option enables lxd, a daemon that manages containers. Users in\nthe \u201clxd\u201d group can interact with the daemon (e.g. to start or stop\ncontainers) using the <code class=\"interpreted-text\"\nrole=\"command\">lxc</code> command line tool, among others.</p>\n<p>Most of the time, you\u2019ll also want to start lxcfs, so that containers\ncan \u201csee\u201d the limits:</p>\n<pre><code>virtualisation.lxc.lxcfs.enable = true;</code></pre>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "pdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.lxcPackage",
                "option_description": "<rendered-html><p>The lxc package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "config.virtualisation.lxc.package",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ptatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.package",
                "option_description": "<rendered-html><p>The lxd-lts package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.lxd-lts",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "p9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.preseed",
                "option_description": "<rendered-html><p>Configuration for LXD preseed, see <a\nhref=\"https://documentation.ubuntu.com/lxd/en/latest/howto/initialize/#initialize-preseed\">https://documentation.ubuntu.com/lxd/en/latest/howto/initialize/#initialize-preseed</a>\nfor supported values.</p>\n<p>Changes to this will be re-applied to LXD which will overwrite\nexisting entities or create missing ones, but entities will <em>not</em>\nbe removed by preseed.</p>\n</rendered-html>",
                "option_type": "null or (YAML value)",
                "option_default": "null",
                "option_example": "{\n  networks = [\n    {\n      name = \"lxdbr0\";\n      type = \"bridge\";\n      config = {\n        \"ipv4.address\" = \"10.0.100.1/24\";\n        \"ipv4.nat\" = \"true\";\n      };\n    }\n  ];\n  profiles = [\n    {\n      name = \"default\";\n      devices = {\n        eth0 = {\n          name = \"eth0\";\n          network = \"lxdbr0\";\n          type = \"nic\";\n        };\n        root = {\n          path = \"/\";\n          pool = \"default\";\n          size = \"35GiB\";\n          type = \"disk\";\n        };\n      };\n    }\n  ];\n  storage_pools = [\n    {\n      name = \"default\";\n      driver = \"dir\";\n      config = {\n        source = \"/var/lib/lxd/storage-pools/default\";\n      };\n    }\n  ];\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "qNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.recommendedSysctlSettings",
                "option_description": "<rendered-html><p>Enables various settings to avoid common pitfalls when running\ncontainers requiring many file operations. Fixes errors like \u201cToo many\nopen files\u201d or \u201cneighbour: ndisc_cache: neighbor table overflow!\u201d. See\n<a\nhref=\"https://lxd.readthedocs.io/en/latest/production-setup/\">https://lxd.readthedocs.io/en/latest/production-setup/</a>\nfor details.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "qdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.startTimeout",
                "option_description": "<rendered-html><p>Time to wait (in seconds) for LXD to become ready to process\nrequests. If LXD does not reply within the configured time, lxd.service\nwill be considered failed and systemd will attempt to restart it.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "600",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "qtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.ui.enable",
                "option_description": "<rendered-html><p>Whether to enable (experimental) LXD UI.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "q9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.ui.package",
                "option_description": "<rendered-html><p>The lxd-ui package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.lxd-ui",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "rNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/lxd.nix",
                "option_name": "virtualisation.lxd.zfsSupport",
                "option_description": "<rendered-html><p>Enables lxd to use zfs as a storage for containers.</p>\n<p>This option is enabled by default if a zfs pool is configured with\nnixos.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "config.boot.zfs.enabled",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "rdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.memorySize",
                "option_description": "<rendered-html><p>The memory size in megabytes of the virtual machine.</p>\n</rendered-html>",
                "option_type": "positive integer, meaning >0",
                "option_default": "1024",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "rtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.mountHostNixStore",
                "option_description": "<rendered-html><p>Mount the host Nix store as a 9p mount.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "!cfg.useNixStoreImage && !cfg.useBootLoader",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "r9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.msize",
                "option_description": "<rendered-html><p>The msize (maximum packet size) option passed to 9p file systems, in\nbytes. Increasing this should increase performance significantly, at the\ncost of higher RAM usage.</p>\n</rendered-html>",
                "option_type": "positive integer, meaning >0",
                "option_default": "16384",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "sNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/multipass.nix",
                "option_name": "virtualisation.multipass.enable",
                "option_description": "<rendered-html><p>Whether to enable Multipass, a simple manager for virtualised Ubuntu\ninstances.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "sdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/multipass.nix",
                "option_name": "virtualisation.multipass.logLevel",
                "option_description": "<rendered-html><p>The logging verbosity of the multipassd binary.</p>\n</rendered-html>",
                "option_type": "one of \"error\", \"warning\", \"info\", \"debug\", \"trace\"",
                "option_default": "\"debug\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "statzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/multipass.nix",
                "option_name": "virtualisation.multipass.package",
                "option_description": "<rendered-html><p>The multipass package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.multipass",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "s9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.backend",
                "option_description": "<rendered-html><p>The underlying Docker implementation to use.</p>\n</rendered-html>",
                "option_type": "one of \"podman\", \"docker\"",
                "option_default": "\"podman\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "tNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers",
                "option_description": "<rendered-html><p>OCI (Docker) containers to run as systemd services.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "tdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.autoStart",
                "option_description": "<rendered-html><p>When enabled, the container is automatically started on boot. If this\noption is set to false, the container has to be started on-demand via\nits service.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ttatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.cmd",
                "option_description": "<rendered-html><p>Commandline arguments to pass to the image\u2019s entrypoint.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\"--port=9000\"]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "t9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.dependsOn",
                "option_description": "<rendered-html><p>Define which other containers this one depends on. They will be added\nto both After and Requires for the unit.</p>\n<p>Use the same name as the attribute under\n<code>virtualisation.oci-containers.containers</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "virtualisation.oci-containers.containers = {\n  node1 = {};\n  node2 = {\n    dependsOn = [ \"node1\" ];\n  }\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "uNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.entrypoint",
                "option_description": "<rendered-html><p>Override the default entrypoint of the image.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/bin/my-app\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "udatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.environment",
                "option_description": "<rendered-html><p>Environment variables to set for this container.</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": "{\n  DATABASE_HOST = \"db.example.com\";\n  DATABASE_PORT = \"3306\";\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "utatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.environmentFiles",
                "option_description": "<rendered-html><p>Environment files for this container.</p>\n</rendered-html>",
                "option_type": "list of path",
                "option_default": "[ ]",
                "option_example": "[\n  /path/to/.env\n  /path/to/.env.secret\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "u9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.extraOptions",
                "option_description": "<rendered-html><p>Extra options for <code class=\"interpreted-text\"\nrole=\"command\">podman run</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\"--network=host\"]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "vNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.hostname",
                "option_description": "<rendered-html><p>The hostname of the container.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"hello-world\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "vdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.image",
                "option_description": "<rendered-html><p>OCI image to run.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": "\"library/hello-world\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "vtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.imageFile",
                "option_description": "<rendered-html><p>Path to an image file to load before running the image. This can be\nused to bypass pulling the image from the registry.</p>\n<p>The <code>image</code> attribute must match the name and tag of the\nimage contained in this file, as they will be used to run the container\nwith that image. If they do not match, the image will be pulled from the\nregistry as usual.</p>\n</rendered-html>",
                "option_type": "null or package",
                "option_default": "null",
                "option_example": "pkgs.dockerTools.buildImage {...};",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "v9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.labels",
                "option_description": "<rendered-html><p>Labels to attach to the container at runtime.</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": "{\n  \"traefik.https.routers.example.rule\" = \"Host(`example.container`)\";\n}\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "wNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.log-driver",
                "option_description": "<rendered-html><p>Logging driver for the container. The default of\n<code>\"journald\"</code> means that the container\u2019s logs will be handled\nas part of the systemd unit.</p>\n<p>For more details and a full list of logging drivers, refer to\nrespective backends documentation.</p>\n<p>For Docker: <a\nhref=\"https://docs.docker.com/engine/reference/run/#logging-drivers---log-driver\">Docker\nengine documentation</a></p>\n<p>For Podman: Refer to the docker-run(1) man page.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"journald\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "wdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.login.passwordFile",
                "option_description": "<rendered-html><p>Path to file containing password.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/etc/nixos/dockerhub-password.txt\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "wtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.login.registry",
                "option_description": "<rendered-html><p>Registry where to login to.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"https://docker.pkg.github.com\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "w9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.login.username",
                "option_description": "<rendered-html><p>Username for login.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "xNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.ports",
                "option_description": "<rendered-html><p>Network ports to publish from the container to the outer host.</p>\n<p>Valid formats:</p>\n<ul>\n<li><code>&lt;ip&gt;:&lt;hostPort&gt;:&lt;containerPort&gt;</code></li>\n<li><code>&lt;ip&gt;::&lt;containerPort&gt;</code></li>\n<li><code>&lt;hostPort&gt;:&lt;containerPort&gt;</code></li>\n<li><code>&lt;containerPort&gt;</code></li>\n</ul>\n<p>Both <code>hostPort</code> and <code>containerPort</code> can be\nspecified as a range of ports. When specifying ranges for both, the\nnumber of container ports in the range must match the number of host\nports in the range. Example: <code>1234-1236:1234-1236/tcp</code></p>\n<p>When specifying a range for <code>hostPort</code> only, the\n<code>containerPort</code> must <em>not</em> be a range. In this case,\nthe container port is published somewhere within the specified\n<code>hostPort</code> range. Example:\n<code>1234-1236:1234/tcp</code></p>\n<p>Refer to the <a\nhref=\"https://docs.docker.com/engine/reference/run/#expose-incoming-ports\">Docker\nengine documentation</a> for full details.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"8080:9000\"\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "xdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.preRunExtraOptions",
                "option_description": "<rendered-html><p>Extra options for <code class=\"interpreted-text\"\nrole=\"command\">podman</code> that go before the <code>run</code>\nargument.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"--runtime\"\n  \"runsc\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "xtatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.user",
                "option_description": "<rendered-html><p>Override the username or UID (and optionally groupname or GID) used\nin the container.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"nobody:nogroup\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "x9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.volumes",
                "option_description": "<rendered-html><p>List of volumes to attach to this container.</p>\n<p>Note that this is a list of <code>\"src:dst\"</code> strings to allow\nfor <code>src</code> to refer to <code>/nix/store</code> paths, which\nwould be difficult with an attribute set. There are also a variety of\nmount options available as a third field; please refer to the <a\nhref=\"https://docs.docker.com/engine/reference/run/#volume-shared-filesystems\">docker\nengine documentation</a> for details.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"volume_name:/path/inside/container\"\n  \"/path/on/host:/path/inside/container\"\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "yNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/oci-containers.nix",
                "option_name": "virtualisation.oci-containers.containers.<name>.workdir",
                "option_description": "<rendered-html><p>Override the default working directory for the container.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": "\"/var/lib/hello_world\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ydatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.autoPrune.dates",
                "option_description": "<rendered-html><p>Specification (in the format described by <a\nhref=\"https://www.freedesktop.org/software/systemd/man/systemd.time.html\"><code\nclass=\"interpreted-text\" role=\"manpage\">systemd.time(7)</code></a>) of\nthe time at which the prune will occur.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"weekly\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ytatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.autoPrune.enable",
                "option_description": "<rendered-html><p>Whether to periodically prune Podman resources. If enabled, a systemd\ntimer will run <code>podman system prune -f</code> as specified by the\n<code>dates</code> option.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "y9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.autoPrune.flags",
                "option_description": "<rendered-html><p>Any additional flags passed to <code class=\"interpreted-text\"\nrole=\"command\">podman system prune</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"--all\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "zNatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.defaultNetwork.settings",
                "option_description": "<rendered-html><p>Settings for podman\u2019s default network.</p>\n</rendered-html>",
                "option_type": "JSON value",
                "option_default": "{ }",
                "option_example": "{ dns_enabled = true; }",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "zdatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.dockerCompat",
                "option_description": "<rendered-html><p>Create an alias mapping <code class=\"interpreted-text\"\nrole=\"command\">docker</code> to <code class=\"interpreted-text\"\nrole=\"command\">podman</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ztatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.dockerSocket.enable",
                "option_description": "<rendered-html><p>Make the Podman socket available in place of the Docker socket, so\nDocker tools can find the Podman socket.</p>\n<p>Podman implements the Docker API.</p>\n<p>Users must be in the <code>podman</code> group in order to connect.\nAs with Docker, members of this group can gain root access.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "z9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.enable",
                "option_description": "<rendered-html><p>This option enables Podman, a daemonless container engine for\ndeveloping, managing, and running OCI Containers on your Linux\nSystem.</p>\n<p>It is a drop-in replacement for the <code class=\"interpreted-text\"\nrole=\"command\">docker</code> command.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "0NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.enableNvidia",
                "option_description": "<rendered-html><p><strong>Deprecated</strong>, please use\nvirtualisation.containers.cdi.dynamic.nvidia.enable instead.</p>\n<p>Enable use of NVidia GPUs from within podman containers.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "0datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/default.nix",
                "option_name": "virtualisation.podman.extraPackages",
                "option_description": "<rendered-html><p>Extra packages to be installed in the Podman wrapper.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "[\n  pkgs.gvisor\n]\n",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "0tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.enable",
                "option_description": "<rendered-html><p>Make the Podman and Docker compatibility API available over the\nnetwork with TLS client certificate authentication.</p>\n<p>This allows Docker clients to connect with the equivalents of the\nDocker CLI <code>-H</code> and <code>--tls*</code> family of\noptions.</p>\n<p>For certificate setup, see <a\nhref=\"https://docs.docker.com/engine/security/protect-access/\">https://docs.docker.com/engine/security/protect-access/</a></p>\n<p>This option is independent of <a\nhref=\"https://search.nixos.org/options?channel=unstable&amp;show=virtualisation.podman.dockerSocket.enable&amp;query=virtualisation.podman.dockerSocket.enable\">virtualisation.podman.dockerSocket.enable</a>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "09atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.listenAddress",
                "option_description": "<rendered-html><p>Interface address for receiving TLS connections.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"0.0.0.0\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "1NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.openFirewall",
                "option_description": "<rendered-html><p>Whether to open the port in the firewall.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "1datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.port",
                "option_description": "<rendered-html><p>TCP port number for receiving TLS connections.</p>\n</rendered-html>",
                "option_type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
                "option_default": "2376",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "1tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket-ghostunnel.nix",
                "option_name": "virtualisation.podman.networkSocket.server",
                "option_description": "<rendered-html><p>Choice of TLS proxy server.</p>\n</rendered-html>",
                "option_type": "value \"ghostunnel\" (singular enum)",
                "option_default": null,
                "option_example": "\"ghostunnel\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "19atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.tls.cacert",
                "option_description": "<rendered-html><p>Path to CA certificate to use for client authentication.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "2NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.tls.cert",
                "option_description": "<rendered-html><p>Path to certificate describing the server.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "2datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/podman/network-socket.nix",
                "option_name": "virtualisation.podman.networkSocket.tls.key",
                "option_description": "<rendered-html><p>Path to the private key corresponding to the server certificate.</p>\n<p>Use a string for this setting. Otherwise it will be copied to the Nix\nstore first, where it is readable by any system process.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "2tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.consoles",
                "option_description": "<rendered-html><p>The output console devices to pass to the kernel command line via the\n<code>console</code> parameter, the primary console is the last item of\nthis list.</p>\n<p>By default it enables both serial console and <code>tty0</code>. The\npreferred console (last one) is based on the value of <code\nclass=\"interpreted-text\"\nrole=\"option\">virtualisation.graphics</code>.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[\n  \"ttyS0,115200n8\"\n  \"tty0\"\n]",
                "option_example": "[\n  \"console=tty1\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "29atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.diskInterface",
                "option_description": "<rendered-html><p>The interface used for the virtual hard disks.</p>\n</rendered-html>",
                "option_type": "one of \"virtio\", \"scsi\", \"ide\"",
                "option_default": "\"virtio\"",
                "option_example": "\"scsi\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "3NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.drives",
                "option_description": "<rendered-html><p>Drives passed to qemu.</p>\n</rendered-html>",
                "option_type": "list of (submodule)",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "3datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.drives.*.deviceExtraOpts",
                "option_description": "<rendered-html><p>Extra options passed to device flag.</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "3tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.drives.*.driveExtraOpts",
                "option_description": "<rendered-html><p>Extra options passed to drive flag.</p>\n</rendered-html>",
                "option_type": "attribute set of string",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "39atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.drives.*.file",
                "option_description": "<rendered-html><p>The file image used for this drive.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "4NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.drives.*.name",
                "option_description": "<rendered-html><p>A name for the drive. Must be unique in the drives list. Not passed\nto qemu.</p>\n</rendered-html>",
                "option_type": "null or string",
                "option_default": "null",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "4datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.guestAgent.enable",
                "option_description": "<rendered-html><p>Enable the Qemu guest agent.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "4tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.networkingOptions",
                "option_description": "<rendered-html><p>Networking-related command-line options that should be passed to\nqemu. The default is to use userspace networking (SLiRP). See the <a\nhref=\"https://wiki.qemu.org/Documentation/Networking\">QEMU Wiki on\nNetworking</a> for details.</p>\n<p>If you override this option, be advised to keep\n<code>${QEMU_NET_OPTS:+,$QEMU_NET_OPTS}</code> (as seen in the example)\nto keep the default runtime behaviour.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"-net nic,netdev=user.0,model=virtio\"\n  \"-netdev user,id=user.0,\\${QEMU_NET_OPTS:+,$QEMU_NET_OPTS}\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "49atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.options",
                "option_description": "<rendered-html><p>Options passed to QEMU. See <a\nhref=\"https://www.qemu.org/docs/master/system/qemu-manpage\">QEMU User\nDocumentation</a> for a complete list.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": "[\n  \"-vga std\"\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "5NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.package",
                "option_description": "<rendered-html><p>QEMU package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "if hostPkgs.stdenv.hostPlatform.qemuArch == pkgs.stdenv.hostPlatform.qemuArch then config.virtualisation.host.pkgs.qemu_kvm else config.virtualisation.host.pkgs.qemu",
                "option_example": "pkgs.qemu_test",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "5datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.qemu.virtioKeyboard",
                "option_description": "<rendered-html><p>Enable the virtio-keyboard device.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "5tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.resolution",
                "option_description": "<rendered-html><p>The resolution of the virtual machine display.</p>\n</rendered-html>",
                "option_type": "attribute set",
                "option_default": "{\n  x = 1024;\n  y = 768;\n}",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "59atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.restrictNetwork",
                "option_description": "<rendered-html><p>If this option is enabled, the guest will be isolated, i.e. it will\nnot be able to contact the host and no guest IP packets will be routed\nover the host to the outside. This option does not affect any explicitly\nset forwarding rules.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "6NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.rootDevice",
                "option_description": "<rendered-html><p>The path (inside the VM) to the device containing the root\nfilesystem.</p>\n</rendered-html>",
                "option_type": "null or path",
                "option_default": "/dev/disk/by-label/nixos",
                "option_example": "\"/dev/disk/by-label/nixos\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "6datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/rosetta.nix",
                "option_name": "virtualisation.rosetta.enable",
                "option_description": "<rendered-html><p>Whether to enable <a\nhref=\"https://developer.apple.com/documentation/apple-silicon/about-the-rosetta-translation-environment\">Rosetta</a>\nsupport.</p>\n<p>This feature requires the system to be a virtualised guest on an\nApple silicon host.</p>\n<p>The default settings are suitable for the <a\nhref=\"https://docs.getutm.app/\">UTM</a> virtualisation <a\nhref=\"https://search.nixos.org/packages?channel=unstable&amp;show=utm&amp;from=0&amp;size=1&amp;sort=relevance&amp;type=packages&amp;query=utm\">package</a>.\nMake sure to select \u2018Apple Virtualization\u2019 as the virtualisation engine\nand then tick the \u2018Enable Rosetta\u2019 option.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "6tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/rosetta.nix",
                "option_name": "virtualisation.rosetta.mountTag",
                "option_description": "<rendered-html><p>The VirtioFS mount tag for the Rosetta runtime, exposed by the host\u2019s\nvirtualisation software.</p>\n<p>If supported, your virtualisation software should provide\ninstructions on how register the Rosetta runtime inside Linux guests.\nThese instructions should mention the name of the mount tag used for the\nVirtioFS directory share that contains the Rosetta runtime.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"rosetta\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "69atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.sharedDirectories",
                "option_description": "<rendered-html><p>An attributes set of directories that will be shared with the virtual\nmachine using VirtFS (9P filesystem over VirtIO). The attribute name\nwill be used as the 9P mount tag.</p>\n</rendered-html>",
                "option_type": "attribute set of (submodule)",
                "option_default": "{ }",
                "option_example": "{\n  my-share = {\n    source = \"/path/to/be/shared\";\n    target = \"/mnt/shared\";\n  };\n}",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "7NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.sharedDirectories.<name>.securityModel",
                "option_description": "<rendered-html><p>The security model to use for this share:</p>\n<ul>\n<li><code>passthrough</code>: files are stored using the same\ncredentials as they are created on the guest (this requires QEMU to run\nas root)</li>\n<li><code>mapped-xattr</code>: some of the file attributes like uid,\ngid, mode bits and link target are stored as file attributes</li>\n<li><code>mapped-file</code>: the attributes are stored in the hidden\n.virtfs_metadata directory. Directories exported by this security model\ncannot interact with other unix tools</li>\n<li><code>none</code>: same as \u201cpassthrough\u201d except the sever won\u2019t\nreport failures if it fails to set file attributes like ownership</li>\n</ul>\n</rendered-html>",
                "option_type": "one of \"passthrough\", \"mapped-xattr\", \"mapped-file\", \"none\"",
                "option_default": "\"mapped-xattr\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "7datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.sharedDirectories.<name>.source",
                "option_description": "<rendered-html><p>The path of the directory to share, can be a shell variable</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "7tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.sharedDirectories.<name>.target",
                "option_description": "<rendered-html><p>The mount point of the directory inside the virtual machine</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "79atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/spice-usb-redirection.nix",
                "option_name": "virtualisation.spiceUSBRedirection.enable",
                "option_description": "<rendered-html><p>Install the SPICE USB redirection helper with setuid privileges. This\nallows unprivileged users to pass USB devices connected to this machine\nto libvirt VMs, both local and remote. Note that this allows users\narbitrary access to USB devices.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "8NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.tpm.deviceModel",
                "option_description": "<rendered-html><p>QEMU device model for the TPM, uses the appropriate default based on\nth guest platform system and the package passed.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "''\n  Based on the guest platform Linux system:\n  \n  - `tpm-tis` for (i686, x86_64)\n  - `tpm-spapr` for ppc64\n  - `tpm-tis-device` for (armv7, aarch64)\n''",
                "option_example": "\"tpm-tis-device\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "8datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.tpm.enable",
                "option_description": "<rendered-html><p>Whether to enable a TPM device in the virtual machine with a driver,\nusing swtpm.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "8tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.tpm.package",
                "option_description": "<rendered-html><p>The swtpm package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.swtpm",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "89atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.useBootLoader",
                "option_description": "<rendered-html><p>Use a boot loader to boot the system. This allows, among other\nthings, testing the boot loader.</p>\n<p>If disabled, the kernel and initrd are directly booted, forgoing any\nbootloader.</p>\n<p>Check the documentation on <code class=\"interpreted-text\"\nrole=\"option\">virtualisation.directBoot.enable</code> for details.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "9NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.useDefaultFilesystems",
                "option_description": "<rendered-html><p>If enabled, the boot disk of the virtual machine will be formatted\nand mounted with the default filesystems for testing. Swap devices and\nLUKS will be disabled.</p>\n<p>If disabled, a root filesystem has to be specified and formatted (for\nexample in the initial ramdisk).</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "9datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.useEFIBoot",
                "option_description": "<rendered-html><p>If enabled, the virtual machine will provide a EFI boot manager.\nuseEFIBoot is ignored if useBootLoader == false.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "9tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.useHostCerts",
                "option_description": "<rendered-html><p>If enabled, when <code>NIX_SSL_CERT_FILE</code> is set on the host,\npass the CA certificates from the host to the VM.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "99atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.useNixStoreImage",
                "option_description": "<rendered-html><p>Build and use a disk image for the Nix store, instead of accessing\nthe host\u2019s one through 9p.</p>\n<p>For applications which do a lot of reads from the store, this can\ndrastically improve performance, but at the cost of disk space and image\nbuild time.</p>\n<p>As an alternative, you can use a bootloader which will provide you\nwith a full NixOS system image containing a Nix store and avoid mounting\nthe host nix store through <code class=\"interpreted-text\"\nrole=\"option\">virtualisation.mountHostNixStore</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.useSecureBoot",
                "option_description": "<rendered-html><p>Enable Secure Boot support in the EFI firmware.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-guest.nix",
                "option_name": "virtualisation.virtualbox.guest.clipboard",
                "option_description": "<rendered-html><p>Whether to enable clipboard support.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-guest.nix",
                "option_name": "virtualisation.virtualbox.guest.dragAndDrop",
                "option_description": "<rendered-html><p>Whether to enable drag and drop support.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "-9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-guest.nix",
                "option_name": "virtualisation.virtualbox.guest.enable",
                "option_description": "<rendered-html><p>Whether to enable the VirtualBox service and other guest\nadditions.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_NatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-guest.nix",
                "option_name": "virtualisation.virtualbox.guest.seamless",
                "option_description": "<rendered-html><p>Whether to enable seamless mode. When activated windows from the\nguest appear next to the windows of the host.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_datzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.addNetworkInterface",
                "option_description": "<rendered-html><p>Automatically set up a vboxnet0 host-only network interface.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_tatzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.enable",
                "option_description": "<rendered-html><p>Whether to enable VirtualBox.</p>\n<div class=\"note\">\n<p>In order to pass USB devices from the host to the guests, the user\nneeds to be in the <code>vboxusers</code> group.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "_9atzZABYW7nGSBMuLQk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.enableExtensionPack",
                "option_description": "<rendered-html><p>Whether to install the Oracle Extension Pack for VirtualBox.</p>\n<div class=\"important\">\n<p>You must set <code>nixpkgs.config.allowUnfree = true</code> in order\nto use this. This requires you accept the VirtualBox PUEL.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ANatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.enableHardening",
                "option_description": "<rendered-html><p>Enable hardened VirtualBox, which ensures that only the binaries in\nthe system path get access to the devices exposed by the kernel modules\ninstead of all users in the vboxusers group.</p>\n<div class=\"important\">\n<p>Disabling this can put your system\u2019s security at risk, as local users\nin the vboxusers group can tamper with the VirtualBox device files.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "AdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.enableKvm",
                "option_description": "<rendered-html><p>Enable KVM support for VirtualBox. This increases compatibility with\nLinux kernel versions, because the VirtualBox kernel modules are not\nrequired.</p>\n<p>This option is incompatible with\n<code>addNetworkInterface</code>.</p>\n<p>Note: This is experimental. Please check <a\nhref=\"https://github.com/cyberus-technology/virtualbox-kvm/issues\">https://github.com/cyberus-technology/virtualbox-kvm/issues</a>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "AtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.enableWebService",
                "option_description": "<rendered-html><p>Build VirtualBox web service tool (vboxwebsrv) to allow managing VMs\nvia other webpage frontend tools. Useful for headless servers.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "A9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.headless",
                "option_description": "<rendered-html><p>Use VirtualBox installation without GUI and Qt dependency. Useful to\nenable on servers and when virtual machines are controlled only via\nSSH.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "BNatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/virtualbox-host.nix",
                "option_name": "virtualisation.virtualbox.host.package",
                "option_description": "<rendered-html><p>The virtualbox package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.virtualbox",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "BdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.vlans",
                "option_description": "<rendered-html><p>Virtual networks to which the VM is connected. Each number \u00abN\u00bb in\nthis list causes the VM to have a virtual Ethernet interface attached to\na separate virtual network on which it will be assigned IP address\n<code>192.168.\u00abN\u00bb.\u00abM\u00bb</code>, where \u00abM\u00bb is the index of this VM in the\nlist of VMs.</p>\n</rendered-html>",
                "option_type": "list of (unsigned integer, meaning >=0)",
                "option_default": "if config.virtualisation.interfaces == {} then [ 1 ] else [ ]",
                "option_example": "[\n  1\n  2\n]",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "BtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/build-vm.nix",
                "option_name": "virtualisation.vmVariant",
                "option_description": "<rendered-html><p>Machine configuration to be added for the vm script produced by\n<code>nixos-rebuild build-vm</code>.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "B9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/build-vm.nix",
                "option_name": "virtualisation.vmVariantWithBootLoader",
                "option_description": "<rendered-html><p>Machine configuration to be added for the vm script produced by\n<code>nixos-rebuild build-vm-with-bootloader</code>.</p>\n</rendered-html>",
                "option_type": "submodule",
                "option_default": "{ }",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "CNatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/vmware-guest.nix",
                "option_name": "virtualisation.vmware.guest.enable",
                "option_description": "<rendered-html><p>Whether to enable VMWare Guest Support.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "CdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/vmware-guest.nix",
                "option_name": "virtualisation.vmware.guest.headless",
                "option_description": "<rendered-html><p>Whether to disable X11-related features.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "\"!config.services.xserver.enable\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "CtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/vmware-host.nix",
                "option_name": "virtualisation.vmware.host.enable",
                "option_description": "<rendered-html><p>This enables VMware host virtualisation for running VMs.</p>\n<div class=\"important\">\n<p><code>vmware-vmx</code> will cause kcompactd0 due to\n<code>Transparent Hugepages</code> feature in kernel. Apply\n<code>[ \"transparent_hugepage=never\" ]</code> in option <code\nclass=\"interpreted-text\" role=\"option\">boot.kernelParams</code> to\ndisable them.</p>\n</div>\n<div class=\"note\">\n<p>If that didn\u2019t work disable <code>TRANSPARENT_HUGEPAGE</code>,\n<code>COMPACTION</code> configs and recompile kernel.</p>\n</div>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "C9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/vmware-host.nix",
                "option_name": "virtualisation.vmware.host.extraConfig",
                "option_description": "<rendered-html><p>Add extra config to /etc/vmware/config</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": "''\n  # Allow unsupported device's OpenGL and Vulkan acceleration for guest vGPU\n  mks.gl.allowUnsupportedDrivers = \"TRUE\"\n  mks.vk.allowUnsupportedDevices = \"TRUE\"\n''",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "DNatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/vmware-host.nix",
                "option_name": "virtualisation.vmware.host.extraPackages",
                "option_description": "<rendered-html><p>Extra packages to be used with VMware host.</p>\n</rendered-html>",
                "option_type": "list of package",
                "option_default": "[ ]",
                "option_example": "\"with pkgs; [ ntfs3g ]\"",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "DdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/vmware-host.nix",
                "option_name": "virtualisation.vmware.host.package",
                "option_description": "<rendered-html><p>The vmware-workstation package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.vmware-workstation",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "DtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/openvswitch.nix",
                "option_name": "virtualisation.vswitch.enable",
                "option_description": "<rendered-html><p>Whether to enable Open vSwitch. A configuration daemon (ovs-server)\nwill be started.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "D9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/openvswitch.nix",
                "option_name": "virtualisation.vswitch.package",
                "option_description": "<rendered-html><p>The openvswitch package to use.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.openvswitch",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "ENatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/openvswitch.nix",
                "option_name": "virtualisation.vswitch.resetOnStart",
                "option_description": "<rendered-html><p>Whether to reset the Open vSwitch configuration database to a default\nconfiguration on every start of the systemd\n<code>ovsdb.service</code>.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/waydroid.nix",
                "option_name": "virtualisation.waydroid.enable",
                "option_description": "<rendered-html><p>Whether to enable Waydroid.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "EtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.writableStore",
                "option_description": "<rendered-html><p>If enabled, the Nix store in the VM is made writable by layering an\noverlay filesystem on top of the host\u2019s Nix store.</p>\n<p>By default, this is enabled if you mount a host Nix store.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "cfg.mountHostNixStore",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "E9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/qemu-vm.nix",
                "option_name": "virtualisation.writableStoreUseTmpfs",
                "option_description": "<rendered-html><p>Use a tmpfs for the writable store instead of writing to the VM\u2019s own\nfilesystem.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "true",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FNatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.bootParams",
                "option_description": "<rendered-html><p>Parameters passed to the Xen hypervisor at boot time.</p>\n</rendered-html>",
                "option_type": "list of string",
                "option_default": "[ ]",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.bridge.address",
                "option_description": "<rendered-html><p>IPv4 address of the bridge.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"172.16.0.1\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "FtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.bridge.forwardDns",
                "option_description": "<rendered-html><p>If set to <code>true</code>, the DNS queries from the hosts connected\nto the bridge will be forwarded to the DNS servers specified in\n/etc/resolv.conf .</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "F9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.bridge.name",
                "option_description": "<rendered-html><p>Name of bridge the Xen domUs connect to.</p>\n</rendered-html>",
                "option_type": "string",
                "option_default": "\"xenbr0\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GNatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.bridge.prefixLength",
                "option_description": "<rendered-html><p>Subnet mask of the bridge interface, specified as the number of bits\nin the prefix (<code>24</code>). A DHCP server will provide IP addresses\nfor the whole, remaining subnet.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "16",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.domain0MemorySize",
                "option_description": "<rendered-html><p>Amount of memory (in MiB) allocated to Domain 0 on boot. If set to 0,\nall memory is assigned to Domain 0.</p>\n</rendered-html>",
                "option_type": "signed integer",
                "option_default": "0",
                "option_example": "512",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "GtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.domains.extraConfig",
                "option_description": "<rendered-html><p>Options defined here will override the defaults for xendomains. The\ndefault options can be seen in the file included from\n/etc/default/xendomains.</p>\n</rendered-html>",
                "option_type": "strings concatenated with \"\\n\"",
                "option_default": "\"\"",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "G9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.enable",
                "option_description": "<rendered-html><p>Setting this option enables the Xen hypervisor, a virtualisation\ntechnology that allows multiple virtual machines, known as\n<em>domains</em>, to run concurrently on the physical machine. NixOS\nruns as the privileged <em>Domain 0</em>. This option requires a reboot\nto take effect.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HNatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.package",
                "option_description": "<rendered-html><p>The package used for Xen binary.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.xen",
                "option_example": "pkgs.xen-light",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HdatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.package-qemu",
                "option_description": "<rendered-html><p>The package with qemu binaries for dom0 qemu and xendomains.</p>\n</rendered-html>",
                "option_type": "package",
                "option_default": "pkgs.xen",
                "option_example": "pkgs.qemu_xen-light",
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "HtatzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.stored",
                "option_description": "<rendered-html><p>Xen Store daemon to use. Defaults to oxenstored of the xen\npackage.</p>\n</rendered-html>",
                "option_type": "path",
                "option_default": null,
                "option_example": null,
                "option_flake": null
            }
        },
        {
            "_index": "nixos-42-unstable-1d9c2c9b3e71b9ee663d11c5d298727dace8d374",
            "_type": "_doc",
            "_id": "H9atzZABYW7nGSBMuLUk",
            "_score": 1.0,
            "_source": {
                "type": "option",
                "option_source": "nixos/modules/virtualisation/xen-dom0.nix",
                "option_name": "virtualisation.xen.trace",
                "option_description": "<rendered-html><p>Whether to enable Xen tracing.</p>\n</rendered-html>",
                "option_type": "boolean",
                "option_default": "false",
                "option_example": "true",
                "option_flake": null
            }
        }
    ]
}