{
    "name": "Mastodon",
    "desc": "Self-hosted, globally interconnected microblogging software based on ActivityPub",
    "tags": [
        "Communication - Social Networks and Forums"
    ],
    "website": "https://joinmastodon.org",
    "logo": "https://joinmastodon.org/_next/static/media/favicon-32x32.3a702fe9.png",
    "specs": {
        "ram": 2048,
        "storage": 0
    },
    "nixName": "mastodon",
    "options": [
        {
            "name": "automaticMigrations",
            "desc": "Do automatic database migrations.",
            "nixName": "automaticMigrations",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "configureNginx",
            "desc": "Configure nginx as a reverse proxy for mastodon. Note that this makessome assumptions on your setup, and sets settings that will affect othervirtualHosts running on your nginx instance, if any. Alternatively youcan configure a reverse-proxy of your choice to serve these paths:   / -> $(nix-instantiate --eval '<nixpkgs>' -A mastodon.outPath)/public    / -> 127.0.0.1:{{ webPort }}  (If there was no file inthe directory above.)   /system/ -> /var/lib/mastodon/public-system/    /api/v1/streaming/ -> 127.0.0.1:{{ streamingPort }}   Make sure that websockets are forwarded properly. You might want toset up caching of some requests. Take a look at mastodon\u2019s providednginx configuration at https://github.com/mastodon/mastodon/blob/master/dist/nginx.conf .",
            "nixName": "configureNginx",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "database.createLocally",
            "desc": "Configure local PostgreSQL database server for Mastodon.",
            "nixName": "database.createLocally",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "database.host",
            "desc": "Database host address or unix socket.",
            "nixName": "database.host",
            "type": "string",
            "value": "\"/run/postgresql\""
        },
        {
            "name": "database.name",
            "desc": "Database name.",
            "nixName": "database.name",
            "type": "string",
            "value": "\"mastodon\""
        },
        {
            "name": "database.passwordFile",
            "desc": "A file containing the password corresponding to  database.user .",
            "nixName": "database.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "database.port",
            "desc": "Database host port.",
            "nixName": "database.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "if config.services.mastodon.database.createLocally\nthen null\nelse 5432\n"
        },
        {
            "name": "database.user",
            "desc": "Database user.",
            "nixName": "database.user",
            "type": "string",
            "value": "\"mastodon\""
        },
        {
            "name": "elasticsearch.host",
            "desc": "Elasticsearch host. If it is not null, Elasticsearch full text searchwill be enabled.",
            "nixName": "elasticsearch.host",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "elasticsearch.passwordFile",
            "desc": "Path to file containing password for optionally authenticating withElasticsearch.",
            "nixName": "elasticsearch.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "elasticsearch.port",
            "desc": "Elasticsearch port.",
            "nixName": "elasticsearch.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9200"
        },
        {
            "name": "elasticsearch.preset",
            "desc": "It controls the ElasticSearch indices configuration (number of shardsand replica).",
            "nixName": "elasticsearch.preset",
            "type": "one of \"single_node_cluster\", \"small_cluster\", \"large_cluster\"",
            "value": "\"single_node_cluster\""
        },
        {
            "name": "elasticsearch.user",
            "desc": "Used for optionally authenticating with Elasticsearch.",
            "nixName": "elasticsearch.user",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "enable",
            "desc": "Whether to enable Mastodon, a federated social network server.",
            "nixName": "enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "enableUnixSocket",
            "desc": "Instead of binding to an IP address like 127.0.0.1, you may bind to aUnix socket. This variable is process-specific, e.g. you need differentvalues for every process, and it works for both web (Puma) processes andstreaming API (Node.js) processes.",
            "nixName": "enableUnixSocket",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "extraConfig",
            "desc": "Extra environment variables to pass to all mastodon services.",
            "nixName": "extraConfig",
            "type": "attribute set",
            "value": "{ }"
        },
        {
            "name": "extraEnvFiles",
            "desc": "Extra environment files to pass to all mastodon services. Useful forpassing down environmental secrets.",
            "nixName": "extraEnvFiles",
            "type": "list of path",
            "value": "[ ]"
        },
        {
            "name": "group",
            "desc": "Group under which mastodon runs.",
            "nixName": "group",
            "type": "string",
            "value": "\"mastodon\""
        },
        {
            "name": "localDomain",
            "desc": "The domain serving your Mastodon instance.",
            "nixName": "localDomain",
            "type": "string",
            "value": null
        },
        {
            "name": "mediaAutoRemove.enable",
            "desc": "Automatically remove remote media attachments and preview cards olderthan the configured amount of days.  Recommended in  https://docs.joinmastodon.org/admin/setup/ .",
            "nixName": "mediaAutoRemove.enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "mediaAutoRemove.olderThanDays",
            "desc": "How old remote media needs to be in order to be removed.",
            "nixName": "mediaAutoRemove.olderThanDays",
            "type": "signed integer",
            "value": "30"
        },
        {
            "name": "mediaAutoRemove.startAt",
            "desc": "How often to remove remote media.  The format is described in   systemd.time(7)  .",
            "nixName": "mediaAutoRemove.startAt",
            "type": "string",
            "value": "\"daily\""
        },
        {
            "name": "otpSecretFile",
            "desc": "Path to file containing the OTP secret. A new OTP secret can begenerated by running:   nix build -f '<nixpkgs>' mastodon; cd result; bin/rake secret   If this file does not exist, it will be created with a new OTPsecret.",
            "nixName": "otpSecretFile",
            "type": "string",
            "value": "\"/var/lib/mastodon/secrets/otp-secret\""
        },
        {
            "name": "package",
            "desc": "Mastodon package to use.",
            "nixName": "package",
            "type": "package",
            "value": "pkgs.mastodon"
        },
        {
            "name": "redis.createLocally",
            "desc": "Configure local Redis server for Mastodon.",
            "nixName": "redis.createLocally",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "redis.enableUnixSocket",
            "desc": "Use Unix socket",
            "nixName": "redis.enableUnixSocket",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "redis.host",
            "desc": "Redis host.",
            "nixName": "redis.host",
            "type": "null or string",
            "value": "if config.services.mastodon.redis.createLocally && !config.services.mastodon.redis.enableUnixSocket then \"127.0.0.1\" else null\n"
        },
        {
            "name": "redis.passwordFile",
            "desc": "A file containing the password for Redis database.",
            "nixName": "redis.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "redis.port",
            "desc": "Redis port.",
            "nixName": "redis.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "if config.services.mastodon.redis.createLocally && !config.services.mastodon.redis.enableUnixSocket then 31637 else null\n"
        },
        {
            "name": "secretKeyBaseFile",
            "desc": "Path to file containing the secret key base. A new secret key basecan be generated by running:   nix build -f '<nixpkgs>' mastodon; cd result; bin/rake secret   If this file does not exist, it will be created with a new secret keybase.",
            "nixName": "secretKeyBaseFile",
            "type": "string",
            "value": "\"/var/lib/mastodon/secrets/secret-key-base\""
        },
        {
            "name": "sidekiqPort",
            "desc": "TCP port used by the mastodon-sidekiq service.",
            "nixName": "sidekiqPort",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "55002"
        },
        {
            "name": "sidekiqProcesses",
            "desc": "How many Sidekiq processes should be used to handle background jobs,and which job classes they handle.  Read the  upstreamdocumentation  before configuring this!",
            "nixName": "sidekiqProcesses",
            "type": "attribute set of (submodule)",
            "value": "{\n  all = {\n    jobClasses = [ ];\n    threads = null;\n  };\n}"
        },
        {
            "name": "sidekiqProcesses.<name>.jobClasses",
            "desc": "If not empty, which job classes should be executed by this process. Only one process should handle the \u2018scheduler\u2019 class. If left empty,this process will handle the \u2018scheduler\u2019 class.",
            "nixName": "sidekiqProcesses.<name>.jobClasses",
            "type": "list of (one of \"default\", \"push\", \"pull\", \"mailers\", \"scheduler\", \"ingress\")",
            "value": null
        },
        {
            "name": "sidekiqProcesses.<name>.threads",
            "desc": "Number of threads this process should use for executing jobs. Ifnull, the configured  sidekiqThreads  are used.",
            "nixName": "sidekiqProcesses.<name>.threads",
            "type": "null or signed integer",
            "value": null
        },
        {
            "name": "sidekiqThreads",
            "desc": "Worker threads used by the mastodon-sidekiq-all service. If sidekiqProcesses  is configured and any processes specifynull  threads , this value is used.",
            "nixName": "sidekiqThreads",
            "type": "signed integer",
            "value": "25"
        },
        {
            "name": "smtp.authenticate",
            "desc": "Authenticate with the SMTP server using username and password.",
            "nixName": "smtp.authenticate",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "smtp.createLocally",
            "desc": "Configure local Postfix SMTP server for Mastodon.",
            "nixName": "smtp.createLocally",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "smtp.fromAddress",
            "desc": "\u201cFrom\u201d address used when sending Emails to users.",
            "nixName": "smtp.fromAddress",
            "type": "string",
            "value": null
        },
        {
            "name": "smtp.host",
            "desc": "SMTP host used when sending emails to users.",
            "nixName": "smtp.host",
            "type": "string",
            "value": "\"127.0.0.1\""
        },
        {
            "name": "smtp.passwordFile",
            "desc": "Path to file containing the SMTP password.",
            "nixName": "smtp.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "smtp.port",
            "desc": "SMTP port used when sending emails to users.",
            "nixName": "smtp.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "25"
        },
        {
            "name": "smtp.user",
            "desc": "SMTP login name.",
            "nixName": "smtp.user",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "streamingProcesses",
            "desc": "Number of processes used by the mastodon-streaming service. Pleasedefine this explicitly, recommended is the amount of your CPU coresminus one.",
            "nixName": "streamingProcesses",
            "type": "positive integer, meaning >0",
            "value": null
        },
        {
            "name": "trustedProxy",
            "desc": "You need to set it to the IP from which your reverse proxy sendsrequests to Mastodon\u2019s web process, otherwise Mastodon will record thereverse proxy\u2019s own IP as the IP of all requests, which would be badbecause IP addresses are used for important rate limits and securityfunctions.",
            "nixName": "trustedProxy",
            "type": "string",
            "value": "\"127.0.0.1\""
        },
        {
            "name": "user",
            "desc": "User under which mastodon runs. If it is set to \u201cmastodon\u201d, that userwill be created, otherwise it should be set to the name of a usercreated elsewhere. In both cases, the  mastodon  package willbe added to the user\u2019s package set and a tootctl wrapper to systempackages that switches to the configured account and load the rightenvironment.",
            "nixName": "user",
            "type": "string",
            "value": "\"mastodon\""
        },
        {
            "name": "vapidPrivateKeyFile",
            "desc": "Path to file containing the private key used for Web Push VoluntaryApplication Server Identification. A new keypair can be generated byrunning:   nix build -f '<nixpkgs>' mastodon; cd result; bin/rake webpush:generate_keys   If this file does not exist, it will be created with a new privatekey.",
            "nixName": "vapidPrivateKeyFile",
            "type": "string",
            "value": "\"/var/lib/mastodon/secrets/vapid-private-key\""
        },
        {
            "name": "vapidPublicKeyFile",
            "desc": "Path to file containing the public key used for Web Push VoluntaryApplication Server Identification. A new keypair can be generated byrunning:   nix build -f '<nixpkgs>' mastodon; cd result; bin/rake webpush:generate_keys   If  mastodon.vapidPrivateKeyFile does not exist, it andthis file will be created with a new keypair.",
            "nixName": "vapidPublicKeyFile",
            "type": "string",
            "value": "\"/var/lib/mastodon/secrets/vapid-public-key\""
        },
        {
            "name": "webPort",
            "desc": "TCP port used by the mastodon-web service.",
            "nixName": "webPort",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "55001"
        },
        {
            "name": "webProcesses",
            "desc": "Processes used by the mastodon-web service.",
            "nixName": "webProcesses",
            "type": "signed integer",
            "value": "2"
        },
        {
            "name": "webThreads",
            "desc": "Threads per process used by the mastodon-web service.",
            "nixName": "webThreads",
            "type": "signed integer",
            "value": "5"
        }
    ],
    "show": false,
    "tested": false
}