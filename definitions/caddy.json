{
    "name": "Caddy",
    "desc": "Fast and extensible multi-platform HTTP/1-2-3 web server with automatic HTTPS",
    "tags": [
        "Web Servers"
    ],
    "website": "https://caddyserver.com",
    "logo": "https://caddyserver.com/resources/images/favicon.png?v=50fb678",
    "specs": {
        "ram": 0,
        "storage": 0
    },
    "nixName": "caddy",
    "options": [
        {
            "name": "acmeCA",
            "desc": "Sets the   acme_ca option  in the global options block of the resulting Caddyfile.   The URL to the ACME CA\u2019s directory. It is strongly recommended to setthis to https://acme-staging-v02.api.letsencrypt.org/directory  forLet\u2019s Encrypt\u2019s  stagingendpoint  while testing or in development.  Value  null  should be prefered for production setups, asit omits the  acme_ca  option to enable  automaticissuer fallback .",
            "nixName": "acmeCA",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "adapter",
            "desc": "Name of the config adapter to use. See  https://caddyserver.com/docs/config-adapters for the full list.  If  null  is specified, the  --adapter argument is omitted when starting or restarting Caddy. Notably, thisallows specification of a configuration file in Caddy\u2019s native JSONformat, as long as the filename does not start with Caddyfile  (in which case the  caddyfile  adapteris implicitly enabled). See  https://caddyserver.com/docs/command-line#caddy-run for details.   Any value other than  null  or  caddyfile  isonly valid when providing your own  configFile .",
            "nixName": "adapter",
            "type": "null or string",
            "value": "if ((cfg.configFile != configFile) || (builtins.baseNameOf cfg.configFile) == \"Caddyfile\") then \"caddyfile\" else null\n"
        },
        {
            "name": "configFile",
            "desc": "Override the configuration file used by Caddy. By default, NixOSgenerates one automatically.  The configuration file is exposed at  /etc/caddy/caddy_config .",
            "nixName": "configFile",
            "type": "path",
            "value": "\"A Caddyfile automatically generated by values from services.caddy.*\""
        },
        {
            "name": "dataDir",
            "desc": "The data directory for caddy.   If left as the default value this directory will automatically becreated before the Caddy server starts, otherwise you are responsiblefor ensuring the directory exists with appropriate ownership andpermissions.  Caddy v2 replaced  CADDYPATH  with XDG directories. See  https://caddyserver.com/docs/conventions#file-locations .",
            "nixName": "dataDir",
            "type": "path",
            "value": "\"/var/lib/caddy\""
        },
        {
            "name": "email",
            "desc": "Your email address. Mainly used when creating an ACME account withyour CA, and is highly recommended in case there are problems with yourcertificates.",
            "nixName": "email",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "enable",
            "desc": "Whether to enable Caddy web server.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "enableReload",
            "desc": "Reload Caddy instead of restarting it when configuration filechanges.  Note that enabling this option requires the  adminAPI  to not be turned off.  If you enable this option, consider setting   grace_period  to a non-infinite value in  services.caddy.globalConfig  to prevent Caddywaiting for active connections to finish, which could delay the reloadessentially indefinitely.",
            "nixName": "enableReload",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "extraConfig",
            "desc": "Additional lines of configuration appended to the automaticallygenerated  Caddyfile .",
            "nixName": "extraConfig",
            "type": "strings concatenated with \"\\n\"",
            "value": "\"\""
        },
        {
            "name": "globalConfig",
            "desc": "Additional lines of configuration appended to the global configsection of the  Caddyfile .  Refer to  https://caddyserver.com/docs/caddyfile/options#global-options for details on supported values.",
            "nixName": "globalConfig",
            "type": "strings concatenated with \"\\n\"",
            "value": "\"\""
        },
        {
            "name": "group",
            "desc": "Group account under which caddy runs.   If left as the default value this user will automatically be createdon system activation, otherwise you are responsible for ensuring theuser exists before the Caddy service starts.",
            "nixName": "group",
            "type": "string",
            "value": "\"caddy\""
        },
        {
            "name": "logDir",
            "desc": "Directory for storing Caddy access logs.   If left as the default value this directory will automatically becreated before the Caddy server starts, otherwise the sysadmin isresponsible for ensuring the directory exists with appropriate ownershipand permissions.",
            "nixName": "logDir",
            "type": "path",
            "value": "\"/var/log/caddy\""
        },
        {
            "name": "logFormat",
            "desc": "Configuration for the default logger. See  https://caddyserver.com/docs/caddyfile/options#log for details.",
            "nixName": "logFormat",
            "type": "strings concatenated with \"\\n\"",
            "value": "''\n  level ERROR\n''"
        },
        {
            "name": "package",
            "desc": "The caddy package to use.",
            "nixName": "package",
            "type": "package",
            "value": "pkgs.caddy"
        },
        {
            "name": "resume",
            "desc": "Use saved config, if any (and prefer over any specified configurationpassed with  --config ).",
            "nixName": "resume",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "settings",
            "desc": "Structured configuration for Caddy to generate a Caddy JSONconfiguration file. See  https://caddyserver.com/docs/json/ for available options.   Using a  Caddyfile  instead of aJSON config is highly recommended by upstream. There are only very fewexception to this.  Please use a Caddyfile via  services.caddy.configFile ,  services.caddy.virtualHosts  or  services.caddy.extraConfig with  services.caddy.globalConfig  instead.    Takes presence over most  services.caddy.*  options, suchas  services.caddy.configFile  and  services.caddy.virtualHosts , if specified.",
            "nixName": "settings",
            "type": "JSON value",
            "value": "{ }"
        },
        {
            "name": "user",
            "desc": "User account under which caddy runs.   If left as the default value this user will automatically be createdon system activation, otherwise you are responsible for ensuring theuser exists before the Caddy service starts.",
            "nixName": "user",
            "type": "string",
            "value": "\"caddy\""
        },
        {
            "name": "virtualHosts",
            "desc": "Declarative specification of virtual hosts served by Caddy.",
            "nixName": "virtualHosts",
            "type": "attribute set of (submodule)",
            "value": "{ }"
        },
        {
            "name": "virtualHosts.<name>.extraConfig",
            "desc": "Additional lines of configuration appended to this virtual host inthe automatically generated  Caddyfile .",
            "nixName": "virtualHosts.<name>.extraConfig",
            "type": "strings concatenated with \"\\n\"",
            "value": "\"\""
        },
        {
            "name": "virtualHosts.<name>.hostName",
            "desc": "Canonical hostname for the server.",
            "nixName": "virtualHosts.<name>.hostName",
            "type": "string",
            "value": "\"\u2039name\u203a\""
        },
        {
            "name": "virtualHosts.<name>.listenAddresses",
            "desc": "A list of host interfaces to bind to for this virtual host.",
            "nixName": "virtualHosts.<name>.listenAddresses",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "virtualHosts.<name>.logFormat",
            "desc": "Configuration for HTTP request logging (also known as access logs).See  https://caddyserver.com/docs/caddyfile/directives/log#log for details.",
            "nixName": "virtualHosts.<name>.logFormat",
            "type": "strings concatenated with \"\\n\"",
            "value": "''\n  output file ''${config.services.caddy.logDir}/access-''${hostName}.log\n''"
        },
        {
            "name": "virtualHosts.<name>.serverAliases",
            "desc": "Additional names of virtual hosts served by this virtual hostconfiguration.",
            "nixName": "virtualHosts.<name>.serverAliases",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "virtualHosts.<name>.useACMEHost",
            "desc": "A host of an existing Let\u2019s Encrypt certificate to use. This ismostly useful if you use DNS challenges but Caddy does not currentlysupport your provider.   Note that this option does not create any certificates, nor doesit add subdomains to existing ones \u2013 you will need to create themmanually using  security.acme.certs .",
            "nixName": "virtualHosts.<name>.useACMEHost",
            "type": "null or string",
            "value": "null"
        }
    ],
    "show": false,
    "tested": false
}