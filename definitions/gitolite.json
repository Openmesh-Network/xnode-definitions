{
    "name": "Gitolite",
    "desc": "Finely-grained git repository hosting",
    "tags": [
        "Software Development - Project Management\r"
    ],
    "website": "https://gitolite.com/gitolite/index.html",
    "logo": "https://gitolite.com/gitolite/img/favicon.ico",
    "specs": {
        "ram": 0,
        "storage": 0
    },
    "nixName": "gitolite",
    "options": [
        {
            "name": "adminPubkey",
            "desc": "Initial administrative public key for Gitolite. This should be an SSHPublic Key. Note that this key will only be used once, upon the firstinitialization of the Gitolite user. The key string cannot have any linebreaks in it.",
            "nixName": "adminPubkey",
            "type": "string",
            "value": null
        },
        {
            "name": "commonHooks",
            "desc": "A list of custom git hooks that get copied to ~/.gitolite/hooks/common .",
            "nixName": "commonHooks",
            "type": "list of path",
            "value": "[ ]"
        },
        {
            "name": "dataDir",
            "desc": "The gitolite home directory used to store all repositories. If leftas the default value this directory will automatically be created beforethe gitolite server starts, otherwise the sysadmin is responsible forensuring the directory exists with appropriate ownership andpermissions.",
            "nixName": "dataDir",
            "type": "string",
            "value": "\"/var/lib/gitolite\""
        },
        {
            "name": "description",
            "desc": "Gitolite user account\u2019s description.",
            "nixName": "description",
            "type": "string",
            "value": "\"Gitolite user\""
        },
        {
            "name": "enable",
            "desc": "Enable gitolite management under the  gitolite  user.After switching to a configuration with Gitolite enabled, you can thenrun  git clone gitolite@host:gitolite-admin.git  to manage itfurther.",
            "nixName": "enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "enableGitAnnex",
            "desc": "Enable git-annex support. Uses the  extraGitoliteRc option to apply the necessary configuration.",
            "nixName": "enableGitAnnex",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "extraGitoliteRc",
            "desc": "Extra configuration to append to the default ~/.gitolite.rc .  This should be Perl code that modifies the  %RC configuration variable. The default  ~/.gitolite.rc  contentis generated by invoking  gitolite print-default-rc , andextra configuration from this option is appended to it. The result isplaced to Nix store, and the  ~/.gitolite.rc  file becomes asymlink to it.  If you already have a customized (or otherwise changed) ~/.gitolite.rc  file, NixOS will refuse to replace it with asymlink, and the  gitolite-init  initialization service willfail. In this situation, in order to use this option, you will need totake any customizations you may have in  ~/.gitolite.rc ,convert them to appropriate Perl statements, add them to this option,and remove the file.  See also the  enableGitAnnex  option.",
            "nixName": "extraGitoliteRc",
            "type": "strings concatenated with \"\\n\"",
            "value": "\"\""
        },
        {
            "name": "group",
            "desc": "Primary group of the Gitolite user account.",
            "nixName": "group",
            "type": "string",
            "value": "\"gitolite\""
        },
        {
            "name": "user",
            "desc": "Gitolite user account. This is the username of the gitoliteendpoint.",
            "nixName": "user",
            "type": "string",
            "value": "\"gitolite\""
        }
    ],
    "show": false,
    "tested": false
}