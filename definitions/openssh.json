{
    "name": "OpenSSH Server",
    "desc": "SSH tunnel for manual tweaking and access to your machine. Warning: If you break the Xnode-Admin service you will need to fix it yourself or factory reset to regain control from the Studio.",
    "logo": "<URL to image>",
    "tags": [
        "Administration",
        "Access-control"
    ],
    "specs": {
        "ram": 0,
        "storage": 0
    },
    "nixName": "openssh",
    "options": [
        {
            "name": "allowSFTP",
            "desc": "Whether to enable the SFTP subsystem in the SSH daemon. This enablesthe use of commands such as  sftp  and  sshfs .",
            "nixName": "allowSFTP",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "authorizedKeysCommand",
            "desc": "Specifies a program to be used to look up the user\u2019s public keys. Theprogram must be owned by root, not writable by group or others andspecified by an absolute path.",
            "nixName": "authorizedKeysCommand",
            "type": "string",
            "value": "\"none\""
        },
        {
            "name": "authorizedKeysCommandUser",
            "desc": "Specifies the user under whose account the AuthorizedKeysCommand isrun. It is recommended to use a dedicated user that has no other role onthe host than running authorized keys commands.",
            "nixName": "authorizedKeysCommandUser",
            "type": "string",
            "value": "\"nobody\""
        },
        {
            "name": "authorizedKeysFiles",
            "desc": "Specify the rules for which files to read on the host.  This is an advanced option. If you\u2019re looking to configure user keys,you can generally use  users.users.<name>.openssh.authorizedKeys.keys or  users.users.<name>.openssh.authorizedKeys.keyFiles .  These are paths relative to the host root file system or homedirectories and they are subject to certain token expansion rules. SeeAuthorizedKeysFile in man sshd_config for details.",
            "nixName": "authorizedKeysFiles",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "authorizedKeysInHomedir",
            "desc": "Enables the use of the  ~/.ssh/authorized_keys  file.  Otherwise, the only files trusted by default are those in /etc/ssh/authorized_keys.d ,  i.e.  SSH keys from  users.users.<name>.openssh.authorizedKeys.keys .",
            "nixName": "authorizedKeysInHomedir",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "banner",
            "desc": "Message to display to the remote user before authentication isallowed.",
            "nixName": "banner",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "enable",
            "desc": "Whether to enable the OpenSSH secure shell daemon, which allowssecure remote logins.",
            "nixName": "enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "extraConfig",
            "desc": "Verbatim contents of  sshd_config .",
            "nixName": "extraConfig",
            "type": "strings concatenated with \"\\n\"",
            "value": "\"\""
        },
        {
            "name": "hostKeys",
            "desc": "NixOS can automatically generate SSH host keys. This option specifiesthe path, type and size of each key. See  ssh-keygen(1)  for supported types and sizes.",
            "nixName": "hostKeys",
            "type": "list of (attribute set)",
            "value": "[\n  {\n    bits = 4096;\n    path = \"/etc/ssh/ssh_host_rsa_key\";\n    type = \"rsa\";\n  }\n  {\n    path = \"/etc/ssh/ssh_host_ed25519_key\";\n    type = \"ed25519\";\n  }\n]"
        },
        {
            "name": "knownHosts",
            "desc": "Alias of  programs.ssh.knownHosts .",
            "nixName": "knownHosts",
            "type": "attribute set of (submodule)",
            "value": null
        },
        {
            "name": "knownHosts.<name>.certAuthority",
            "desc": "This public key is an SSH certificate authority, rather than anindividual host\u2019s key.",
            "nixName": "knownHosts.<name>.certAuthority",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "knownHosts.<name>.extraHostNames",
            "desc": "A list of additional host names and/or IP numbers used for accessingthe host\u2019s ssh service. This list is ignored if  hostNames is set explicitly.",
            "nixName": "knownHosts.<name>.extraHostNames",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "knownHosts.<name>.hostNames",
            "desc": "A list of host names and/or IP numbers used for accessing the host\u2019sssh service. This list includes the name of the containing knownHosts  attribute by default for convenience. If youwish to configure multiple host keys for the same host use multiple knownHosts  entries with different attribute names and thesame  hostNames  list.",
            "nixName": "knownHosts.<name>.hostNames",
            "type": "list of string",
            "value": "[ \u2039name\u203a ] ++ config.services.openssh.knownHosts.<name>.extraHostNames"
        },
        {
            "name": "knownHosts.<name>.publicKey",
            "desc": "The public key data for the host. You can fetch a public key from arunning SSH server with the  ssh-keyscan  command. The public key should notinclude any host names, only the key type and the key itself.",
            "nixName": "knownHosts.<name>.publicKey",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "knownHosts.<name>.publicKeyFile",
            "desc": "The path to the public key file for the host. The public key file isread at build time and saved in the Nix store. You can fetch a publickey file from a running SSH server with the  ssh-keyscan  command. Thecontent of the file should follow the same format as described for the publicKey  option. Only a single key is supported. If a hosthas multiple keys, use  programs.ssh.knownHostsFiles  instead.",
            "nixName": "knownHosts.<name>.publicKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "listenAddresses",
            "desc": "List of addresses and ports to listen on (ListenAddress directive inconfig). If port is not specified for address sshd will listen on allports specified by  ports  option. NOTE: this will overridedefault listening on all local addresses and port 22. NOTE: setting thisoption won\u2019t automatically enable given ports in firewallconfiguration.",
            "nixName": "listenAddresses",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "listenAddresses.*.addr",
            "desc": "Host, IPv4 or IPv6 address to listen to.",
            "nixName": "listenAddresses.*.addr",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "listenAddresses.*.port",
            "desc": "Port to listen to.",
            "nixName": "listenAddresses.*.port",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "moduliFile",
            "desc": "Path to  moduli  file to install in /etc/ssh/moduli . If this option is unset, then the moduli  file shipped with OpenSSH will be used.",
            "nixName": "moduliFile",
            "type": "path",
            "value": null
        },
        {
            "name": "openFirewall",
            "desc": "Whether to automatically open the specified ports in thefirewall.",
            "nixName": "openFirewall",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "package",
            "desc": "OpenSSH package to use for sshd.",
            "nixName": "package",
            "type": "package",
            "value": "programs.ssh.package"
        },
        {
            "name": "ports",
            "desc": "Specifies on which ports the SSH daemon listens.",
            "nixName": "ports",
            "type": "list of 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "[\n  22\n]"
        },
        {
            "name": "settings",
            "desc": "Configuration for  sshd_config(5) .",
            "nixName": "settings",
            "type": "attribute set of (atom (null, bool, int, float or string))",
            "value": "{ }"
        },
        {
            "name": "settings.AllowGroups",
            "desc": "If specified, login is allowed only for users part of the listedgroups. See  sshd_config(5)  for details.",
            "nixName": "settings.AllowGroups",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "settings.AllowUsers",
            "desc": "If specified, login is allowed only for the listed users. See  sshd_config(5)  fordetails.",
            "nixName": "settings.AllowUsers",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "settings.AuthorizedPrincipalsFile",
            "desc": "Specifies a file that lists principal names that are accepted forcertificate authentication. The default is  \"none\" , i.e. notto use a principals file.",
            "nixName": "settings.AuthorizedPrincipalsFile",
            "type": "null or string",
            "value": "\"none\""
        },
        {
            "name": "settings.Ciphers",
            "desc": "Allowed ciphers  Defaults to recommended settings from both  https://stribika.github.io/2015/01/04/secure-secure-shell.html and  https://infosec.mozilla.org/guidelines/openssh#modern-openssh-67",
            "nixName": "settings.Ciphers",
            "type": "null or (list of string)",
            "value": "[\n  \"chacha20-poly1305@openssh.com\"\n  \"aes256-gcm@openssh.com\"\n  \"aes128-gcm@openssh.com\"\n  \"aes256-ctr\"\n  \"aes192-ctr\"\n  \"aes128-ctr\"\n]"
        },
        {
            "name": "settings.DenyGroups",
            "desc": "If specified, login is denied for all users part of the listedgroups. Takes precedence over  services.openssh.settings.AllowGroups .See  sshd_config(5) for details.",
            "nixName": "settings.DenyGroups",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "settings.DenyUsers",
            "desc": "If specified, login is denied for all listed users. Takes precedenceover  services.openssh.settings.AllowUsers .See  sshd_config(5) for details.",
            "nixName": "settings.DenyUsers",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "settings.GatewayPorts",
            "desc": "Specifies whether remote hosts are allowed to connect to portsforwarded for the client. See  sshd_config(5) .",
            "nixName": "settings.GatewayPorts",
            "type": "null or string",
            "value": "\"no\""
        },
        {
            "name": "settings.KbdInteractiveAuthentication",
            "desc": "Specifies whether keyboard-interactive authentication is allowed.",
            "nixName": "settings.KbdInteractiveAuthentication",
            "type": "null or boolean",
            "value": "true"
        },
        {
            "name": "settings.KexAlgorithms",
            "desc": "Allowed key exchange algorithms  Uses the lower bound recommended in both  https://stribika.github.io/2015/01/04/secure-secure-shell.html and  https://infosec.mozilla.org/guidelines/openssh#modern-openssh-67",
            "nixName": "settings.KexAlgorithms",
            "type": "null or (list of string)",
            "value": "[\n  \"sntrup761x25519-sha512@openssh.com\"\n  \"curve25519-sha256\"\n  \"curve25519-sha256@libssh.org\"\n  \"diffie-hellman-group-exchange-sha256\"\n]"
        },
        {
            "name": "settings.LogLevel",
            "desc": "Gives the verbosity level that is used when logging messages fromsshd(8). Logging with a DEBUG level violates the privacy of users and isnot recommended.",
            "nixName": "settings.LogLevel",
            "type": "null or one of \"QUIET\", \"FATAL\", \"ERROR\", \"INFO\", \"VERBOSE\", \"DEBUG\", \"DEBUG1\", \"DEBUG2\", \"DEBUG3\"",
            "value": "\"INFO\""
        },
        {
            "name": "settings.Macs",
            "desc": "Allowed MACs  Defaults to recommended settings from both  https://stribika.github.io/2015/01/04/secure-secure-shell.html and  https://infosec.mozilla.org/guidelines/openssh#modern-openssh-67",
            "nixName": "settings.Macs",
            "type": "null or (list of string)",
            "value": "[\n  \"hmac-sha2-512-etm@openssh.com\"\n  \"hmac-sha2-256-etm@openssh.com\"\n  \"umac-128-etm@openssh.com\"\n]"
        },
        {
            "name": "settings.PasswordAuthentication",
            "desc": "Specifies whether password authentication is allowed.",
            "nixName": "settings.PasswordAuthentication",
            "type": "null or boolean",
            "value": "true"
        },
        {
            "name": "settings.PermitRootLogin",
            "desc": "Whether the root user can login using ssh.",
            "nixName": "settings.PermitRootLogin",
            "type": "null or one of \"yes\", \"without-password\", \"prohibit-password\", \"forced-commands-only\", \"no\"",
            "value": "\"prohibit-password\""
        },
        {
            "name": "settings.PrintMotd",
            "desc": "Whether to enable printing /etc/motd when a user logs ininteractively.",
            "nixName": "settings.PrintMotd",
            "type": "null or boolean",
            "value": "false"
        },
        {
            "name": "settings.StrictModes",
            "desc": "Whether sshd should check file modes and ownership of directories",
            "nixName": "settings.StrictModes",
            "type": "null or boolean",
            "value": "true"
        },
        {
            "name": "settings.UseDns",
            "desc": "Specifies whether sshd(8) should look up the remote host name, and tocheck that the resolved host name for the remote IP address maps back tothe very same IP address. If this option is set to no (the default) thenonly addresses and not host names may be used in ~/.ssh/authorized_keysfrom and sshd_config Match Host directives.",
            "nixName": "settings.UseDns",
            "type": "null or boolean",
            "value": "false"
        },
        {
            "name": "settings.UsePAM",
            "desc": "Whether to enable PAM authentication.",
            "nixName": "settings.UsePAM",
            "type": "null or boolean",
            "value": "true"
        },
        {
            "name": "settings.X11Forwarding",
            "desc": "Whether to allow X11 connections to be forwarded.",
            "nixName": "settings.X11Forwarding",
            "type": "null or boolean",
            "value": "false"
        },
        {
            "name": "sftpFlags",
            "desc": "Commandline flags to add to sftp-server.",
            "nixName": "sftpFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "sftpServerExecutable",
            "desc": "The sftp server executable. Can be a path or \u201cinternal-sftp\u201d to usethe sftp server built into the sshd binary.",
            "nixName": "sftpServerExecutable",
            "type": "string",
            "value": null
        },
        {
            "name": "startWhenNeeded",
            "desc": "If set,  sshd  issocket-activated; that is, instead of having it permanently running as adaemon, systemd will start an instance for each incoming connection.",
            "nixName": "startWhenNeeded",
            "type": "boolean",
            "value": "false"
        }
    ],
    "show": false,
    "tested": false
}