{
    "name": "Prometheus",
    "desc": "Service monitoring system and time series database",
    "tags": [
        "Monitoring"
    ],
    "website": "https://prometheus.io",
    "logo": "https://prometheus.io/assets/favicons/favicon.ico",
    "specs": {
        "ram": 0,
        "storage": 0
    },
    "nixName": "prometheus",
    "options": [
        {
            "name": "alertmanager.checkConfig",
            "desc": "Check configuration with  amtool check-config . The callto  amtool  is subject to sandboxing by Nix.  If you use credentials stored in external files( environmentFile , etc), they will not be visible to amtool  and it will report errors, despite a correctconfiguration.",
            "nixName": "alertmanager.checkConfig",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "alertmanager.clusterPeers",
            "desc": "Initial peers for HA cluster.",
            "nixName": "alertmanager.clusterPeers",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "alertmanager.configText",
            "desc": "Alertmanager configuration as YAML text. If non-null, this optiondefines the text that is written to alertmanager.yml. If null, thecontents of alertmanager.yml is generated from the structured configoptions.",
            "nixName": "alertmanager.configText",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "alertmanager.configuration",
            "desc": "Alertmanager configuration as nix attribute set.",
            "nixName": "alertmanager.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "alertmanager.enable",
            "desc": "Whether to enable Prometheus Alertmanager.",
            "nixName": "alertmanager.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "alertmanager.environmentFile",
            "desc": "File to load as environment file. Environment variables from thisfile will be interpolated into the config file using envsubst with thissyntax:  $ENVIRONMENT ${VARIABLE}",
            "nixName": "alertmanager.environmentFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "alertmanager.extraFlags",
            "desc": "Extra commandline options when launching the Alertmanager.",
            "nixName": "alertmanager.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "alertmanager.listenAddress",
            "desc": "Address to listen on for the web interface and API. Empty string willlisten on all interfaces. \u201clocalhost\u201d will listen on 127.0.0.1 (but not::1).",
            "nixName": "alertmanager.listenAddress",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "alertmanager.logFormat",
            "desc": "If set use a syslog logger or JSON logging.",
            "nixName": "alertmanager.logFormat",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "alertmanager.logLevel",
            "desc": "Only log messages with the given severity or above.",
            "nixName": "alertmanager.logLevel",
            "type": "one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
            "value": "\"warn\""
        },
        {
            "name": "alertmanager.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "alertmanager.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "alertmanager.package",
            "desc": "The prometheus-alertmanager package to use.",
            "nixName": "alertmanager.package",
            "type": "package",
            "value": "pkgs.prometheus-alertmanager"
        },
        {
            "name": "alertmanager.port",
            "desc": "Port to listen on for the web interface and API.",
            "nixName": "alertmanager.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9093"
        },
        {
            "name": "alertmanager.webExternalUrl",
            "desc": "The URL under which Alertmanager is externally reachable (forexample, if Alertmanager is served via a reverse proxy). Used forgenerating relative and absolute links back to Alertmanager itself. Ifthe URL has a path portion, it will be used to prefix all HTTP endointsserved by Alertmanager. If omitted, relevant URL components will bederived automatically.",
            "nixName": "alertmanager.webExternalUrl",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "alertmanagerIrcRelay.enable",
            "desc": "Whether to enable Alertmanager IRC Relay.",
            "nixName": "alertmanagerIrcRelay.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "alertmanagerIrcRelay.extraFlags",
            "desc": "Extra command line options to pass to alertmanager-irc-relay.",
            "nixName": "alertmanagerIrcRelay.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "alertmanagerIrcRelay.package",
            "desc": "The alertmanager-irc-relay package to use.",
            "nixName": "alertmanagerIrcRelay.package",
            "type": "package",
            "value": "pkgs.alertmanager-irc-relay"
        },
        {
            "name": "alertmanagerIrcRelay.settings",
            "desc": "Configuration for Alertmanager IRC Relay as a Nix attribute set. Fora reference, check out the  exampleconfiguration  and the  sourcecode .  Note: The webhook\u2019s URL MUST point to the IRC channel where themessage should be posted. For  #mychannel  from the example,this would be  http://localhost:8080/mychannel .",
            "nixName": "alertmanagerIrcRelay.settings",
            "type": "YAML value",
            "value": null
        },
        {
            "name": "alertmanagerNotificationQueueCapacity",
            "desc": "The capacity of the queue for pending alert managernotifications.",
            "nixName": "alertmanagerNotificationQueueCapacity",
            "type": "signed integer",
            "value": "10000"
        },
        {
            "name": "alertmanagerWebhookLogger.enable",
            "desc": "Whether to enable Alertmanager Webhook Logger.",
            "nixName": "alertmanagerWebhookLogger.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "alertmanagerWebhookLogger.extraFlags",
            "desc": "Extra command line options to pass toalertmanager-webhook-logger.",
            "nixName": "alertmanagerWebhookLogger.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "alertmanagerWebhookLogger.package",
            "desc": "The alertmanager-webhook-logger package to use.",
            "nixName": "alertmanagerWebhookLogger.package",
            "type": "package",
            "value": "pkgs.alertmanager-webhook-logger"
        },
        {
            "name": "alertmanagers",
            "desc": "A list of alertmanagers to send alerts to. See  theofficial documentation  for more information.",
            "nixName": "alertmanagers",
            "type": "list of (attribute set)",
            "value": "[ ]"
        },
        {
            "name": "checkConfig",
            "desc": "Check configuration with  promtool check . The call to promtool  is subject to sandboxing by Nix.  If you use credentials stored in external files( password_file ,  bearer_token_file , etc), theywill not be visible to  promtool  and it will report errors,despite a correct configuration. To resolve this, you may set thisoption to  \"syntax-only\"  in order to only syntax check thePrometheus configuration.",
            "nixName": "checkConfig",
            "type": "boolean or value \"syntax-only\" (singular enum)",
            "value": "true"
        },
        {
            "name": "configText",
            "desc": "If non-null, this option defines the text that is written toprometheus.yml. If null, the contents of prometheus.yml is generatedfrom the structured config options.",
            "nixName": "configText",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "enable",
            "desc": "Whether to enable Prometheus monitoring daemon.",
            "nixName": "enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "enableAgentMode",
            "desc": "Whether to enable agent mode.",
            "nixName": "enableAgentMode",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "enableReload",
            "desc": "Reload prometheus when configuration file changes (instead ofrestart).  The following property holds: switching to a configuration( switch-to-configuration ) that changes the prometheusconfiguration only finishes successfully when prometheus has finishedloading the new configuration.",
            "nixName": "enableReload",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters",
            "desc": "Prometheus exporter configuration",
            "nixName": "exporters",
            "type": "submodule",
            "value": "{ }"
        },
        {
            "name": "exporters.apcupsd.apcupsdAddress",
            "desc": "Address of the apcupsd Network Information Server (NIS).",
            "nixName": "exporters.apcupsd.apcupsdAddress",
            "type": "string",
            "value": "\":3551\""
        },
        {
            "name": "exporters.apcupsd.apcupsdNetwork",
            "desc": "Network of the apcupsd Network Information Server (NIS): one of\u201ctcp\u201d, \u201ctcp4\u201d, or \u201ctcp6\u201d.",
            "nixName": "exporters.apcupsd.apcupsdNetwork",
            "type": "one of \"tcp\", \"tcp4\", \"tcp6\"",
            "value": "\"tcp\""
        },
        {
            "name": "exporters.apcupsd.enable",
            "desc": "Whether to enable the prometheus apcupsd exporter.",
            "nixName": "exporters.apcupsd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.apcupsd.extraFlags",
            "desc": "Extra commandline options to pass to the apcupsd exporter.",
            "nixName": "exporters.apcupsd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.apcupsd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.apcupsd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.apcupsd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.apcupsd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.apcupsd.openFirewall is true.",
            "nixName": "exporters.apcupsd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.apcupsd.group",
            "desc": "Group under which the apcupsd exporter shall be run.",
            "nixName": "exporters.apcupsd.group",
            "type": "string",
            "value": "\"apcupsd-exporter\""
        },
        {
            "name": "exporters.apcupsd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.apcupsd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.apcupsd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.apcupsd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.apcupsd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.apcupsd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9162"
        },
        {
            "name": "exporters.apcupsd.user",
            "desc": "User name under which the apcupsd exporter shall be run.",
            "nixName": "exporters.apcupsd.user",
            "type": "string",
            "value": "\"apcupsd-exporter\""
        },
        {
            "name": "exporters.artifactory.artiAccessToken",
            "desc": "Access token for authentication against JFrog Artifactory API. One ofthe password or access token needs to be set.",
            "nixName": "exporters.artifactory.artiAccessToken",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.artifactory.artiPassword",
            "desc": "Password for authentication against JFrog Artifactory API. One of thepassword or access token needs to be set.",
            "nixName": "exporters.artifactory.artiPassword",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.artifactory.artiUsername",
            "desc": "Username for authentication against JFrog Artifactory API.",
            "nixName": "exporters.artifactory.artiUsername",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.artifactory.enable",
            "desc": "Whether to enable the prometheus artifactory exporter.",
            "nixName": "exporters.artifactory.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.artifactory.extraFlags",
            "desc": "Extra commandline options to pass to the artifactory exporter.",
            "nixName": "exporters.artifactory.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.artifactory.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.artifactory.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.artifactory.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.artifactory.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.artifactory.openFirewall is true.",
            "nixName": "exporters.artifactory.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.artifactory.group",
            "desc": "Group under which the artifactory exporter shall be run.",
            "nixName": "exporters.artifactory.group",
            "type": "string",
            "value": "\"artifactory-exporter\""
        },
        {
            "name": "exporters.artifactory.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.artifactory.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.artifactory.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.artifactory.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.artifactory.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.artifactory.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9531"
        },
        {
            "name": "exporters.artifactory.scrapeUri",
            "desc": "URI on which to scrape JFrog Artifactory.",
            "nixName": "exporters.artifactory.scrapeUri",
            "type": "string",
            "value": "\"http://localhost:8081/artifactory\""
        },
        {
            "name": "exporters.artifactory.user",
            "desc": "User name under which the artifactory exporter shall be run.",
            "nixName": "exporters.artifactory.user",
            "type": "string",
            "value": "\"artifactory-exporter\""
        },
        {
            "name": "exporters.bind.bindGroups",
            "desc": "List of statistics to collect. Available: [server, view, tasks]",
            "nixName": "exporters.bind.bindGroups",
            "type": "list of (one of \"server\", \"view\", \"tasks\")",
            "value": "[\n  \"server\"\n  \"view\"\n]"
        },
        {
            "name": "exporters.bind.bindTimeout",
            "desc": "Timeout for trying to get stats from Bind.",
            "nixName": "exporters.bind.bindTimeout",
            "type": "string",
            "value": "\"10s\""
        },
        {
            "name": "exporters.bind.bindURI",
            "desc": "HTTP XML API address of an Bind server.",
            "nixName": "exporters.bind.bindURI",
            "type": "string",
            "value": "\"http://localhost:8053/\""
        },
        {
            "name": "exporters.bind.bindVersion",
            "desc": "BIND statistics version. Can be detected automatically.",
            "nixName": "exporters.bind.bindVersion",
            "type": "one of \"xml.v2\", \"xml.v3\", \"auto\"",
            "value": "\"auto\""
        },
        {
            "name": "exporters.bind.enable",
            "desc": "Whether to enable the prometheus bind exporter.",
            "nixName": "exporters.bind.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.bind.extraFlags",
            "desc": "Extra commandline options to pass to the bind exporter.",
            "nixName": "exporters.bind.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.bind.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.bind.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.bind.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.bind.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.bind.openFirewall  istrue.",
            "nixName": "exporters.bind.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.bind.group",
            "desc": "Group under which the bind exporter shall be run.",
            "nixName": "exporters.bind.group",
            "type": "string",
            "value": "\"bind-exporter\""
        },
        {
            "name": "exporters.bind.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.bind.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.bind.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.bind.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.bind.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.bind.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9119"
        },
        {
            "name": "exporters.bind.user",
            "desc": "User name under which the bind exporter shall be run.",
            "nixName": "exporters.bind.user",
            "type": "string",
            "value": "\"bind-exporter\""
        },
        {
            "name": "exporters.bird.birdSocket",
            "desc": "Path to BIRD2 (or BIRD1 v4) socket.",
            "nixName": "exporters.bird.birdSocket",
            "type": "path",
            "value": "\"/run/bird/bird.ctl\""
        },
        {
            "name": "exporters.bird.birdVersion",
            "desc": "Specifies whether BIRD1 or BIRD2 is in use.",
            "nixName": "exporters.bird.birdVersion",
            "type": "one of 1, 2",
            "value": "2"
        },
        {
            "name": "exporters.bird.enable",
            "desc": "Whether to enable the prometheus bird exporter.",
            "nixName": "exporters.bird.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.bird.extraFlags",
            "desc": "Extra commandline options to pass to the bird exporter.",
            "nixName": "exporters.bird.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.bird.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.bird.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.bird.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.bird.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.bird.openFirewall  istrue.",
            "nixName": "exporters.bird.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.bird.group",
            "desc": "Group under which the bird exporter shall be run.",
            "nixName": "exporters.bird.group",
            "type": "string",
            "value": "\"bird-exporter\""
        },
        {
            "name": "exporters.bird.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.bird.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.bird.newMetricFormat",
            "desc": "Enable the new more-generic metric format.",
            "nixName": "exporters.bird.newMetricFormat",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.bird.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.bird.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.bird.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.bird.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9324"
        },
        {
            "name": "exporters.bird.user",
            "desc": "User name under which the bird exporter shall be run.",
            "nixName": "exporters.bird.user",
            "type": "string",
            "value": "\"bird-exporter\""
        },
        {
            "name": "exporters.bitcoin.enable",
            "desc": "Whether to enable the prometheus bitcoin exporter.",
            "nixName": "exporters.bitcoin.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.bitcoin.extraEnv",
            "desc": "Extra environment variables for the exporter.",
            "nixName": "exporters.bitcoin.extraEnv",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.bitcoin.extraFlags",
            "desc": "Extra commandline options to pass to the bitcoin exporter.",
            "nixName": "exporters.bitcoin.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.bitcoin.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.bitcoin.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.bitcoin.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.bitcoin.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.bitcoin.openFirewall is true.",
            "nixName": "exporters.bitcoin.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.bitcoin.group",
            "desc": "Group under which the bitcoin exporter shall be run.",
            "nixName": "exporters.bitcoin.group",
            "type": "string",
            "value": "\"bitcoin-exporter\""
        },
        {
            "name": "exporters.bitcoin.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.bitcoin.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.bitcoin.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.bitcoin.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.bitcoin.package",
            "desc": "The prometheus-bitcoin-exporter package to use.",
            "nixName": "exporters.bitcoin.package",
            "type": "package",
            "value": "pkgs.prometheus-bitcoin-exporter"
        },
        {
            "name": "exporters.bitcoin.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.bitcoin.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9332"
        },
        {
            "name": "exporters.bitcoin.refreshSeconds",
            "desc": "How often to ask bitcoind for metrics.",
            "nixName": "exporters.bitcoin.refreshSeconds",
            "type": "unsigned integer, meaning >=0",
            "value": "300"
        },
        {
            "name": "exporters.bitcoin.rpcHost",
            "desc": "RPC host.",
            "nixName": "exporters.bitcoin.rpcHost",
            "type": "string",
            "value": "\"localhost\""
        },
        {
            "name": "exporters.bitcoin.rpcPasswordFile",
            "desc": "File containing RPC password.",
            "nixName": "exporters.bitcoin.rpcPasswordFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.bitcoin.rpcPort",
            "desc": "RPC port number.",
            "nixName": "exporters.bitcoin.rpcPort",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "8332"
        },
        {
            "name": "exporters.bitcoin.rpcScheme",
            "desc": "Whether to connect to bitcoind over http or https.",
            "nixName": "exporters.bitcoin.rpcScheme",
            "type": "one of \"http\", \"https\"",
            "value": "\"http\""
        },
        {
            "name": "exporters.bitcoin.rpcUser",
            "desc": "RPC user name.",
            "nixName": "exporters.bitcoin.rpcUser",
            "type": "string",
            "value": "\"bitcoinrpc\""
        },
        {
            "name": "exporters.bitcoin.user",
            "desc": "User name under which the bitcoin exporter shall be run.",
            "nixName": "exporters.bitcoin.user",
            "type": "string",
            "value": "\"bitcoin-exporter\""
        },
        {
            "name": "exporters.blackbox.configFile",
            "desc": "Path to configuration file.",
            "nixName": "exporters.blackbox.configFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.blackbox.enable",
            "desc": "Whether to enable the prometheus blackbox exporter.",
            "nixName": "exporters.blackbox.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.blackbox.enableConfigCheck",
            "desc": "Whether to run a correctness check for the configuration file. Thisdepends on the configuration file residing in the nix-store. Pathspassed as string will be copied to the store.",
            "nixName": "exporters.blackbox.enableConfigCheck",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.blackbox.extraFlags",
            "desc": "Extra commandline options to pass to the blackbox exporter.",
            "nixName": "exporters.blackbox.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.blackbox.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.blackbox.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.blackbox.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.blackbox.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.blackbox.openFirewall is true.",
            "nixName": "exporters.blackbox.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.blackbox.group",
            "desc": "Group under which the blackbox exporter shall be run.",
            "nixName": "exporters.blackbox.group",
            "type": "string",
            "value": "\"blackbox-exporter\""
        },
        {
            "name": "exporters.blackbox.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.blackbox.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.blackbox.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.blackbox.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.blackbox.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.blackbox.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9115"
        },
        {
            "name": "exporters.blackbox.user",
            "desc": "User name under which the blackbox exporter shall be run.",
            "nixName": "exporters.blackbox.user",
            "type": "string",
            "value": "\"blackbox-exporter\""
        },
        {
            "name": "exporters.buildkite-agent.enable",
            "desc": "Whether to enable the prometheus buildkite-agent exporter.",
            "nixName": "exporters.buildkite-agent.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.buildkite-agent.endpoint",
            "desc": "The Buildkite Agent API endpoint.",
            "nixName": "exporters.buildkite-agent.endpoint",
            "type": "string",
            "value": "\"https://agent.buildkite.com/v3\""
        },
        {
            "name": "exporters.buildkite-agent.extraFlags",
            "desc": "Extra commandline options to pass to the buildkite-agentexporter.",
            "nixName": "exporters.buildkite-agent.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.buildkite-agent.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.buildkite-agent.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.buildkite-agent.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.buildkite-agent.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.buildkite-agent.openFirewall is true.",
            "nixName": "exporters.buildkite-agent.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.buildkite-agent.group",
            "desc": "Group under which the buildkite-agent exporter shall be run.",
            "nixName": "exporters.buildkite-agent.group",
            "type": "string",
            "value": "\"buildkite-agent-exporter\""
        },
        {
            "name": "exporters.buildkite-agent.interval",
            "desc": "How often to update metrics.",
            "nixName": "exporters.buildkite-agent.interval",
            "type": "string",
            "value": "\"30s\""
        },
        {
            "name": "exporters.buildkite-agent.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.buildkite-agent.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.buildkite-agent.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.buildkite-agent.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.buildkite-agent.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.buildkite-agent.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9876"
        },
        {
            "name": "exporters.buildkite-agent.queues",
            "desc": "Which specific queues to process.",
            "nixName": "exporters.buildkite-agent.queues",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "exporters.buildkite-agent.tokenPath",
            "desc": "The token from your Buildkite \u201cAgents\u201d page.  A run-time path to the token file, which is supposed to beprovisioned outside of Nix store.",
            "nixName": "exporters.buildkite-agent.tokenPath",
            "type": "null or path",
            "value": null
        },
        {
            "name": "exporters.buildkite-agent.user",
            "desc": "User name under which the buildkite-agent exporter shall be run.",
            "nixName": "exporters.buildkite-agent.user",
            "type": "string",
            "value": "\"buildkite-agent-exporter\""
        },
        {
            "name": "exporters.collectd.collectdBinary.authFile",
            "desc": "File mapping user names to pre-shared keys (passwords).",
            "nixName": "exporters.collectd.collectdBinary.authFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.collectd.collectdBinary.enable",
            "desc": "Whether to enable collectd binary protocol receiver.",
            "nixName": "exporters.collectd.collectdBinary.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.collectd.collectdBinary.listenAddress",
            "desc": "Address to listen on for binary network packets.",
            "nixName": "exporters.collectd.collectdBinary.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.collectd.collectdBinary.port",
            "desc": "Network address on which to accept collectd binary networkpackets.",
            "nixName": "exporters.collectd.collectdBinary.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "25826"
        },
        {
            "name": "exporters.collectd.collectdBinary.securityLevel",
            "desc": "Minimum required security level for accepted packets.",
            "nixName": "exporters.collectd.collectdBinary.securityLevel",
            "type": "one of \"None\", \"Sign\", \"Encrypt\"",
            "value": "\"None\""
        },
        {
            "name": "exporters.collectd.enable",
            "desc": "Whether to enable the prometheus collectd exporter.",
            "nixName": "exporters.collectd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.collectd.extraFlags",
            "desc": "Extra commandline options to pass to the collectd exporter.",
            "nixName": "exporters.collectd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.collectd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.collectd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.collectd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.collectd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.collectd.openFirewall is true.",
            "nixName": "exporters.collectd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.collectd.group",
            "desc": "Group under which the collectd exporter shall be run.",
            "nixName": "exporters.collectd.group",
            "type": "string",
            "value": "\"collectd-exporter\""
        },
        {
            "name": "exporters.collectd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.collectd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.collectd.logFormat",
            "desc": "Set the log format.",
            "nixName": "exporters.collectd.logFormat",
            "type": "one of \"logfmt\", \"json\"",
            "value": "\"logfmt\""
        },
        {
            "name": "exporters.collectd.logLevel",
            "desc": "Only log messages with the given severity or above.",
            "nixName": "exporters.collectd.logLevel",
            "type": "one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
            "value": "\"info\""
        },
        {
            "name": "exporters.collectd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.collectd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.collectd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.collectd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9103"
        },
        {
            "name": "exporters.collectd.user",
            "desc": "User name under which the collectd exporter shall be run.",
            "nixName": "exporters.collectd.user",
            "type": "string",
            "value": "\"collectd-exporter\""
        },
        {
            "name": "exporters.dmarc.debug",
            "desc": "Whether to declare enable  --debug .",
            "nixName": "exporters.dmarc.debug",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dmarc.deduplicationMaxSeconds",
            "desc": "How long individual report IDs will be remembered to avoid countingdouble delivered reports twice.",
            "nixName": "exporters.dmarc.deduplicationMaxSeconds",
            "type": "unsigned integer, meaning >=0",
            "value": "\"7 days (in seconds)\""
        },
        {
            "name": "exporters.dmarc.enable",
            "desc": "Whether to enable the prometheus dmarc exporter.",
            "nixName": "exporters.dmarc.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dmarc.extraFlags",
            "desc": "Extra commandline options to pass to the dmarc exporter.",
            "nixName": "exporters.dmarc.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.dmarc.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.dmarc.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.dmarc.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.dmarc.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.dmarc.openFirewall  istrue.",
            "nixName": "exporters.dmarc.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.dmarc.folders.done",
            "desc": "IMAP mailbox that successfully processed reports are moved to.",
            "nixName": "exporters.dmarc.folders.done",
            "type": "string",
            "value": "\"Archive\""
        },
        {
            "name": "exporters.dmarc.folders.error",
            "desc": "IMAP mailbox that emails are moved to that could not beprocessed.",
            "nixName": "exporters.dmarc.folders.error",
            "type": "string",
            "value": "\"Invalid\""
        },
        {
            "name": "exporters.dmarc.folders.inbox",
            "desc": "IMAP mailbox that is checked for incoming DMARC aggregate reports",
            "nixName": "exporters.dmarc.folders.inbox",
            "type": "string",
            "value": "\"INBOX\""
        },
        {
            "name": "exporters.dmarc.group",
            "desc": "Group under which the dmarc exporter shall be run.",
            "nixName": "exporters.dmarc.group",
            "type": "string",
            "value": "\"dmarc-exporter\""
        },
        {
            "name": "exporters.dmarc.imap.host",
            "desc": "Hostname of IMAP server to connect to.",
            "nixName": "exporters.dmarc.imap.host",
            "type": "string",
            "value": "\"localhost\""
        },
        {
            "name": "exporters.dmarc.imap.passwordFile",
            "desc": "File containing the login password for the IMAP connection.",
            "nixName": "exporters.dmarc.imap.passwordFile",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.dmarc.imap.port",
            "desc": "Port of the IMAP server to connect to.",
            "nixName": "exporters.dmarc.imap.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "993"
        },
        {
            "name": "exporters.dmarc.imap.username",
            "desc": "Login username for the IMAP connection.",
            "nixName": "exporters.dmarc.imap.username",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.dmarc.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.dmarc.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.dmarc.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.dmarc.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dmarc.pollIntervalSeconds",
            "desc": "How often to poll the IMAP server in seconds.",
            "nixName": "exporters.dmarc.pollIntervalSeconds",
            "type": "unsigned integer, meaning >=0",
            "value": "60"
        },
        {
            "name": "exporters.dmarc.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.dmarc.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9797"
        },
        {
            "name": "exporters.dmarc.user",
            "desc": "User name under which the dmarc exporter shall be run.",
            "nixName": "exporters.dmarc.user",
            "type": "string",
            "value": "\"dmarc-exporter\""
        },
        {
            "name": "exporters.dnsmasq.dnsmasqListenAddress",
            "desc": "Address on which dnsmasq listens.",
            "nixName": "exporters.dnsmasq.dnsmasqListenAddress",
            "type": "string",
            "value": "\"localhost:53\""
        },
        {
            "name": "exporters.dnsmasq.enable",
            "desc": "Whether to enable the prometheus dnsmasq exporter.",
            "nixName": "exporters.dnsmasq.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dnsmasq.extraFlags",
            "desc": "Extra commandline options to pass to the dnsmasq exporter.",
            "nixName": "exporters.dnsmasq.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.dnsmasq.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.dnsmasq.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.dnsmasq.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.dnsmasq.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.dnsmasq.openFirewall is true.",
            "nixName": "exporters.dnsmasq.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.dnsmasq.group",
            "desc": "Group under which the dnsmasq exporter shall be run.",
            "nixName": "exporters.dnsmasq.group",
            "type": "string",
            "value": "\"dnsmasq-exporter\""
        },
        {
            "name": "exporters.dnsmasq.leasesPath",
            "desc": "Path to the  dnsmasq.leases  file.",
            "nixName": "exporters.dnsmasq.leasesPath",
            "type": "path",
            "value": "\"/var/lib/misc/dnsmasq.leases\""
        },
        {
            "name": "exporters.dnsmasq.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.dnsmasq.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.dnsmasq.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.dnsmasq.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dnsmasq.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.dnsmasq.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9153"
        },
        {
            "name": "exporters.dnsmasq.user",
            "desc": "User name under which the dnsmasq exporter shall be run.",
            "nixName": "exporters.dnsmasq.user",
            "type": "string",
            "value": "\"dnsmasq-exporter\""
        },
        {
            "name": "exporters.dnssec.configuration",
            "desc": "dnssec exporter configuration as nix attribute set.  See  https://github.com/chrj/prometheus-dnssec-exporter/blob/master/README.md for the description of the configuration file format.",
            "nixName": "exporters.dnssec.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "exporters.dnssec.enable",
            "desc": "Whether to enable the prometheus dnssec exporter.",
            "nixName": "exporters.dnssec.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dnssec.extraFlags",
            "desc": "Extra commandline options when launching Prometheus.",
            "nixName": "exporters.dnssec.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.dnssec.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.dnssec.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.dnssec.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.dnssec.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.dnssec.openFirewall is true.",
            "nixName": "exporters.dnssec.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.dnssec.group",
            "desc": "Group under which the dnssec exporter shall be run.",
            "nixName": "exporters.dnssec.group",
            "type": "string",
            "value": "\"dnssec-exporter\""
        },
        {
            "name": "exporters.dnssec.listenAddress",
            "desc": "Listen address as host IP and port definition.",
            "nixName": "exporters.dnssec.listenAddress",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.dnssec.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.dnssec.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dnssec.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.dnssec.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9204"
        },
        {
            "name": "exporters.dnssec.resolvers",
            "desc": "DNSSEC capable resolver to be used for the check.",
            "nixName": "exporters.dnssec.resolvers",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.dnssec.timeout",
            "desc": "DNS request timeout duration.",
            "nixName": "exporters.dnssec.timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.dnssec.user",
            "desc": "User name under which the dnssec exporter shall be run.",
            "nixName": "exporters.dnssec.user",
            "type": "string",
            "value": "\"dnssec-exporter\""
        },
        {
            "name": "exporters.domain.enable",
            "desc": "Whether to enable the prometheus domain exporter.",
            "nixName": "exporters.domain.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.domain.extraFlags",
            "desc": "Extra commandline options to pass to the domain exporter.",
            "nixName": "exporters.domain.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.domain.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.domain.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.domain.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.domain.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.domain.openFirewall is true.",
            "nixName": "exporters.domain.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.domain.group",
            "desc": "Group under which the domain exporter shall be run.",
            "nixName": "exporters.domain.group",
            "type": "string",
            "value": "\"domain-exporter\""
        },
        {
            "name": "exporters.domain.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.domain.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.domain.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.domain.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.domain.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.domain.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9222"
        },
        {
            "name": "exporters.domain.user",
            "desc": "User name under which the domain exporter shall be run.",
            "nixName": "exporters.domain.user",
            "type": "string",
            "value": "\"domain-exporter\""
        },
        {
            "name": "exporters.dovecot.enable",
            "desc": "Whether to enable the prometheus dovecot exporter.",
            "nixName": "exporters.dovecot.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dovecot.extraFlags",
            "desc": "Extra commandline options to pass to the dovecot exporter.",
            "nixName": "exporters.dovecot.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.dovecot.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.dovecot.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.dovecot.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.dovecot.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.dovecot.openFirewall is true.",
            "nixName": "exporters.dovecot.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.dovecot.group",
            "desc": "Group under which the dovecot exporter shall be run.",
            "nixName": "exporters.dovecot.group",
            "type": "string",
            "value": "\"dovecot-exporter\""
        },
        {
            "name": "exporters.dovecot.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.dovecot.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.dovecot.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.dovecot.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.dovecot.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.dovecot.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9166"
        },
        {
            "name": "exporters.dovecot.scopes",
            "desc": "Stats scopes to query.",
            "nixName": "exporters.dovecot.scopes",
            "type": "list of string",
            "value": "[\n  \"user\"\n]"
        },
        {
            "name": "exporters.dovecot.socketPath",
            "desc": "Path under which the stats socket is placed. The user/group underwhich the exporter runs, should be able to access the socket in order toscrape the metrics successfully.  Please keep in mind that the stats module has changed in  Dovecot 2.3+  which isnot  compatiblewith this exporter .  The following extra config has to be passed to Dovecot to ensure thatrecent versions work with this exporter:   {  services.prometheus.exporters.dovecot.enable = true;  services.prometheus.exporters.dovecot.socketPath = \"/var/run/dovecot2/old-stats\";  services.dovecot2.mailPlugins.globally.enable = [ \"old_stats\" ];  services.dovecot2.extraConfig = ''    service old-stats {      unix_listener old-stats {        user = dovecot-exporter        group = dovecot-exporter        mode = 0660      }      fifo_listener old-stats-mail {        mode = 0660        user = dovecot        group = dovecot      }      fifo_listener old-stats-user {        mode = 0660        user = dovecot        group = dovecot      }    }    plugin {      old_stats_refresh = 30 secs      old_stats_track_cmds = yes    }  '';}",
            "nixName": "exporters.dovecot.socketPath",
            "type": "path",
            "value": "\"/var/run/dovecot/stats\""
        },
        {
            "name": "exporters.dovecot.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.dovecot.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.dovecot.user",
            "desc": "User name under which the dovecot exporter shall be run.",
            "nixName": "exporters.dovecot.user",
            "type": "string",
            "value": "\"dovecot-exporter\""
        },
        {
            "name": "exporters.exportarr-bazarr.apiKeyFile",
            "desc": "File containing the api-key.",
            "nixName": "exporters.exportarr-bazarr.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-bazarr.enable",
            "desc": "Whether to enable the prometheus exportarr-bazarr exporter.",
            "nixName": "exporters.exportarr-bazarr.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-bazarr.environment",
            "desc": "See  theconfiguration guide  for available options.",
            "nixName": "exporters.exportarr-bazarr.environment",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.exportarr-bazarr.extraFlags",
            "desc": "Extra commandline options to pass to the exportarr-bazarrexporter.",
            "nixName": "exporters.exportarr-bazarr.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.exportarr-bazarr.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.exportarr-bazarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.exportarr-bazarr.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-bazarr.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.exportarr-bazarr.openFirewall is true.",
            "nixName": "exporters.exportarr-bazarr.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-bazarr.group",
            "desc": "Group under which the exportarr-bazarr exporter shall be run.",
            "nixName": "exporters.exportarr-bazarr.group",
            "type": "string",
            "value": "\"exportarr-bazarr-exporter\""
        },
        {
            "name": "exporters.exportarr-bazarr.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.exportarr-bazarr.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.exportarr-bazarr.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.exportarr-bazarr.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-bazarr.package",
            "desc": "The exportarr package to use.",
            "nixName": "exporters.exportarr-bazarr.package",
            "type": "package",
            "value": "pkgs.exportarr"
        },
        {
            "name": "exporters.exportarr-bazarr.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.exportarr-bazarr.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9708"
        },
        {
            "name": "exporters.exportarr-bazarr.url",
            "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
            "nixName": "exporters.exportarr-bazarr.url",
            "type": "string",
            "value": "\"http://127.0.0.1\""
        },
        {
            "name": "exporters.exportarr-bazarr.user",
            "desc": "User name under which the exportarr-bazarr exporter shall be run.",
            "nixName": "exporters.exportarr-bazarr.user",
            "type": "string",
            "value": "\"exportarr-bazarr-exporter\""
        },
        {
            "name": "exporters.exportarr-lidarr.apiKeyFile",
            "desc": "File containing the api-key.",
            "nixName": "exporters.exportarr-lidarr.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-lidarr.enable",
            "desc": "Whether to enable the prometheus exportarr-lidarr exporter.",
            "nixName": "exporters.exportarr-lidarr.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-lidarr.environment",
            "desc": "See  theconfiguration guide  for available options.",
            "nixName": "exporters.exportarr-lidarr.environment",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.exportarr-lidarr.extraFlags",
            "desc": "Extra commandline options to pass to the exportarr-lidarrexporter.",
            "nixName": "exporters.exportarr-lidarr.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.exportarr-lidarr.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.exportarr-lidarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.exportarr-lidarr.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-lidarr.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.exportarr-lidarr.openFirewall is true.",
            "nixName": "exporters.exportarr-lidarr.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-lidarr.group",
            "desc": "Group under which the exportarr-lidarr exporter shall be run.",
            "nixName": "exporters.exportarr-lidarr.group",
            "type": "string",
            "value": "\"exportarr-lidarr-exporter\""
        },
        {
            "name": "exporters.exportarr-lidarr.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.exportarr-lidarr.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.exportarr-lidarr.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.exportarr-lidarr.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-lidarr.package",
            "desc": "The exportarr package to use.",
            "nixName": "exporters.exportarr-lidarr.package",
            "type": "package",
            "value": "pkgs.exportarr"
        },
        {
            "name": "exporters.exportarr-lidarr.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.exportarr-lidarr.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9708"
        },
        {
            "name": "exporters.exportarr-lidarr.url",
            "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
            "nixName": "exporters.exportarr-lidarr.url",
            "type": "string",
            "value": "\"http://127.0.0.1\""
        },
        {
            "name": "exporters.exportarr-lidarr.user",
            "desc": "User name under which the exportarr-lidarr exporter shall be run.",
            "nixName": "exporters.exportarr-lidarr.user",
            "type": "string",
            "value": "\"exportarr-lidarr-exporter\""
        },
        {
            "name": "exporters.exportarr-prowlarr.apiKeyFile",
            "desc": "File containing the api-key.",
            "nixName": "exporters.exportarr-prowlarr.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-prowlarr.enable",
            "desc": "Whether to enable the prometheus exportarr-prowlarr exporter.",
            "nixName": "exporters.exportarr-prowlarr.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-prowlarr.environment",
            "desc": "See  theconfiguration guide  for available options.",
            "nixName": "exporters.exportarr-prowlarr.environment",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.exportarr-prowlarr.extraFlags",
            "desc": "Extra commandline options to pass to the exportarr-prowlarrexporter.",
            "nixName": "exporters.exportarr-prowlarr.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.exportarr-prowlarr.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.exportarr-prowlarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.exportarr-prowlarr.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-prowlarr.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.exportarr-prowlarr.openFirewall is true.",
            "nixName": "exporters.exportarr-prowlarr.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-prowlarr.group",
            "desc": "Group under which the exportarr-prowlarr exporter shall be run.",
            "nixName": "exporters.exportarr-prowlarr.group",
            "type": "string",
            "value": "\"exportarr-prowlarr-exporter\""
        },
        {
            "name": "exporters.exportarr-prowlarr.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.exportarr-prowlarr.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.exportarr-prowlarr.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.exportarr-prowlarr.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-prowlarr.package",
            "desc": "The exportarr package to use.",
            "nixName": "exporters.exportarr-prowlarr.package",
            "type": "package",
            "value": "pkgs.exportarr"
        },
        {
            "name": "exporters.exportarr-prowlarr.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.exportarr-prowlarr.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9708"
        },
        {
            "name": "exporters.exportarr-prowlarr.url",
            "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
            "nixName": "exporters.exportarr-prowlarr.url",
            "type": "string",
            "value": "\"http://127.0.0.1\""
        },
        {
            "name": "exporters.exportarr-prowlarr.user",
            "desc": "User name under which the exportarr-prowlarr exporter shall berun.",
            "nixName": "exporters.exportarr-prowlarr.user",
            "type": "string",
            "value": "\"exportarr-prowlarr-exporter\""
        },
        {
            "name": "exporters.exportarr-radarr.apiKeyFile",
            "desc": "File containing the api-key.",
            "nixName": "exporters.exportarr-radarr.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-radarr.enable",
            "desc": "Whether to enable the prometheus exportarr-radarr exporter.",
            "nixName": "exporters.exportarr-radarr.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-radarr.environment",
            "desc": "See  theconfiguration guide  for available options.",
            "nixName": "exporters.exportarr-radarr.environment",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.exportarr-radarr.extraFlags",
            "desc": "Extra commandline options to pass to the exportarr-radarrexporter.",
            "nixName": "exporters.exportarr-radarr.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.exportarr-radarr.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.exportarr-radarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.exportarr-radarr.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-radarr.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.exportarr-radarr.openFirewall is true.",
            "nixName": "exporters.exportarr-radarr.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-radarr.group",
            "desc": "Group under which the exportarr-radarr exporter shall be run.",
            "nixName": "exporters.exportarr-radarr.group",
            "type": "string",
            "value": "\"exportarr-radarr-exporter\""
        },
        {
            "name": "exporters.exportarr-radarr.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.exportarr-radarr.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.exportarr-radarr.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.exportarr-radarr.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-radarr.package",
            "desc": "The exportarr package to use.",
            "nixName": "exporters.exportarr-radarr.package",
            "type": "package",
            "value": "pkgs.exportarr"
        },
        {
            "name": "exporters.exportarr-radarr.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.exportarr-radarr.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9708"
        },
        {
            "name": "exporters.exportarr-radarr.url",
            "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
            "nixName": "exporters.exportarr-radarr.url",
            "type": "string",
            "value": "\"http://127.0.0.1\""
        },
        {
            "name": "exporters.exportarr-radarr.user",
            "desc": "User name under which the exportarr-radarr exporter shall be run.",
            "nixName": "exporters.exportarr-radarr.user",
            "type": "string",
            "value": "\"exportarr-radarr-exporter\""
        },
        {
            "name": "exporters.exportarr-readarr.apiKeyFile",
            "desc": "File containing the api-key.",
            "nixName": "exporters.exportarr-readarr.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-readarr.enable",
            "desc": "Whether to enable the prometheus exportarr-readarr exporter.",
            "nixName": "exporters.exportarr-readarr.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-readarr.environment",
            "desc": "See  theconfiguration guide  for available options.",
            "nixName": "exporters.exportarr-readarr.environment",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.exportarr-readarr.extraFlags",
            "desc": "Extra commandline options to pass to the exportarr-readarrexporter.",
            "nixName": "exporters.exportarr-readarr.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.exportarr-readarr.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.exportarr-readarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.exportarr-readarr.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-readarr.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.exportarr-readarr.openFirewall is true.",
            "nixName": "exporters.exportarr-readarr.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-readarr.group",
            "desc": "Group under which the exportarr-readarr exporter shall be run.",
            "nixName": "exporters.exportarr-readarr.group",
            "type": "string",
            "value": "\"exportarr-readarr-exporter\""
        },
        {
            "name": "exporters.exportarr-readarr.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.exportarr-readarr.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.exportarr-readarr.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.exportarr-readarr.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-readarr.package",
            "desc": "The exportarr package to use.",
            "nixName": "exporters.exportarr-readarr.package",
            "type": "package",
            "value": "pkgs.exportarr"
        },
        {
            "name": "exporters.exportarr-readarr.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.exportarr-readarr.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9708"
        },
        {
            "name": "exporters.exportarr-readarr.url",
            "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
            "nixName": "exporters.exportarr-readarr.url",
            "type": "string",
            "value": "\"http://127.0.0.1\""
        },
        {
            "name": "exporters.exportarr-readarr.user",
            "desc": "User name under which the exportarr-readarr exporter shall berun.",
            "nixName": "exporters.exportarr-readarr.user",
            "type": "string",
            "value": "\"exportarr-readarr-exporter\""
        },
        {
            "name": "exporters.exportarr-sonarr.apiKeyFile",
            "desc": "File containing the api-key.",
            "nixName": "exporters.exportarr-sonarr.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-sonarr.enable",
            "desc": "Whether to enable the prometheus exportarr-sonarr exporter.",
            "nixName": "exporters.exportarr-sonarr.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-sonarr.environment",
            "desc": "See  theconfiguration guide  for available options.",
            "nixName": "exporters.exportarr-sonarr.environment",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "exporters.exportarr-sonarr.extraFlags",
            "desc": "Extra commandline options to pass to the exportarr-sonarrexporter.",
            "nixName": "exporters.exportarr-sonarr.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.exportarr-sonarr.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.exportarr-sonarr.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.exportarr-sonarr.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-sonarr.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.exportarr-sonarr.openFirewall is true.",
            "nixName": "exporters.exportarr-sonarr.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.exportarr-sonarr.group",
            "desc": "Group under which the exportarr-sonarr exporter shall be run.",
            "nixName": "exporters.exportarr-sonarr.group",
            "type": "string",
            "value": "\"exportarr-sonarr-exporter\""
        },
        {
            "name": "exporters.exportarr-sonarr.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.exportarr-sonarr.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.exportarr-sonarr.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.exportarr-sonarr.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.exportarr-sonarr.package",
            "desc": "The exportarr package to use.",
            "nixName": "exporters.exportarr-sonarr.package",
            "type": "package",
            "value": "pkgs.exportarr"
        },
        {
            "name": "exporters.exportarr-sonarr.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.exportarr-sonarr.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9708"
        },
        {
            "name": "exporters.exportarr-sonarr.url",
            "desc": "The full URL to Sonarr, Radarr, or Lidarr.",
            "nixName": "exporters.exportarr-sonarr.url",
            "type": "string",
            "value": "\"http://127.0.0.1\""
        },
        {
            "name": "exporters.exportarr-sonarr.user",
            "desc": "User name under which the exportarr-sonarr exporter shall be run.",
            "nixName": "exporters.exportarr-sonarr.user",
            "type": "string",
            "value": "\"exportarr-sonarr-exporter\""
        },
        {
            "name": "exporters.fastly.configFile",
            "desc": "Path to a fastly-exporter configuration file. Example one can begenerated with  fastly-exporter --config-file-example .",
            "nixName": "exporters.fastly.configFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.fastly.enable",
            "desc": "Whether to enable the prometheus fastly exporter.",
            "nixName": "exporters.fastly.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fastly.extraFlags",
            "desc": "Extra commandline options to pass to the fastly exporter.",
            "nixName": "exporters.fastly.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.fastly.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.fastly.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.fastly.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.fastly.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.fastly.openFirewall is true.",
            "nixName": "exporters.fastly.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.fastly.group",
            "desc": "Group under which the fastly exporter shall be run.",
            "nixName": "exporters.fastly.group",
            "type": "string",
            "value": "\"fastly-exporter\""
        },
        {
            "name": "exporters.fastly.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.fastly.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.fastly.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.fastly.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fastly.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.fastly.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9118"
        },
        {
            "name": "exporters.fastly.tokenPath",
            "desc": "A run-time path to the token file, which is supposed to beprovisioned outside of Nix store.",
            "nixName": "exporters.fastly.tokenPath",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.fastly.user",
            "desc": "User name under which the fastly exporter shall be run.",
            "nixName": "exporters.fastly.user",
            "type": "string",
            "value": "\"fastly-exporter\""
        },
        {
            "name": "exporters.flow.asn",
            "desc": "The ASN being monitored.",
            "nixName": "exporters.flow.asn",
            "type": "positive integer, meaning >0",
            "value": null
        },
        {
            "name": "exporters.flow.brokers",
            "desc": "List of Kafka brokers to connect to.",
            "nixName": "exporters.flow.brokers",
            "type": "list of string",
            "value": null
        },
        {
            "name": "exporters.flow.enable",
            "desc": "Whether to enable the prometheus flow exporter.",
            "nixName": "exporters.flow.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.flow.extraFlags",
            "desc": "Extra commandline options to pass to the flow exporter.",
            "nixName": "exporters.flow.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.flow.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.flow.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.flow.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.flow.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.flow.openFirewall  istrue.",
            "nixName": "exporters.flow.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.flow.group",
            "desc": "Group under which the flow exporter shall be run.",
            "nixName": "exporters.flow.group",
            "type": "string",
            "value": "\"flow-exporter\""
        },
        {
            "name": "exporters.flow.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.flow.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.flow.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.flow.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.flow.partitions",
            "desc": "The number of the partitions to consume, none means all.",
            "nixName": "exporters.flow.partitions",
            "type": "list of signed integer",
            "value": "[ ]"
        },
        {
            "name": "exporters.flow.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.flow.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9590"
        },
        {
            "name": "exporters.flow.topic",
            "desc": "The Kafka topic to consume from.",
            "nixName": "exporters.flow.topic",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.flow.user",
            "desc": "User name under which the flow exporter shall be run.",
            "nixName": "exporters.flow.user",
            "type": "string",
            "value": "\"flow-exporter\""
        },
        {
            "name": "exporters.fritz.enable",
            "desc": "Whether to enable the prometheus fritz exporter.",
            "nixName": "exporters.fritz.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fritz.extraFlags",
            "desc": "Extra commandline options to pass to the fritz exporter.",
            "nixName": "exporters.fritz.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.fritz.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.fritz.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.fritz.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.fritz.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.fritz.openFirewall  istrue.",
            "nixName": "exporters.fritz.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.fritz.group",
            "desc": "Group under which the fritz exporter shall be run.",
            "nixName": "exporters.fritz.group",
            "type": "string",
            "value": "\"fritz-exporter\""
        },
        {
            "name": "exporters.fritz.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.fritz.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.fritz.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.fritz.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fritz.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.fritz.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9787"
        },
        {
            "name": "exporters.fritz.settings",
            "desc": "Configuration settings for fritz-exporter.",
            "nixName": "exporters.fritz.settings",
            "type": "YAML value",
            "value": null
        },
        {
            "name": "exporters.fritz.settings.devices",
            "desc": "Fritz!-devices to monitor using the exporter.",
            "nixName": "exporters.fritz.settings.devices",
            "type": "list of (YAML value)",
            "value": "[ ]"
        },
        {
            "name": "exporters.fritz.settings.devices.*.host_info",
            "desc": "Enable extended host info for this device.  Warning : Thiswill heavily increase scrape time.",
            "nixName": "exporters.fritz.settings.devices.*.host_info",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fritz.settings.devices.*.hostname",
            "desc": "Hostname under which the target device is reachable.",
            "nixName": "exporters.fritz.settings.devices.*.hostname",
            "type": "string",
            "value": "\"fritz.box\""
        },
        {
            "name": "exporters.fritz.settings.devices.*.name",
            "desc": "Name to use for the device.",
            "nixName": "exporters.fritz.settings.devices.*.name",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.fritz.settings.devices.*.password_file",
            "desc": "Path to a file which contains the password to authenticate with thetarget device. Needs to be readable by the user the exporter runsunder.",
            "nixName": "exporters.fritz.settings.devices.*.password_file",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.fritz.settings.devices.*.username",
            "desc": "Username to authenticate with the target device.",
            "nixName": "exporters.fritz.settings.devices.*.username",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.fritz.settings.log_level",
            "desc": "Log level to use for the exporter.",
            "nixName": "exporters.fritz.settings.log_level",
            "type": "one of \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"",
            "value": "\"INFO\""
        },
        {
            "name": "exporters.fritz.user",
            "desc": "User name under which the fritz exporter shall be run.",
            "nixName": "exporters.fritz.user",
            "type": "string",
            "value": "\"fritz-exporter\""
        },
        {
            "name": "exporters.fritzbox.enable",
            "desc": "Whether to enable the prometheus fritzbox exporter.",
            "nixName": "exporters.fritzbox.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fritzbox.extraFlags",
            "desc": "Extra commandline options to pass to the fritzbox exporter.",
            "nixName": "exporters.fritzbox.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.fritzbox.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.fritzbox.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.fritzbox.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.fritzbox.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.fritzbox.openFirewall is true.",
            "nixName": "exporters.fritzbox.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.fritzbox.gatewayAddress",
            "desc": "The hostname or IP of the FRITZ!Box.",
            "nixName": "exporters.fritzbox.gatewayAddress",
            "type": "string",
            "value": "\"fritz.box\""
        },
        {
            "name": "exporters.fritzbox.gatewayPort",
            "desc": "The port of the FRITZ!Box UPnP service.",
            "nixName": "exporters.fritzbox.gatewayPort",
            "type": "signed integer",
            "value": "49000"
        },
        {
            "name": "exporters.fritzbox.group",
            "desc": "Group under which the fritzbox exporter shall be run.",
            "nixName": "exporters.fritzbox.group",
            "type": "string",
            "value": "\"fritzbox-exporter\""
        },
        {
            "name": "exporters.fritzbox.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.fritzbox.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.fritzbox.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.fritzbox.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.fritzbox.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.fritzbox.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9133"
        },
        {
            "name": "exporters.fritzbox.user",
            "desc": "User name under which the fritzbox exporter shall be run.",
            "nixName": "exporters.fritzbox.user",
            "type": "string",
            "value": "\"fritzbox-exporter\""
        },
        {
            "name": "exporters.graphite.enable",
            "desc": "Whether to enable the prometheus graphite exporter.",
            "nixName": "exporters.graphite.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.graphite.extraFlags",
            "desc": "Extra commandline options to pass to the graphite exporter.",
            "nixName": "exporters.graphite.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.graphite.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.graphite.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.graphite.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.graphite.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.graphite.openFirewall is true.",
            "nixName": "exporters.graphite.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.graphite.graphitePort",
            "desc": "Port to use for the graphite server.",
            "nixName": "exporters.graphite.graphitePort",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9109"
        },
        {
            "name": "exporters.graphite.group",
            "desc": "Group under which the graphite exporter shall be run.",
            "nixName": "exporters.graphite.group",
            "type": "string",
            "value": "\"graphite-exporter\""
        },
        {
            "name": "exporters.graphite.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.graphite.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.graphite.mappingSettings",
            "desc": "Mapping configuration for the exporter, see  https://github.com/prometheus/graphite_exporter#yaml-config for available options.",
            "nixName": "exporters.graphite.mappingSettings",
            "type": "YAML value",
            "value": "{ }"
        },
        {
            "name": "exporters.graphite.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.graphite.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.graphite.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.graphite.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9108"
        },
        {
            "name": "exporters.graphite.user",
            "desc": "User name under which the graphite exporter shall be run.",
            "nixName": "exporters.graphite.user",
            "type": "string",
            "value": "\"graphite-exporter\""
        },
        {
            "name": "exporters.idrac.configuration",
            "desc": "Configuration for iDRAC exporter, as a nix attribute set.  Configuration reference:  https://github.com/mrlhansen/idrac_exporter/#configuration   Mutually exclusive with  configurationPath  option.",
            "nixName": "exporters.idrac.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "exporters.idrac.configurationPath",
            "desc": "Path to the service\u2019s config file. This path can either be a computedpath in /nix/store or a path in the local filesystem.  The config file should NOT be stored in /nix/store as it will containpasswords and/or keys in plain text.  Mutually exclusive with  configuration  option.  Configuration reference:  https://github.com/mrlhansen/idrac_exporter/#configuration",
            "nixName": "exporters.idrac.configurationPath",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.idrac.enable",
            "desc": "Whether to enable the prometheus idrac exporter.",
            "nixName": "exporters.idrac.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.idrac.extraFlags",
            "desc": "Extra commandline options to pass to the idrac exporter.",
            "nixName": "exporters.idrac.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.idrac.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.idrac.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.idrac.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.idrac.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.idrac.openFirewall  istrue.",
            "nixName": "exporters.idrac.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.idrac.group",
            "desc": "Group under which the idrac exporter shall be run.",
            "nixName": "exporters.idrac.group",
            "type": "string",
            "value": "\"idrac-exporter\""
        },
        {
            "name": "exporters.idrac.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.idrac.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.idrac.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.idrac.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.idrac.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.idrac.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9348"
        },
        {
            "name": "exporters.idrac.user",
            "desc": "User name under which the idrac exporter shall be run.",
            "nixName": "exporters.idrac.user",
            "type": "string",
            "value": "\"idrac-exporter\""
        },
        {
            "name": "exporters.imap-mailstat.accounts",
            "desc": "Accounts to monitor",
            "nixName": "exporters.imap-mailstat.accounts",
            "type": "attribute set of (submodule)",
            "value": "{ }"
        },
        {
            "name": "exporters.imap-mailstat.accounts.<name>.mailaddress",
            "desc": "Your email address (at the moment used as login name)",
            "nixName": "exporters.imap-mailstat.accounts.<name>.mailaddress",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.accounts.<name>.password",
            "desc": "",
            "nixName": "exporters.imap-mailstat.accounts.<name>.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.accounts.<name>.serveraddress",
            "desc": "mailserver name or address",
            "nixName": "exporters.imap-mailstat.accounts.<name>.serveraddress",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.accounts.<name>.serverport",
            "desc": "imap port number (at the moment only tls connection is supported)",
            "nixName": "exporters.imap-mailstat.accounts.<name>.serverport",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.accounts.<name>.starttls",
            "desc": "set to true for using STARTTLS to start a TLS connection",
            "nixName": "exporters.imap-mailstat.accounts.<name>.starttls",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.accounts.<name>.username",
            "desc": "If empty string mailaddress value is used",
            "nixName": "exporters.imap-mailstat.accounts.<name>.username",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.configurationFile",
            "desc": "File containing the configuration",
            "nixName": "exporters.imap-mailstat.configurationFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.imap-mailstat.enable",
            "desc": "Whether to enable the prometheus imap-mailstat exporter.",
            "nixName": "exporters.imap-mailstat.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.imap-mailstat.extraFlags",
            "desc": "Extra commandline options to pass to the imap-mailstat exporter.",
            "nixName": "exporters.imap-mailstat.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.imap-mailstat.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.imap-mailstat.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.imap-mailstat.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.imap-mailstat.openFirewall is true.",
            "nixName": "exporters.imap-mailstat.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.imap-mailstat.group",
            "desc": "Group under which the imap-mailstat exporter shall be run.",
            "nixName": "exporters.imap-mailstat.group",
            "type": "string",
            "value": "\"imap-mailstat-exporter\""
        },
        {
            "name": "exporters.imap-mailstat.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.imap-mailstat.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.imap-mailstat.oldestUnseenDate",
            "desc": "Enable metric with timestamp of oldest unseen mail",
            "nixName": "exporters.imap-mailstat.oldestUnseenDate",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.imap-mailstat.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.imap-mailstat.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.imap-mailstat.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.imap-mailstat.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "8081"
        },
        {
            "name": "exporters.imap-mailstat.user",
            "desc": "User name under which the imap-mailstat exporter shall be run.",
            "nixName": "exporters.imap-mailstat.user",
            "type": "string",
            "value": "\"imap-mailstat-exporter\""
        },
        {
            "name": "exporters.influxdb.enable",
            "desc": "Whether to enable the prometheus influxdb exporter.",
            "nixName": "exporters.influxdb.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.influxdb.extraFlags",
            "desc": "Extra commandline options to pass to the influxdb exporter.",
            "nixName": "exporters.influxdb.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.influxdb.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.influxdb.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.influxdb.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.influxdb.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.influxdb.openFirewall is true.",
            "nixName": "exporters.influxdb.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.influxdb.group",
            "desc": "Group under which the influxdb exporter shall be run.",
            "nixName": "exporters.influxdb.group",
            "type": "string",
            "value": "\"influxdb-exporter\""
        },
        {
            "name": "exporters.influxdb.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.influxdb.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.influxdb.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.influxdb.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.influxdb.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.influxdb.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9122"
        },
        {
            "name": "exporters.influxdb.sampleExpiry",
            "desc": "How long a sample is valid for",
            "nixName": "exporters.influxdb.sampleExpiry",
            "type": "string",
            "value": "\"5m\""
        },
        {
            "name": "exporters.influxdb.udpBindAddress",
            "desc": "Address on which to listen for udp packets",
            "nixName": "exporters.influxdb.udpBindAddress",
            "type": "string",
            "value": "\":9122\""
        },
        {
            "name": "exporters.influxdb.user",
            "desc": "User name under which the influxdb exporter shall be run.",
            "nixName": "exporters.influxdb.user",
            "type": "string",
            "value": "\"influxdb-exporter\""
        },
        {
            "name": "exporters.ipmi.configFile",
            "desc": "Path to configuration file.",
            "nixName": "exporters.ipmi.configFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.ipmi.enable",
            "desc": "Whether to enable the prometheus ipmi exporter.",
            "nixName": "exporters.ipmi.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.ipmi.extraFlags",
            "desc": "Extra commandline options to pass to the ipmi exporter.",
            "nixName": "exporters.ipmi.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.ipmi.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.ipmi.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.ipmi.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.ipmi.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.ipmi.openFirewall  istrue.",
            "nixName": "exporters.ipmi.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.ipmi.group",
            "desc": "Group under which the ipmi exporter shall be run.",
            "nixName": "exporters.ipmi.group",
            "type": "string",
            "value": "\"ipmi-exporter\""
        },
        {
            "name": "exporters.ipmi.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.ipmi.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.ipmi.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.ipmi.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.ipmi.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.ipmi.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9290"
        },
        {
            "name": "exporters.ipmi.user",
            "desc": "User name under which the ipmi exporter shall be run.",
            "nixName": "exporters.ipmi.user",
            "type": "string",
            "value": "\"ipmi-exporter\""
        },
        {
            "name": "exporters.ipmi.webConfigFile",
            "desc": "Path to configuration file that can enable TLS or authentication.",
            "nixName": "exporters.ipmi.webConfigFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.jitsi.enable",
            "desc": "Whether to enable the prometheus jitsi exporter.",
            "nixName": "exporters.jitsi.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.jitsi.extraFlags",
            "desc": "Extra commandline options to pass to the jitsi exporter.",
            "nixName": "exporters.jitsi.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.jitsi.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.jitsi.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.jitsi.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.jitsi.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.jitsi.openFirewall  istrue.",
            "nixName": "exporters.jitsi.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.jitsi.group",
            "desc": "Group under which the jitsi exporter shall be run.",
            "nixName": "exporters.jitsi.group",
            "type": "string",
            "value": "\"jitsi-exporter\""
        },
        {
            "name": "exporters.jitsi.interval",
            "desc": "How often to scrape new data",
            "nixName": "exporters.jitsi.interval",
            "type": "string",
            "value": "\"30s\""
        },
        {
            "name": "exporters.jitsi.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.jitsi.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.jitsi.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.jitsi.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.jitsi.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.jitsi.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9700"
        },
        {
            "name": "exporters.jitsi.url",
            "desc": "Jitsi Videobridge metrics URL to monitor. This is usually/colibri/stats on port 8080 of the jitsi videobridge host.",
            "nixName": "exporters.jitsi.url",
            "type": "string",
            "value": "\"http://localhost:8080/colibri/stats\""
        },
        {
            "name": "exporters.jitsi.user",
            "desc": "User name under which the jitsi exporter shall be run.",
            "nixName": "exporters.jitsi.user",
            "type": "string",
            "value": "\"jitsi-exporter\""
        },
        {
            "name": "exporters.json.configFile",
            "desc": "Path to configuration file.",
            "nixName": "exporters.json.configFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.json.enable",
            "desc": "Whether to enable the prometheus json exporter.",
            "nixName": "exporters.json.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.json.extraFlags",
            "desc": "Extra commandline options to pass to the json exporter.",
            "nixName": "exporters.json.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.json.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.json.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.json.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.json.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.json.openFirewall  istrue.",
            "nixName": "exporters.json.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.json.group",
            "desc": "Group under which the json exporter shall be run.",
            "nixName": "exporters.json.group",
            "type": "string",
            "value": "\"json-exporter\""
        },
        {
            "name": "exporters.json.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.json.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.json.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.json.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.json.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.json.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "7979"
        },
        {
            "name": "exporters.json.user",
            "desc": "User name under which the json exporter shall be run.",
            "nixName": "exporters.json.user",
            "type": "string",
            "value": "\"json-exporter\""
        },
        {
            "name": "exporters.junos-czerwonk.configuration",
            "desc": "JunOS exporter configuration as nix attribute set. Mutually exclusivewith the  configurationFile  option.",
            "nixName": "exporters.junos-czerwonk.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "exporters.junos-czerwonk.configurationFile",
            "desc": "Specify the JunOS exporter configuration file to use.",
            "nixName": "exporters.junos-czerwonk.configurationFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.junos-czerwonk.enable",
            "desc": "Whether to enable the prometheus junos-czerwonk exporter.",
            "nixName": "exporters.junos-czerwonk.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.junos-czerwonk.environmentFile",
            "desc": "File containing env-vars to be substituted into the exporter\u2019sconfig.",
            "nixName": "exporters.junos-czerwonk.environmentFile",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.junos-czerwonk.extraFlags",
            "desc": "Extra commandline options to pass to the junos-czerwonk exporter.",
            "nixName": "exporters.junos-czerwonk.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.junos-czerwonk.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.junos-czerwonk.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.junos-czerwonk.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.junos-czerwonk.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.junos-czerwonk.openFirewall is true.",
            "nixName": "exporters.junos-czerwonk.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.junos-czerwonk.group",
            "desc": "Group under which the junos-czerwonk exporter shall be run.",
            "nixName": "exporters.junos-czerwonk.group",
            "type": "string",
            "value": "\"junos-czerwonk-exporter\""
        },
        {
            "name": "exporters.junos-czerwonk.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.junos-czerwonk.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.junos-czerwonk.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.junos-czerwonk.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.junos-czerwonk.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.junos-czerwonk.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9326"
        },
        {
            "name": "exporters.junos-czerwonk.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.junos-czerwonk.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.junos-czerwonk.user",
            "desc": "User name under which the junos-czerwonk exporter shall be run.",
            "nixName": "exporters.junos-czerwonk.user",
            "type": "string",
            "value": "\"junos-czerwonk-exporter\""
        },
        {
            "name": "exporters.kea.enable",
            "desc": "Whether to enable the prometheus kea exporter.",
            "nixName": "exporters.kea.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.kea.extraFlags",
            "desc": "Extra commandline options to pass to the kea exporter.",
            "nixName": "exporters.kea.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.kea.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.kea.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.kea.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.kea.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.kea.openFirewall  istrue.",
            "nixName": "exporters.kea.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.kea.group",
            "desc": "Group under which the kea exporter shall be run.",
            "nixName": "exporters.kea.group",
            "type": "string",
            "value": "\"kea-exporter\""
        },
        {
            "name": "exporters.kea.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.kea.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.kea.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.kea.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.kea.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.kea.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9547"
        },
        {
            "name": "exporters.kea.targets",
            "desc": "Paths or URLs to the Kea control socket.",
            "nixName": "exporters.kea.targets",
            "type": "list of string",
            "value": null
        },
        {
            "name": "exporters.kea.user",
            "desc": "User name under which the kea exporter shall be run.",
            "nixName": "exporters.kea.user",
            "type": "string",
            "value": "\"kea-exporter\""
        },
        {
            "name": "exporters.keylight.enable",
            "desc": "Whether to enable the prometheus keylight exporter.",
            "nixName": "exporters.keylight.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.keylight.extraFlags",
            "desc": "Extra commandline options to pass to the keylight exporter.",
            "nixName": "exporters.keylight.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.keylight.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.keylight.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.keylight.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.keylight.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.keylight.openFirewall is true.",
            "nixName": "exporters.keylight.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.keylight.group",
            "desc": "Group under which the keylight exporter shall be run.",
            "nixName": "exporters.keylight.group",
            "type": "string",
            "value": "\"keylight-exporter\""
        },
        {
            "name": "exporters.keylight.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.keylight.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.keylight.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.keylight.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.keylight.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.keylight.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9288"
        },
        {
            "name": "exporters.keylight.user",
            "desc": "User name under which the keylight exporter shall be run.",
            "nixName": "exporters.keylight.user",
            "type": "string",
            "value": "\"keylight-exporter\""
        },
        {
            "name": "exporters.knot.enable",
            "desc": "Whether to enable the prometheus knot exporter.",
            "nixName": "exporters.knot.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.knot.extraFlags",
            "desc": "Extra commandline options to pass to the knot exporter.",
            "nixName": "exporters.knot.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.knot.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.knot.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.knot.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.knot.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.knot.openFirewall  istrue.",
            "nixName": "exporters.knot.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.knot.group",
            "desc": "Group under which the knot exporter shall be run.",
            "nixName": "exporters.knot.group",
            "type": "string",
            "value": "\"knot-exporter\""
        },
        {
            "name": "exporters.knot.knotLibraryPath",
            "desc": "Path to the library of  knot-dns .",
            "nixName": "exporters.knot.knotLibraryPath",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.knot.knotSocketPath",
            "desc": "Socket path of  knotd(8) .",
            "nixName": "exporters.knot.knotSocketPath",
            "type": "string",
            "value": "\"/run/knot/knot.sock\""
        },
        {
            "name": "exporters.knot.knotSocketTimeout",
            "desc": "Timeout in seconds.",
            "nixName": "exporters.knot.knotSocketTimeout",
            "type": "positive integer, meaning >0",
            "value": "2000"
        },
        {
            "name": "exporters.knot.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.knot.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.knot.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.knot.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.knot.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.knot.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9433"
        },
        {
            "name": "exporters.knot.user",
            "desc": "User name under which the knot exporter shall be run.",
            "nixName": "exporters.knot.user",
            "type": "string",
            "value": "\"knot-exporter\""
        },
        {
            "name": "exporters.lnd.enable",
            "desc": "Whether to enable the prometheus lnd exporter.",
            "nixName": "exporters.lnd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.lnd.extraFlags",
            "desc": "Extra commandline options to pass to the lnd exporter.",
            "nixName": "exporters.lnd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.lnd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.lnd.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.lnd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.lnd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.lnd.openFirewall  istrue.",
            "nixName": "exporters.lnd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.lnd.group",
            "desc": "Group under which the lnd exporter shall be run.",
            "nixName": "exporters.lnd.group",
            "type": "string",
            "value": "\"lnd-exporter\""
        },
        {
            "name": "exporters.lnd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.lnd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.lnd.lndHost",
            "desc": "lnd instance gRPC address:port.",
            "nixName": "exporters.lnd.lndHost",
            "type": "string",
            "value": "\"localhost:10009\""
        },
        {
            "name": "exporters.lnd.lndMacaroonDir",
            "desc": "Path to lnd macaroons.",
            "nixName": "exporters.lnd.lndMacaroonDir",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.lnd.lndTlsPath",
            "desc": "Path to lnd TLS certificate.",
            "nixName": "exporters.lnd.lndTlsPath",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.lnd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.lnd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.lnd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.lnd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9092"
        },
        {
            "name": "exporters.lnd.user",
            "desc": "User name under which the lnd exporter shall be run.",
            "nixName": "exporters.lnd.user",
            "type": "string",
            "value": "\"lnd-exporter\""
        },
        {
            "name": "exporters.mail.configFile",
            "desc": "Specify the mailexporter configuration file to use.",
            "nixName": "exporters.mail.configFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.mail.configuration",
            "desc": "Specify the mailexporter configuration file to use.",
            "nixName": "exporters.mail.configuration",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "exporters.mail.configuration.disableFileDeletion",
            "desc": "Disables the exporter\u2019s function to delete probing mails.",
            "nixName": "exporters.mail.configuration.disableFileDeletion",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mail.configuration.mailCheckTimeout",
            "desc": "Timeout until mails are considered \u201cdidn\u2019t make it\u201d.",
            "nixName": "exporters.mail.configuration.mailCheckTimeout",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.monitoringInterval",
            "desc": "Time interval between two probe attempts.",
            "nixName": "exporters.mail.configuration.monitoringInterval",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.servers",
            "desc": "List of servers that should be probed.   Note:  if your mailserver has  rspamd(8)  configured, it can happen that emailsfrom this exporter are marked as spam.  It\u2019s possible to work around the issue with a config like this:   {  services.rspamd.locals.\"multimap.conf\".text = ''    ALLOWLIST_PROMETHEUS {      filter = \"email:domain:tld\";      type = \"from\";      map = \"${pkgs.writeText \"allowmap\" \"domain.tld\"}\";      score = -100.0;    }  '';}",
            "nixName": "exporters.mail.configuration.servers",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "exporters.mail.configuration.servers.*.detectionDir",
            "desc": "Directory in which new mails for the exporter user are placed. Notethat this needs to exist when the exporter starts.",
            "nixName": "exporters.mail.configuration.servers.*.detectionDir",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.servers.*.from",
            "desc": "Content of \u2018From\u2019 Header for probing mails.",
            "nixName": "exporters.mail.configuration.servers.*.from",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.servers.*.login",
            "desc": "Username to use for SMTP authentication.",
            "nixName": "exporters.mail.configuration.servers.*.login",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mail.configuration.servers.*.name",
            "desc": "Value for label \u2018configname\u2019 which will be added to all metrics.",
            "nixName": "exporters.mail.configuration.servers.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.servers.*.passphrase",
            "desc": "Password to use for SMTP authentication.",
            "nixName": "exporters.mail.configuration.servers.*.passphrase",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mail.configuration.servers.*.port",
            "desc": "Port to use for SMTP.",
            "nixName": "exporters.mail.configuration.servers.*.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.servers.*.server",
            "desc": "Hostname of the server that should be probed.",
            "nixName": "exporters.mail.configuration.servers.*.server",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.mail.configuration.servers.*.to",
            "desc": "Content of \u2018To\u2019 Header for probing mails.",
            "nixName": "exporters.mail.configuration.servers.*.to",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.mail.enable",
            "desc": "Whether to enable the prometheus mail exporter.",
            "nixName": "exporters.mail.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mail.environmentFile",
            "desc": "File containing env-vars to be substituted into the exporter\u2019sconfig.",
            "nixName": "exporters.mail.environmentFile",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mail.extraFlags",
            "desc": "Extra commandline options to pass to the mail exporter.",
            "nixName": "exporters.mail.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mail.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.mail.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.mail.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mail.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.mail.openFirewall  istrue.",
            "nixName": "exporters.mail.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.mail.group",
            "desc": "Group under which the mail exporter shall be run.",
            "nixName": "exporters.mail.group",
            "type": "string",
            "value": "\"mail-exporter\""
        },
        {
            "name": "exporters.mail.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.mail.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.mail.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.mail.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mail.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.mail.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9225"
        },
        {
            "name": "exporters.mail.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.mail.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.mail.user",
            "desc": "User name under which the mail exporter shall be run.",
            "nixName": "exporters.mail.user",
            "type": "string",
            "value": "\"mail-exporter\""
        },
        {
            "name": "exporters.mikrotik.configFile",
            "desc": "Path to a mikrotik exporter configuration file. Mutually exclusivewith  configuration option.",
            "nixName": "exporters.mikrotik.configFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.mikrotik.configuration",
            "desc": "Mikrotik exporter configuration as nix attribute set. Mutuallyexclusive with  configFile  option.  See  https://github.com/nshttpd/mikrotik-exporter/blob/master/README.md for the description of the configuration file format.",
            "nixName": "exporters.mikrotik.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "exporters.mikrotik.enable",
            "desc": "Whether to enable the prometheus mikrotik exporter.",
            "nixName": "exporters.mikrotik.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mikrotik.extraFlags",
            "desc": "Extra commandline options to pass to the mikrotik exporter.",
            "nixName": "exporters.mikrotik.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mikrotik.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.mikrotik.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.mikrotik.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mikrotik.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.mikrotik.openFirewall is true.",
            "nixName": "exporters.mikrotik.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.mikrotik.group",
            "desc": "Group under which the mikrotik exporter shall be run.",
            "nixName": "exporters.mikrotik.group",
            "type": "string",
            "value": "\"mikrotik-exporter\""
        },
        {
            "name": "exporters.mikrotik.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.mikrotik.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.mikrotik.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.mikrotik.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mikrotik.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.mikrotik.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9436"
        },
        {
            "name": "exporters.mikrotik.user",
            "desc": "User name under which the mikrotik exporter shall be run.",
            "nixName": "exporters.mikrotik.user",
            "type": "string",
            "value": "\"mikrotik-exporter\""
        },
        {
            "name": "exporters.modemmanager.enable",
            "desc": "Whether to enable the prometheus modemmanager exporter.",
            "nixName": "exporters.modemmanager.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.modemmanager.extraFlags",
            "desc": "Extra commandline options to pass to the modemmanager exporter.",
            "nixName": "exporters.modemmanager.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.modemmanager.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.modemmanager.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.modemmanager.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.modemmanager.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.modemmanager.openFirewall is true.",
            "nixName": "exporters.modemmanager.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.modemmanager.group",
            "desc": "Group under which the modemmanager exporter shall be run.",
            "nixName": "exporters.modemmanager.group",
            "type": "string",
            "value": "\"modemmanager-exporter\""
        },
        {
            "name": "exporters.modemmanager.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.modemmanager.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.modemmanager.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.modemmanager.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.modemmanager.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.modemmanager.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9539"
        },
        {
            "name": "exporters.modemmanager.refreshRate",
            "desc": "How frequently ModemManager will refresh the extended signal qualityinformation for each modem. The duration should be specified in seconds(\u201c5s\u201d), minutes (\u201c1m\u201d), or hours (\u201c1h\u201d).",
            "nixName": "exporters.modemmanager.refreshRate",
            "type": "string",
            "value": "\"5s\""
        },
        {
            "name": "exporters.modemmanager.user",
            "desc": "User name under which the modemmanager exporter shall be run.",
            "nixName": "exporters.modemmanager.user",
            "type": "string",
            "value": "\"modemmanager-exporter\""
        },
        {
            "name": "exporters.mongodb.collStats",
            "desc": "List of comma separared databases.collections to get $collStats",
            "nixName": "exporters.mongodb.collStats",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mongodb.collectAll",
            "desc": "Enable all collectors. Same as specifying all \u2013collector.",
            "nixName": "exporters.mongodb.collectAll",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mongodb.collector",
            "desc": "Enabled collectors",
            "nixName": "exporters.mongodb.collector",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mongodb.enable",
            "desc": "Whether to enable the prometheus mongodb exporter.",
            "nixName": "exporters.mongodb.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mongodb.extraFlags",
            "desc": "Extra commandline options to pass to the mongodb exporter.",
            "nixName": "exporters.mongodb.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mongodb.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.mongodb.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.mongodb.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mongodb.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.mongodb.openFirewall is true.",
            "nixName": "exporters.mongodb.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.mongodb.group",
            "desc": "Group under which the mongodb exporter shall be run.",
            "nixName": "exporters.mongodb.group",
            "type": "string",
            "value": "\"mongodb-exporter\""
        },
        {
            "name": "exporters.mongodb.indexStats",
            "desc": "List of comma separared databases.collections to get $indexStats",
            "nixName": "exporters.mongodb.indexStats",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mongodb.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.mongodb.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.mongodb.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.mongodb.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mongodb.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.mongodb.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9216"
        },
        {
            "name": "exporters.mongodb.telemetryPath",
            "desc": "Metrics expose path",
            "nixName": "exporters.mongodb.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.mongodb.uri",
            "desc": "MongoDB URI to connect to.",
            "nixName": "exporters.mongodb.uri",
            "type": "string",
            "value": "\"mongodb://localhost:27017/test\""
        },
        {
            "name": "exporters.mongodb.user",
            "desc": "User name under which the mongodb exporter shall be run.",
            "nixName": "exporters.mongodb.user",
            "type": "string",
            "value": "\"mongodb-exporter\""
        },
        {
            "name": "exporters.mysqld.configFile",
            "desc": "Path to the services config file.  See  https://github.com/prometheus/mysqld_exporter#running for more information about the available options.   Please do not store this file in the nix store if you choose toinclude any credentials here, as it would be world-readable.",
            "nixName": "exporters.mysqld.configFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.mysqld.enable",
            "desc": "Whether to enable the prometheus mysqld exporter.",
            "nixName": "exporters.mysqld.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mysqld.extraFlags",
            "desc": "Extra commandline options to pass to the mysqld exporter.",
            "nixName": "exporters.mysqld.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.mysqld.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.mysqld.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.mysqld.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.mysqld.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.mysqld.openFirewall is true.",
            "nixName": "exporters.mysqld.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.mysqld.group",
            "desc": "Group under which the mysqld exporter shall be run.",
            "nixName": "exporters.mysqld.group",
            "type": "string",
            "value": "\"mysqld-exporter\""
        },
        {
            "name": "exporters.mysqld.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.mysqld.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.mysqld.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.mysqld.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mysqld.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.mysqld.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9104"
        },
        {
            "name": "exporters.mysqld.runAsLocalSuperUser",
            "desc": "Whether to run the exporter as  services.mysql.user .",
            "nixName": "exporters.mysqld.runAsLocalSuperUser",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.mysqld.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.mysqld.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.mysqld.user",
            "desc": "User name under which the mysqld exporter shall be run.",
            "nixName": "exporters.mysqld.user",
            "type": "string",
            "value": "\"mysqld-exporter\""
        },
        {
            "name": "exporters.nats.enable",
            "desc": "Whether to enable the prometheus nats exporter.",
            "nixName": "exporters.nats.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nats.extraFlags",
            "desc": "Extra commandline options to pass to the nats exporter.",
            "nixName": "exporters.nats.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nats.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.nats.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.nats.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.nats.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.nats.openFirewall  istrue.",
            "nixName": "exporters.nats.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.nats.group",
            "desc": "Group under which the nats exporter shall be run.",
            "nixName": "exporters.nats.group",
            "type": "string",
            "value": "\"nats-exporter\""
        },
        {
            "name": "exporters.nats.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.nats.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.nats.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.nats.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nats.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.nats.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "7777"
        },
        {
            "name": "exporters.nats.url",
            "desc": "NATS monitor endpoint to query.",
            "nixName": "exporters.nats.url",
            "type": "string",
            "value": "\"http://127.0.0.1:8222\""
        },
        {
            "name": "exporters.nats.user",
            "desc": "User name under which the nats exporter shall be run.",
            "nixName": "exporters.nats.user",
            "type": "string",
            "value": "\"nats-exporter\""
        },
        {
            "name": "exporters.nextcloud.enable",
            "desc": "Whether to enable the prometheus nextcloud exporter.",
            "nixName": "exporters.nextcloud.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nextcloud.extraFlags",
            "desc": "Extra commandline options to pass to the nextcloud exporter.",
            "nixName": "exporters.nextcloud.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nextcloud.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.nextcloud.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.nextcloud.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.nextcloud.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.nextcloud.openFirewall is true.",
            "nixName": "exporters.nextcloud.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.nextcloud.group",
            "desc": "Group under which the nextcloud exporter shall be run.",
            "nixName": "exporters.nextcloud.group",
            "type": "string",
            "value": "\"nextcloud-exporter\""
        },
        {
            "name": "exporters.nextcloud.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.nextcloud.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.nextcloud.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.nextcloud.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nextcloud.passwordFile",
            "desc": "File containing the password for connecting to Nextcloud. Make surethat this file is readable by the exporter user.",
            "nixName": "exporters.nextcloud.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.nextcloud.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.nextcloud.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9205"
        },
        {
            "name": "exporters.nextcloud.timeout",
            "desc": "Timeout for getting server info document.",
            "nixName": "exporters.nextcloud.timeout",
            "type": "string",
            "value": "\"5s\""
        },
        {
            "name": "exporters.nextcloud.tokenFile",
            "desc": "File containing the token for connecting to Nextcloud. Make sure thatthis file is readable by the exporter user.",
            "nixName": "exporters.nextcloud.tokenFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.nextcloud.url",
            "desc": "URL to the Nextcloud serverinfo page. Adding the path to theserverinfo API is optional, it defaults to /ocs/v2.php/apps/serverinfo/api/v1/info .",
            "nixName": "exporters.nextcloud.url",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.nextcloud.user",
            "desc": "User name under which the nextcloud exporter shall be run.",
            "nixName": "exporters.nextcloud.user",
            "type": "string",
            "value": "\"nextcloud-exporter\""
        },
        {
            "name": "exporters.nextcloud.username",
            "desc": "Username for connecting to Nextcloud. Note that this account needs tohave admin privileges in Nextcloud. Unused when using tokenauthentication.",
            "nixName": "exporters.nextcloud.username",
            "type": "string",
            "value": "\"nextcloud-exporter\""
        },
        {
            "name": "exporters.nginx.constLabels",
            "desc": "A list of constant labels that will be used in every metric.",
            "nixName": "exporters.nginx.constLabels",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nginx.enable",
            "desc": "Whether to enable the prometheus nginx exporter.",
            "nixName": "exporters.nginx.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nginx.extraFlags",
            "desc": "Extra commandline options to pass to the nginx exporter.",
            "nixName": "exporters.nginx.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nginx.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.nginx.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.nginx.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.nginx.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.nginx.openFirewall  istrue.",
            "nixName": "exporters.nginx.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.nginx.group",
            "desc": "Group under which the nginx exporter shall be run.",
            "nixName": "exporters.nginx.group",
            "type": "string",
            "value": "\"nginx-exporter\""
        },
        {
            "name": "exporters.nginx.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.nginx.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.nginx.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.nginx.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nginx.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.nginx.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9113"
        },
        {
            "name": "exporters.nginx.scrapeUri",
            "desc": "Address to access the nginx status page. Can be enabled withservices.nginx.statusPage = true.",
            "nixName": "exporters.nginx.scrapeUri",
            "type": "string",
            "value": "\"http://localhost/nginx_status\""
        },
        {
            "name": "exporters.nginx.sslVerify",
            "desc": "Whether to perform certificate verification for https.",
            "nixName": "exporters.nginx.sslVerify",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.nginx.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.nginx.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.nginx.user",
            "desc": "User name under which the nginx exporter shall be run.",
            "nixName": "exporters.nginx.user",
            "type": "string",
            "value": "\"nginx-exporter\""
        },
        {
            "name": "exporters.nginxlog.enable",
            "desc": "Whether to enable the prometheus nginxlog exporter.",
            "nixName": "exporters.nginxlog.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nginxlog.extraFlags",
            "desc": "Extra commandline options to pass to the nginxlog exporter.",
            "nixName": "exporters.nginxlog.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nginxlog.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.nginxlog.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.nginxlog.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.nginxlog.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.nginxlog.openFirewall is true.",
            "nixName": "exporters.nginxlog.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.nginxlog.group",
            "desc": "Group under which the nginxlog exporter shall be run.",
            "nixName": "exporters.nginxlog.group",
            "type": "string",
            "value": "\"nginxlog-exporter\""
        },
        {
            "name": "exporters.nginxlog.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.nginxlog.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.nginxlog.metricsEndpoint",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.nginxlog.metricsEndpoint",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.nginxlog.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.nginxlog.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nginxlog.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.nginxlog.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9117"
        },
        {
            "name": "exporters.nginxlog.settings",
            "desc": "All settings of nginxlog expressed as an Nix attrset.  Check the official documentation for the corresponding YAML settingsthat can all be used here:  https://github.com/martin-helmich/prometheus-nginxlog-exporter   The  listen  object is already generated by port ,  listenAddress  and metricsEndpoint  and will be merged with the value of settings  before writing it as JSON.",
            "nixName": "exporters.nginxlog.settings",
            "type": "attribute set",
            "value": "{ }"
        },
        {
            "name": "exporters.nginxlog.user",
            "desc": "User name under which the nginxlog exporter shall be run.",
            "nixName": "exporters.nginxlog.user",
            "type": "string",
            "value": "\"nginxlog-exporter\""
        },
        {
            "name": "exporters.node.disabledCollectors",
            "desc": "Collectors to disable which are enabled by default.",
            "nixName": "exporters.node.disabledCollectors",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.node.enable",
            "desc": "Whether to enable the prometheus node exporter.",
            "nixName": "exporters.node.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.node.enabledCollectors",
            "desc": "Collectors to enable. The collectors listed here are enabled inaddition to the default ones.",
            "nixName": "exporters.node.enabledCollectors",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.node.extraFlags",
            "desc": "Extra commandline options to pass to the node exporter.",
            "nixName": "exporters.node.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.node.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.node.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.node.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.node.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.node.openFirewall  istrue.",
            "nixName": "exporters.node.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.node.group",
            "desc": "Group under which the node exporter shall be run.",
            "nixName": "exporters.node.group",
            "type": "string",
            "value": "\"node-exporter\""
        },
        {
            "name": "exporters.node.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.node.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.node.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.node.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.node.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.node.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9100"
        },
        {
            "name": "exporters.node.user",
            "desc": "User name under which the node exporter shall be run.",
            "nixName": "exporters.node.user",
            "type": "string",
            "value": "\"node-exporter\""
        },
        {
            "name": "exporters.nut.enable",
            "desc": "Whether to enable the prometheus nut exporter.",
            "nixName": "exporters.nut.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nut.extraFlags",
            "desc": "Extra commandline options to pass to the nut exporter.",
            "nixName": "exporters.nut.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nut.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.nut.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.nut.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.nut.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.nut.openFirewall  istrue.",
            "nixName": "exporters.nut.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.nut.group",
            "desc": "Group under which the nut exporter shall be run.",
            "nixName": "exporters.nut.group",
            "type": "string",
            "value": "\"nut-exporter\""
        },
        {
            "name": "exporters.nut.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.nut.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.nut.nutServer",
            "desc": "Hostname or address of the NUT server",
            "nixName": "exporters.nut.nutServer",
            "type": "string",
            "value": "\"127.0.0.1\""
        },
        {
            "name": "exporters.nut.nutUser",
            "desc": "The user to log in into NUT server. If set, passwordPath should alsobe set.  Default NUT configs usually permit reading variables withoutauthentication.",
            "nixName": "exporters.nut.nutUser",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.nut.nutVariables",
            "desc": "List of NUT variable names to monitor.  If no variables are set, all numeric variables will be exportedautomatically. See the  upstreamdocs  for more information.",
            "nixName": "exporters.nut.nutVariables",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.nut.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.nut.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.nut.passwordPath",
            "desc": "A run-time path to the nutUser password file, which should beprovisioned outside of Nix store.",
            "nixName": "exporters.nut.passwordPath",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.nut.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.nut.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9199"
        },
        {
            "name": "exporters.nut.user",
            "desc": "User name under which the nut exporter shall be run.",
            "nixName": "exporters.nut.user",
            "type": "string",
            "value": "\"nut-exporter\""
        },
        {
            "name": "exporters.openldap.enable",
            "desc": "Whether to enable the prometheus openldap exporter.",
            "nixName": "exporters.openldap.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.openldap.extraFlags",
            "desc": "Extra commandline options to pass to the openldap exporter.",
            "nixName": "exporters.openldap.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.openldap.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.openldap.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.openldap.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.openldap.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.openldap.openFirewall is true.",
            "nixName": "exporters.openldap.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.openldap.group",
            "desc": "Group under which the openldap exporter shall be run.",
            "nixName": "exporters.openldap.group",
            "type": "string",
            "value": "\"openldap-exporter\""
        },
        {
            "name": "exporters.openldap.interval",
            "desc": "Scrape interval of the exporter.",
            "nixName": "exporters.openldap.interval",
            "type": "string",
            "value": "\"30s\""
        },
        {
            "name": "exporters.openldap.ldapAddr",
            "desc": "Address of the  openldap -instance.",
            "nixName": "exporters.openldap.ldapAddr",
            "type": "string",
            "value": "\"localhost:389\""
        },
        {
            "name": "exporters.openldap.ldapCredentialFile",
            "desc": "Environment file to contain the credentials to authenticate against openldap .  The file should look like this:   ---ldapUser: \"cn=monitoring,cn=Monitor\"ldapPass: \"secret\"",
            "nixName": "exporters.openldap.ldapCredentialFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.openldap.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.openldap.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.openldap.metricsPath",
            "desc": "URL path where metrics should be exposed.",
            "nixName": "exporters.openldap.metricsPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.openldap.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.openldap.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.openldap.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.openldap.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9330"
        },
        {
            "name": "exporters.openldap.protocol",
            "desc": "Which protocol to use to connect against  openldap .",
            "nixName": "exporters.openldap.protocol",
            "type": "string",
            "value": "\"tcp\""
        },
        {
            "name": "exporters.openldap.user",
            "desc": "User name under which the openldap exporter shall be run.",
            "nixName": "exporters.openldap.user",
            "type": "string",
            "value": "\"openldap-exporter\""
        },
        {
            "name": "exporters.pgbouncer.connectionString",
            "desc": "Connection string for accessing pgBouncer.  NOTE: You MUST keep pgbouncer as database name (special internaldb)!!!  NOTE: Admin user (with password or passwordless) MUST exist in theservices.pgbouncer.authFile if authType other than any is used.  WARNING: this secret is stored in the world-readable Nix store! Use connectionStringFile instead.",
            "nixName": "exporters.pgbouncer.connectionString",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.pgbouncer.connectionStringFile",
            "desc": "File that contains pgBouncer connection string in format:postgres://admin:@localhost:6432/pgbouncer?sslmode=require  NOTE: You MUST keep pgbouncer as database name (special internaldb)!!!  NOTE: Admin user (with password or passwordless) MUST exist in theservices.pgbouncer.authFile if authType other than any is used.   connectionStringFile  takes precedence over  connectionString",
            "nixName": "exporters.pgbouncer.connectionStringFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.pgbouncer.enable",
            "desc": "Whether to enable the prometheus pgbouncer exporter.",
            "nixName": "exporters.pgbouncer.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.pgbouncer.extraFlags",
            "desc": "Extra commandline options when launching Prometheus.",
            "nixName": "exporters.pgbouncer.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.pgbouncer.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.pgbouncer.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.pgbouncer.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.pgbouncer.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.pgbouncer.openFirewall is true.",
            "nixName": "exporters.pgbouncer.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.pgbouncer.group",
            "desc": "Group under which the pgbouncer exporter shall be run.",
            "nixName": "exporters.pgbouncer.group",
            "type": "string",
            "value": "\"pgbouncer-exporter\""
        },
        {
            "name": "exporters.pgbouncer.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.pgbouncer.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.pgbouncer.logFormat",
            "desc": "Output format of log messages. One of: [logfmt, json]",
            "nixName": "exporters.pgbouncer.logFormat",
            "type": "one of \"logfmt\", \"json\"",
            "value": "\"logfmt\""
        },
        {
            "name": "exporters.pgbouncer.logLevel",
            "desc": "Only log messages with the given severity or above.",
            "nixName": "exporters.pgbouncer.logLevel",
            "type": "one of \"debug\", \"info\", \"warn\", \"error\"",
            "value": "\"info\""
        },
        {
            "name": "exporters.pgbouncer.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.pgbouncer.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.pgbouncer.pidFile",
            "desc": "Path to PgBouncer pid file.  If provided, the standard process metrics get exported for thePgBouncer process, prefixed with \u2018pgbouncer_process_\u2026\u2019. Thepgbouncer_process exporter needs to have read access to files owned bythe PgBouncer process. Depends on the availability of /proc.   https://prometheus.io/docs/instrumenting/writing_clientlibs/#process-metrics .",
            "nixName": "exporters.pgbouncer.pidFile",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.pgbouncer.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.pgbouncer.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9127"
        },
        {
            "name": "exporters.pgbouncer.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.pgbouncer.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.pgbouncer.user",
            "desc": "User name under which the pgbouncer exporter shall be run.",
            "nixName": "exporters.pgbouncer.user",
            "type": "string",
            "value": "\"pgbouncer-exporter\""
        },
        {
            "name": "exporters.pgbouncer.webConfigFile",
            "desc": "Path to configuration file that can enable TLS or authentication.",
            "nixName": "exporters.pgbouncer.webConfigFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.pgbouncer.webSystemdSocket",
            "desc": "Use systemd socket activation listeners instead of port listeners(Linux only).",
            "nixName": "exporters.pgbouncer.webSystemdSocket",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.php-fpm.enable",
            "desc": "Whether to enable the prometheus php-fpm exporter.",
            "nixName": "exporters.php-fpm.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.php-fpm.environmentFile",
            "desc": "Environment file as defined in   systemd.exec(5)  .  Secrets may be passed to the service without adding them to theworld-readable Nix store, by specifying placeholder variables as theoption value in Nix and setting these variables accordingly in theenvironment file.  Environment variables from this file will be interpolated into theconfig file using envsubst with this syntax: $ENVIRONMENT ${VARIABLE}   For variables to use see  optionsand defaults .  The main use is to set the PHP_FPM_SCRAPE_URI that indicate how toconnect to PHP-FPM process.     # Content of the environment file  PHP_FPM_SCRAPE_URI=\"unix:///tmp/php.sock;/status\"   Note that this file needs to be available on the host on which thisexporter is running.",
            "nixName": "exporters.php-fpm.environmentFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.php-fpm.extraFlags",
            "desc": "Extra commandline options to pass to the php-fpm exporter.",
            "nixName": "exporters.php-fpm.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.php-fpm.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.php-fpm.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.php-fpm.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.php-fpm.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.php-fpm.openFirewall is true.",
            "nixName": "exporters.php-fpm.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.php-fpm.group",
            "desc": "Group under which the php-fpm exporter shall be run.",
            "nixName": "exporters.php-fpm.group",
            "type": "string",
            "value": "\"php-fpm-exporter\""
        },
        {
            "name": "exporters.php-fpm.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.php-fpm.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.php-fpm.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.php-fpm.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.php-fpm.package",
            "desc": "The prometheus-php-fpm-exporter package to use.",
            "nixName": "exporters.php-fpm.package",
            "type": "package",
            "value": "pkgs.prometheus-php-fpm-exporter"
        },
        {
            "name": "exporters.php-fpm.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.php-fpm.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9253"
        },
        {
            "name": "exporters.php-fpm.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.php-fpm.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.php-fpm.user",
            "desc": "User name under which the php-fpm exporter shall be run.",
            "nixName": "exporters.php-fpm.user",
            "type": "string",
            "value": "\"php-fpm-exporter\""
        },
        {
            "name": "exporters.pihole.apiToken",
            "desc": "Pi-Hole API token which can be used instead of a password",
            "nixName": "exporters.pihole.apiToken",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.pihole.enable",
            "desc": "Whether to enable the prometheus pihole exporter.",
            "nixName": "exporters.pihole.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.pihole.extraFlags",
            "desc": "Extra commandline options to pass to the pihole exporter.",
            "nixName": "exporters.pihole.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.pihole.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.pihole.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.pihole.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.pihole.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.pihole.openFirewall is true.",
            "nixName": "exporters.pihole.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.pihole.group",
            "desc": "Group under which the pihole exporter shall be run.",
            "nixName": "exporters.pihole.group",
            "type": "string",
            "value": "\"pihole-exporter\""
        },
        {
            "name": "exporters.pihole.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.pihole.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.pihole.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.pihole.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.pihole.password",
            "desc": "The password to login into Pi-Hole. An api token can be usedinstead.",
            "nixName": "exporters.pihole.password",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.pihole.piholeHostname",
            "desc": "Hostname or address where to find the Pi-Hole webinterface",
            "nixName": "exporters.pihole.piholeHostname",
            "type": "string",
            "value": "\"pihole\""
        },
        {
            "name": "exporters.pihole.piholePort",
            "desc": "The port Pi-Hole webinterface is reachable on",
            "nixName": "exporters.pihole.piholePort",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "80"
        },
        {
            "name": "exporters.pihole.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.pihole.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9617"
        },
        {
            "name": "exporters.pihole.protocol",
            "desc": "The protocol which is used to connect to Pi-Hole",
            "nixName": "exporters.pihole.protocol",
            "type": "one of \"http\", \"https\"",
            "value": "\"http\""
        },
        {
            "name": "exporters.pihole.timeout",
            "desc": "Controls the timeout to connect to a Pi-Hole instance",
            "nixName": "exporters.pihole.timeout",
            "type": "string",
            "value": "\"5s\""
        },
        {
            "name": "exporters.pihole.user",
            "desc": "User name under which the pihole exporter shall be run.",
            "nixName": "exporters.pihole.user",
            "type": "string",
            "value": "\"pihole-exporter\""
        },
        {
            "name": "exporters.ping.enable",
            "desc": "Whether to enable the prometheus ping exporter.",
            "nixName": "exporters.ping.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.ping.extraFlags",
            "desc": "Extra commandline options to pass to the ping exporter.",
            "nixName": "exporters.ping.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.ping.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.ping.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.ping.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.ping.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.ping.openFirewall  istrue.",
            "nixName": "exporters.ping.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.ping.group",
            "desc": "Group under which the ping exporter shall be run.",
            "nixName": "exporters.ping.group",
            "type": "string",
            "value": "\"ping-exporter\""
        },
        {
            "name": "exporters.ping.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.ping.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.ping.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.ping.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.ping.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.ping.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9427"
        },
        {
            "name": "exporters.ping.settings",
            "desc": "Configuration for ping_exporter, see  https://github.com/czerwonk/ping_exporter for supported values.",
            "nixName": "exporters.ping.settings",
            "type": "YAML value",
            "value": "{ }"
        },
        {
            "name": "exporters.ping.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.ping.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.ping.user",
            "desc": "User name under which the ping exporter shall be run.",
            "nixName": "exporters.ping.user",
            "type": "string",
            "value": "\"ping-exporter\""
        },
        {
            "name": "exporters.postfix.enable",
            "desc": "Whether to enable the prometheus postfix exporter.",
            "nixName": "exporters.postfix.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.postfix.extraFlags",
            "desc": "Extra commandline options to pass to the postfix exporter.",
            "nixName": "exporters.postfix.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.postfix.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.postfix.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.postfix.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.postfix.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.postfix.openFirewall is true.",
            "nixName": "exporters.postfix.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.postfix.group",
            "desc": "Group under which the postfix exporter shall be run. It should matchthe group that is allowed to access the  showq  socket in the queue/public/  directory. Defaults to services.postfix.setgidGroup  when postfix is enabled.",
            "nixName": "exporters.postfix.group",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.postfix.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.postfix.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.postfix.logfilePath",
            "desc": "Path where Postfix writes log entries. This file will be truncated bythis exporter!",
            "nixName": "exporters.postfix.logfilePath",
            "type": "path",
            "value": "\"/var/log/postfix_exporter_input.log\""
        },
        {
            "name": "exporters.postfix.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.postfix.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.postfix.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.postfix.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9154"
        },
        {
            "name": "exporters.postfix.showqPath",
            "desc": "Path where Postfix places its showq socket.",
            "nixName": "exporters.postfix.showqPath",
            "type": "path",
            "value": "\"/var/lib/postfix/queue/public/showq\""
        },
        {
            "name": "exporters.postfix.systemd.enable",
            "desc": "Whether to enable reading metrics from the systemd journal instead offrom a logfile",
            "nixName": "exporters.postfix.systemd.enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.postfix.systemd.journalPath",
            "desc": "Path to the systemd journal.",
            "nixName": "exporters.postfix.systemd.journalPath",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.postfix.systemd.slice",
            "desc": "Name of the postfix systemd slice. This overrides the  systemd.unit .",
            "nixName": "exporters.postfix.systemd.slice",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.postfix.systemd.unit",
            "desc": "Name of the postfix systemd unit.",
            "nixName": "exporters.postfix.systemd.unit",
            "type": "string",
            "value": "\"postfix.service\""
        },
        {
            "name": "exporters.postfix.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.postfix.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.postfix.user",
            "desc": "User name under which the postfix exporter shall be run.",
            "nixName": "exporters.postfix.user",
            "type": "string",
            "value": "\"postfix-exporter\""
        },
        {
            "name": "exporters.postgres.dataSourceName",
            "desc": "Accepts PostgreSQL URI form and key=value form arguments.",
            "nixName": "exporters.postgres.dataSourceName",
            "type": "string",
            "value": "\"user=postgres database=postgres host=/run/postgresql sslmode=disable\""
        },
        {
            "name": "exporters.postgres.enable",
            "desc": "Whether to enable the prometheus postgres exporter.",
            "nixName": "exporters.postgres.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.postgres.environmentFile",
            "desc": "Environment file as defined in   systemd.exec(5)  .  Secrets may be passed to the service without adding them to theworld-readable Nix store, by specifying placeholder variables as theoption value in Nix and setting these variables accordingly in theenvironment file.  Environment variables from this file will be interpolated into theconfig file using envsubst with this syntax: $ENVIRONMENT ${VARIABLE}   The main use is to set the DATA_SOURCE_NAME that contains thepostgres password  note that contents from this file will override dataSourceName if youhave set it from nix.     # Content of the environment file  DATA_SOURCE_NAME=postgresql://username:password@localhost:5432/postgres?sslmode=disable   Note that this file needs to be available on the host on which thisexporter is running.",
            "nixName": "exporters.postgres.environmentFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.postgres.extraFlags",
            "desc": "Extra commandline options to pass to the postgres exporter.",
            "nixName": "exporters.postgres.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.postgres.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.postgres.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.postgres.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.postgres.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.postgres.openFirewall is true.",
            "nixName": "exporters.postgres.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.postgres.group",
            "desc": "Group under which the postgres exporter shall be run.",
            "nixName": "exporters.postgres.group",
            "type": "string",
            "value": "\"postgres-exporter\""
        },
        {
            "name": "exporters.postgres.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.postgres.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.postgres.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.postgres.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.postgres.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.postgres.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9187"
        },
        {
            "name": "exporters.postgres.runAsLocalSuperUser",
            "desc": "Whether to run the exporter as the local \u2018postgres\u2019 super user.",
            "nixName": "exporters.postgres.runAsLocalSuperUser",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.postgres.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.postgres.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.postgres.user",
            "desc": "User name under which the postgres exporter shall be run.",
            "nixName": "exporters.postgres.user",
            "type": "string",
            "value": "\"postgres-exporter\""
        },
        {
            "name": "exporters.process.enable",
            "desc": "Whether to enable the prometheus process exporter.",
            "nixName": "exporters.process.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.process.extraFlags",
            "desc": "Extra commandline options to pass to the process exporter.",
            "nixName": "exporters.process.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.process.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.process.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.process.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.process.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.process.openFirewall is true.",
            "nixName": "exporters.process.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.process.group",
            "desc": "Group under which the process exporter shall be run.",
            "nixName": "exporters.process.group",
            "type": "string",
            "value": "\"process-exporter\""
        },
        {
            "name": "exporters.process.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.process.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.process.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.process.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.process.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.process.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9256"
        },
        {
            "name": "exporters.process.settings.process_names",
            "desc": "All settings expressed as an Nix attrset.  Check the official documentation for the corresponding YAML settingsthat can all be used here:  https://github.com/ncabatoff/process-exporter",
            "nixName": "exporters.process.settings.process_names",
            "type": "list of anything",
            "value": "[ ]"
        },
        {
            "name": "exporters.process.user",
            "desc": "User name under which the process exporter shall be run.",
            "nixName": "exporters.process.user",
            "type": "string",
            "value": "\"process-exporter\""
        },
        {
            "name": "exporters.pve.collectors.cluster",
            "desc": "Collect PVE cluster info",
            "nixName": "exporters.pve.collectors.cluster",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.pve.collectors.config",
            "desc": "Collect PVE onboot status",
            "nixName": "exporters.pve.collectors.config",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.pve.collectors.node",
            "desc": "Collect PVE node info",
            "nixName": "exporters.pve.collectors.node",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.pve.collectors.resources",
            "desc": "Collect PVE resources info",
            "nixName": "exporters.pve.collectors.resources",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.pve.collectors.status",
            "desc": "Collect Node/VM/CT status",
            "nixName": "exporters.pve.collectors.status",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.pve.collectors.version",
            "desc": "Collect PVE version info",
            "nixName": "exporters.pve.collectors.version",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.pve.configFile",
            "desc": "Path to the service\u2019s config file. This path can either be a computedpath in /nix/store or a path in the local filesystem.  The config file should NOT be stored in /nix/store as it will containpasswords and/or keys in plain text.  If both configFile and environmentFile are provided, the configFileoption will be ignored.  Configuration reference:  https://github.com/prometheus-pve/prometheus-pve-exporter/#authentication",
            "nixName": "exporters.pve.configFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.pve.enable",
            "desc": "Whether to enable the prometheus pve exporter.",
            "nixName": "exporters.pve.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.pve.environmentFile",
            "desc": "Path to the service\u2019s environment file. This path can either be acomputed path in /nix/store or a path in the local filesystem.  The environment file should NOT be stored in /nix/store as itcontains passwords and/or keys in plain text.  Environment reference:  https://github.com/prometheus-pve/prometheus-pve-exporter#authentication",
            "nixName": "exporters.pve.environmentFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.pve.extraFlags",
            "desc": "Extra commandline options to pass to the pve exporter.",
            "nixName": "exporters.pve.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.pve.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.pve.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.pve.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.pve.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.pve.openFirewall  istrue.",
            "nixName": "exporters.pve.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.pve.group",
            "desc": "Group under which the pve exporter shall be run.",
            "nixName": "exporters.pve.group",
            "type": "string",
            "value": "\"pve-exporter\""
        },
        {
            "name": "exporters.pve.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.pve.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.pve.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.pve.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.pve.package",
            "desc": "The prometheus-pve-exporter package to use.",
            "nixName": "exporters.pve.package",
            "type": "package",
            "value": "pkgs.prometheus-pve-exporter"
        },
        {
            "name": "exporters.pve.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.pve.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9221"
        },
        {
            "name": "exporters.pve.server.certFile",
            "desc": "Path to a SSL certificate file for the server",
            "nixName": "exporters.pve.server.certFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.pve.server.keyFile",
            "desc": "Path to a SSL private key file for the server",
            "nixName": "exporters.pve.server.keyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.pve.user",
            "desc": "User name under which the pve exporter shall be run.",
            "nixName": "exporters.pve.user",
            "type": "string",
            "value": "\"pve-exporter\""
        },
        {
            "name": "exporters.py-air-control.deviceHostname",
            "desc": "The hostname of the air purification device from which to scrape themetrics.",
            "nixName": "exporters.py-air-control.deviceHostname",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.py-air-control.enable",
            "desc": "Whether to enable the prometheus py-air-control exporter.",
            "nixName": "exporters.py-air-control.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.py-air-control.extraFlags",
            "desc": "Extra commandline options to pass to the py-air-control exporter.",
            "nixName": "exporters.py-air-control.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.py-air-control.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.py-air-control.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.py-air-control.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.py-air-control.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.py-air-control.openFirewall is true.",
            "nixName": "exporters.py-air-control.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.py-air-control.group",
            "desc": "Group under which the py-air-control exporter shall be run.",
            "nixName": "exporters.py-air-control.group",
            "type": "string",
            "value": "\"py-air-control-exporter\""
        },
        {
            "name": "exporters.py-air-control.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.py-air-control.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.py-air-control.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.py-air-control.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.py-air-control.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.py-air-control.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9896"
        },
        {
            "name": "exporters.py-air-control.protocol",
            "desc": "The protocol to use when communicating with the air purificationdevice. Available: [http, coap, plain_coap]",
            "nixName": "exporters.py-air-control.protocol",
            "type": "string",
            "value": "\"http\""
        },
        {
            "name": "exporters.py-air-control.stateDir",
            "desc": "Directory below  /var/lib  to store runtime data. Thisdirectory will be created automatically using systemd\u2019s StateDirectorymechanism.",
            "nixName": "exporters.py-air-control.stateDir",
            "type": "string",
            "value": "\"prometheus-py-air-control-exporter\""
        },
        {
            "name": "exporters.py-air-control.user",
            "desc": "User name under which the py-air-control exporter shall be run.",
            "nixName": "exporters.py-air-control.user",
            "type": "string",
            "value": "\"py-air-control-exporter\""
        },
        {
            "name": "exporters.redis.enable",
            "desc": "Whether to enable the prometheus redis exporter.",
            "nixName": "exporters.redis.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.redis.extraFlags",
            "desc": "Extra commandline options to pass to the redis exporter.",
            "nixName": "exporters.redis.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.redis.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.redis.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.redis.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.redis.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.redis.openFirewall  istrue.",
            "nixName": "exporters.redis.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.redis.group",
            "desc": "Group under which the redis exporter shall be run.",
            "nixName": "exporters.redis.group",
            "type": "string",
            "value": "\"redis-exporter\""
        },
        {
            "name": "exporters.redis.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.redis.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.redis.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.redis.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.redis.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.redis.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9121"
        },
        {
            "name": "exporters.redis.user",
            "desc": "User name under which the redis exporter shall be run.",
            "nixName": "exporters.redis.user",
            "type": "string",
            "value": "\"redis-exporter\""
        },
        {
            "name": "exporters.restic.enable",
            "desc": "Whether to enable the prometheus restic exporter.",
            "nixName": "exporters.restic.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.restic.environmentFile",
            "desc": "File containing the credentials to access the repository, in theformat of an EnvironmentFile as described by systemd.exec(5)",
            "nixName": "exporters.restic.environmentFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.restic.extraFlags",
            "desc": "Extra commandline options to pass to the restic exporter.",
            "nixName": "exporters.restic.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.restic.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.restic.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.restic.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.restic.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.restic.openFirewall is true.",
            "nixName": "exporters.restic.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.restic.group",
            "desc": "Group under which the restic exporter shall be run.",
            "nixName": "exporters.restic.group",
            "type": "string",
            "value": "\"restic-exporter\""
        },
        {
            "name": "exporters.restic.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.restic.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.restic.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.restic.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.restic.passwordFile",
            "desc": "File containing the password to the repository.",
            "nixName": "exporters.restic.passwordFile",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.restic.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.restic.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9753"
        },
        {
            "name": "exporters.restic.rcloneConfig",
            "desc": "Configuration for the rclone remote being used for backup. See theremote\u2019s specific options under rclone\u2019s docs at  https://rclone.org/docs/ . Whenspecifying option names, use the \u201cconfig\u201d name specified in the docs.For example, to set  --b2-hard-delete  for a B2 remote, use hard_delete = true  in the attribute set.   Secrets set in here will be world-readable in the Nix store! Considerusing the  rcloneConfigFile  option instead to specify secretvalues separately. Note that options set here will override those set inthe config file.",
            "nixName": "exporters.restic.rcloneConfig",
            "type": "attribute set of (string or boolean)",
            "value": "{ }"
        },
        {
            "name": "exporters.restic.rcloneConfigFile",
            "desc": "Path to the file containing rclone configuration. This file mustcontain configuration for the remote specified in this backup set andalso must be readable by root.   Options set in  rcloneConfig  will override those set inthis file.",
            "nixName": "exporters.restic.rcloneConfigFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.restic.rcloneOptions",
            "desc": "Options to pass to rclone to control its behavior. See  https://rclone.org/docs/#options for available options. When specifying option names, strip the leading -- . To set a flag such as  --drive-use-trash ,which does not take a value, set the value to the Boolean true .",
            "nixName": "exporters.restic.rcloneOptions",
            "type": "attribute set of (string or boolean)",
            "value": "{ }"
        },
        {
            "name": "exporters.restic.refreshInterval",
            "desc": "Refresh interval for the metrics in seconds. Computing the metrics isan expensive task, keep this value as high as possible.",
            "nixName": "exporters.restic.refreshInterval",
            "type": "unsigned integer, meaning >=0",
            "value": "60"
        },
        {
            "name": "exporters.restic.repository",
            "desc": "URI pointing to the repository to monitor.",
            "nixName": "exporters.restic.repository",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.restic.user",
            "desc": "User name under which the restic exporter shall be run.",
            "nixName": "exporters.restic.user",
            "type": "string",
            "value": "\"restic-exporter\""
        },
        {
            "name": "exporters.rspamd.enable",
            "desc": "Whether to enable the prometheus rspamd exporter.",
            "nixName": "exporters.rspamd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.rspamd.extraFlags",
            "desc": "Extra commandline options to pass to the rspamd exporter.",
            "nixName": "exporters.rspamd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.rspamd.extraLabels",
            "desc": "Set of labels added to each metric.",
            "nixName": "exporters.rspamd.extraLabels",
            "type": "attribute set of string",
            "value": "{ host = config.networking.hostName; }"
        },
        {
            "name": "exporters.rspamd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.rspamd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.rspamd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.rspamd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.rspamd.openFirewall is true.",
            "nixName": "exporters.rspamd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.rspamd.group",
            "desc": "Group under which the rspamd exporter shall be run.",
            "nixName": "exporters.rspamd.group",
            "type": "string",
            "value": "\"rspamd-exporter\""
        },
        {
            "name": "exporters.rspamd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.rspamd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.rspamd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.rspamd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.rspamd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.rspamd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "7980"
        },
        {
            "name": "exporters.rspamd.user",
            "desc": "User name under which the rspamd exporter shall be run.",
            "nixName": "exporters.rspamd.user",
            "type": "string",
            "value": "\"rspamd-exporter\""
        },
        {
            "name": "exporters.rtl_433.channels",
            "desc": "List of channel matchers to export.",
            "nixName": "exporters.rtl_433.channels",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "exporters.rtl_433.channels.*.channel",
            "desc": "Channel to match.",
            "nixName": "exporters.rtl_433.channels.*.channel",
            "type": "signed integer",
            "value": null
        },
        {
            "name": "exporters.rtl_433.channels.*.location",
            "desc": "Location to match.",
            "nixName": "exporters.rtl_433.channels.*.location",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.rtl_433.channels.*.name",
            "desc": "Name to match.",
            "nixName": "exporters.rtl_433.channels.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.rtl_433.enable",
            "desc": "Whether to enable the prometheus rtl_433 exporter.",
            "nixName": "exporters.rtl_433.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.rtl_433.extraFlags",
            "desc": "Extra commandline options to pass to the rtl_433 exporter.",
            "nixName": "exporters.rtl_433.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.rtl_433.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.rtl_433.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.rtl_433.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.rtl_433.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.rtl_433.openFirewall is true.",
            "nixName": "exporters.rtl_433.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.rtl_433.group",
            "desc": "Group under which the rtl_433 exporter shall be run.",
            "nixName": "exporters.rtl_433.group",
            "type": "string",
            "value": "\"rtl_433-exporter\""
        },
        {
            "name": "exporters.rtl_433.ids",
            "desc": "List of ID matchers to export.",
            "nixName": "exporters.rtl_433.ids",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "exporters.rtl_433.ids.*.id",
            "desc": "ID to match.",
            "nixName": "exporters.rtl_433.ids.*.id",
            "type": "signed integer",
            "value": null
        },
        {
            "name": "exporters.rtl_433.ids.*.location",
            "desc": "Location to match.",
            "nixName": "exporters.rtl_433.ids.*.location",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.rtl_433.ids.*.name",
            "desc": "Name to match.",
            "nixName": "exporters.rtl_433.ids.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.rtl_433.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.rtl_433.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.rtl_433.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.rtl_433.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.rtl_433.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.rtl_433.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9550"
        },
        {
            "name": "exporters.rtl_433.rtl433Flags",
            "desc": "Flags passed verbatim to rtl_433 binary. Having  -C si (the default) is recommended since only Celsius temperatures areparsed.",
            "nixName": "exporters.rtl_433.rtl433Flags",
            "type": "string",
            "value": "\"-C si\""
        },
        {
            "name": "exporters.rtl_433.user",
            "desc": "User name under which the rtl_433 exporter shall be run.",
            "nixName": "exporters.rtl_433.user",
            "type": "string",
            "value": "\"rtl_433-exporter\""
        },
        {
            "name": "exporters.sabnzbd.enable",
            "desc": "Whether to enable the prometheus sabnzbd exporter.",
            "nixName": "exporters.sabnzbd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.sabnzbd.extraFlags",
            "desc": "Extra commandline options to pass to the sabnzbd exporter.",
            "nixName": "exporters.sabnzbd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.sabnzbd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.sabnzbd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.sabnzbd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.sabnzbd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.sabnzbd.openFirewall is true.",
            "nixName": "exporters.sabnzbd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.sabnzbd.group",
            "desc": "Group under which the sabnzbd exporter shall be run.",
            "nixName": "exporters.sabnzbd.group",
            "type": "string",
            "value": "\"sabnzbd-exporter\""
        },
        {
            "name": "exporters.sabnzbd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.sabnzbd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.sabnzbd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.sabnzbd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.sabnzbd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.sabnzbd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9387"
        },
        {
            "name": "exporters.sabnzbd.servers",
            "desc": "List of sabnzbd servers to connect to.",
            "nixName": "exporters.sabnzbd.servers",
            "type": "list of (submodule)",
            "value": null
        },
        {
            "name": "exporters.sabnzbd.servers.*.apiKeyFile",
            "desc": "The path to a file containing the API key. The file is securelypassed to the service by leveraging systemd credentials. No specialpermissions need to be set on this file.",
            "nixName": "exporters.sabnzbd.servers.*.apiKeyFile",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.sabnzbd.servers.*.baseUrl",
            "desc": "Base URL of the sabnzbd server.",
            "nixName": "exporters.sabnzbd.servers.*.baseUrl",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.sabnzbd.user",
            "desc": "User name under which the sabnzbd exporter shall be run.",
            "nixName": "exporters.sabnzbd.user",
            "type": "string",
            "value": "\"sabnzbd-exporter\""
        },
        {
            "name": "exporters.scaphandre.enable",
            "desc": "Whether to enable the prometheus scaphandre exporter.",
            "nixName": "exporters.scaphandre.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.scaphandre.extraFlags",
            "desc": "Extra commandline options to pass to the scaphandre exporter.",
            "nixName": "exporters.scaphandre.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.scaphandre.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.scaphandre.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.scaphandre.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.scaphandre.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.scaphandre.openFirewall is true.",
            "nixName": "exporters.scaphandre.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.scaphandre.group",
            "desc": "Group under which the scaphandre exporter shall be run.",
            "nixName": "exporters.scaphandre.group",
            "type": "string",
            "value": "\"scaphandre-exporter\""
        },
        {
            "name": "exporters.scaphandre.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.scaphandre.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.scaphandre.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.scaphandre.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.scaphandre.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.scaphandre.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "8080"
        },
        {
            "name": "exporters.scaphandre.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.scaphandre.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.scaphandre.user",
            "desc": "User name under which the scaphandre exporter shall be run.",
            "nixName": "exporters.scaphandre.user",
            "type": "string",
            "value": "\"scaphandre-exporter\""
        },
        {
            "name": "exporters.script.enable",
            "desc": "Whether to enable the prometheus script exporter.",
            "nixName": "exporters.script.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.script.extraFlags",
            "desc": "Extra commandline options to pass to the script exporter.",
            "nixName": "exporters.script.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.script.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.script.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.script.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.script.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.script.openFirewall is true.",
            "nixName": "exporters.script.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.script.group",
            "desc": "Group under which the script exporter shall be run.",
            "nixName": "exporters.script.group",
            "type": "string",
            "value": "\"script-exporter\""
        },
        {
            "name": "exporters.script.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.script.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.script.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.script.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.script.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.script.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9172"
        },
        {
            "name": "exporters.script.settings.scripts",
            "desc": "All settings expressed as an Nix attrset.  Check the official documentation for the corresponding YAML settingsthat can all be used here:  https://github.com/adhocteam/script_exporter#sample-configuration",
            "nixName": "exporters.script.settings.scripts",
            "type": "list of (submodule)",
            "value": null
        },
        {
            "name": "exporters.script.settings.scripts.*.name",
            "desc": "Name of the script.",
            "nixName": "exporters.script.settings.scripts.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.script.settings.scripts.*.script",
            "desc": "Shell script to execute when metrics are requested.",
            "nixName": "exporters.script.settings.scripts.*.script",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.script.settings.scripts.*.timeout",
            "desc": "Optional timeout for the script in seconds.",
            "nixName": "exporters.script.settings.scripts.*.timeout",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "exporters.script.user",
            "desc": "User name under which the script exporter shall be run.",
            "nixName": "exporters.script.user",
            "type": "string",
            "value": "\"script-exporter\""
        },
        {
            "name": "exporters.shelly.enable",
            "desc": "Whether to enable the prometheus shelly exporter.",
            "nixName": "exporters.shelly.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.shelly.extraFlags",
            "desc": "Extra commandline options to pass to the shelly exporter.",
            "nixName": "exporters.shelly.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.shelly.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.shelly.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.shelly.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.shelly.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.shelly.openFirewall is true.",
            "nixName": "exporters.shelly.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.shelly.group",
            "desc": "Group under which the shelly exporter shall be run.",
            "nixName": "exporters.shelly.group",
            "type": "string",
            "value": "\"shelly-exporter\""
        },
        {
            "name": "exporters.shelly.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.shelly.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.shelly.metrics-file",
            "desc": "Path to the JSON file with the metric definitions",
            "nixName": "exporters.shelly.metrics-file",
            "type": "path",
            "value": null
        },
        {
            "name": "exporters.shelly.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.shelly.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.shelly.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.shelly.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9784"
        },
        {
            "name": "exporters.shelly.user",
            "desc": "User name under which the shelly exporter shall be run.",
            "nixName": "exporters.shelly.user",
            "type": "string",
            "value": "\"shelly-exporter\""
        },
        {
            "name": "exporters.smartctl.devices",
            "desc": "Paths to the disks that will be monitored. Will autodiscover alldisks if none given.",
            "nixName": "exporters.smartctl.devices",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.smartctl.enable",
            "desc": "Whether to enable the prometheus smartctl exporter.",
            "nixName": "exporters.smartctl.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.smartctl.extraFlags",
            "desc": "Extra commandline options to pass to the smartctl exporter.",
            "nixName": "exporters.smartctl.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.smartctl.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.smartctl.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.smartctl.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.smartctl.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.smartctl.openFirewall is true.",
            "nixName": "exporters.smartctl.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.smartctl.group",
            "desc": "Group under which the smartctl exporter shall be run.",
            "nixName": "exporters.smartctl.group",
            "type": "string",
            "value": "\"smartctl-exporter\""
        },
        {
            "name": "exporters.smartctl.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.smartctl.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.smartctl.maxInterval",
            "desc": "Interval that limits how often a disk can be queried.",
            "nixName": "exporters.smartctl.maxInterval",
            "type": "string",
            "value": "\"60s\""
        },
        {
            "name": "exporters.smartctl.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.smartctl.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.smartctl.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.smartctl.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9633"
        },
        {
            "name": "exporters.smartctl.user",
            "desc": "User name under which the smartctl exporter shall be run.",
            "nixName": "exporters.smartctl.user",
            "type": "string",
            "value": "\"smartctl-exporter\""
        },
        {
            "name": "exporters.smokeping.buckets",
            "desc": "List of buckets to use for the response duration histogram.",
            "nixName": "exporters.smokeping.buckets",
            "type": "strings concatenated with \",\"",
            "value": "\"5e-05,0.0001,0.0002,0.0004,0.0008,0.0016,0.0032,0.0064,0.0128,0.0256,0.0512,0.1024,0.2048,0.4096,0.8192,1.6384,3.2768,6.5536,13.1072,26.2144\""
        },
        {
            "name": "exporters.smokeping.enable",
            "desc": "Whether to enable the prometheus smokeping exporter.",
            "nixName": "exporters.smokeping.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.smokeping.extraFlags",
            "desc": "Extra commandline options to pass to the smokeping exporter.",
            "nixName": "exporters.smokeping.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.smokeping.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.smokeping.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.smokeping.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.smokeping.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.smokeping.openFirewall is true.",
            "nixName": "exporters.smokeping.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.smokeping.group",
            "desc": "Group under which the smokeping exporter shall be run.",
            "nixName": "exporters.smokeping.group",
            "type": "string",
            "value": "\"smokeping-exporter\""
        },
        {
            "name": "exporters.smokeping.hosts",
            "desc": "List of endpoints to probe.",
            "nixName": "exporters.smokeping.hosts",
            "type": "list of string",
            "value": null
        },
        {
            "name": "exporters.smokeping.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.smokeping.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.smokeping.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.smokeping.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.smokeping.pingInterval",
            "desc": "Interval between pings.",
            "nixName": "exporters.smokeping.pingInterval",
            "type": "Go duration (https://golang.org/pkg/time/#ParseDuration)",
            "value": "\"1s\""
        },
        {
            "name": "exporters.smokeping.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.smokeping.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9374"
        },
        {
            "name": "exporters.smokeping.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.smokeping.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.smokeping.user",
            "desc": "User name under which the smokeping exporter shall be run.",
            "nixName": "exporters.smokeping.user",
            "type": "string",
            "value": "\"smokeping-exporter\""
        },
        {
            "name": "exporters.snmp.configuration",
            "desc": "Snmp exporter configuration as nix attribute set. Mutually exclusivewith \u2018configurationPath\u2019 option.",
            "nixName": "exporters.snmp.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "exporters.snmp.configurationPath",
            "desc": "Path to a snmp exporter configuration file. Mutually exclusive with\u2018configuration\u2019 option.",
            "nixName": "exporters.snmp.configurationPath",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.snmp.enable",
            "desc": "Whether to enable the prometheus snmp exporter.",
            "nixName": "exporters.snmp.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.snmp.enableConfigCheck",
            "desc": "Whether to run a correctness check for the configuration file. Thisdepends on the configuration file residing in the nix-store. Pathspassed as string will be copied to the store.",
            "nixName": "exporters.snmp.enableConfigCheck",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.snmp.extraFlags",
            "desc": "Extra commandline options to pass to the snmp exporter.",
            "nixName": "exporters.snmp.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.snmp.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.snmp.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.snmp.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.snmp.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.snmp.openFirewall  istrue.",
            "nixName": "exporters.snmp.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.snmp.group",
            "desc": "Group under which the snmp exporter shall be run.",
            "nixName": "exporters.snmp.group",
            "type": "string",
            "value": "\"snmp-exporter\""
        },
        {
            "name": "exporters.snmp.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.snmp.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.snmp.logFormat",
            "desc": "Output format of log messages.",
            "nixName": "exporters.snmp.logFormat",
            "type": "one of \"logfmt\", \"json\"",
            "value": "\"logfmt\""
        },
        {
            "name": "exporters.snmp.logLevel",
            "desc": "Only log messages with the given severity or above.",
            "nixName": "exporters.snmp.logLevel",
            "type": "one of \"debug\", \"info\", \"warn\", \"error\"",
            "value": "\"info\""
        },
        {
            "name": "exporters.snmp.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.snmp.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.snmp.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.snmp.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9116"
        },
        {
            "name": "exporters.snmp.user",
            "desc": "User name under which the snmp exporter shall be run.",
            "nixName": "exporters.snmp.user",
            "type": "string",
            "value": "\"snmp-exporter\""
        },
        {
            "name": "exporters.sql.configFile",
            "desc": "Path to configuration file.",
            "nixName": "exporters.sql.configFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "exporters.sql.configuration",
            "desc": "Exporter configuration as nix attribute set. Mutually exclusive with\u2018configFile\u2019 option.",
            "nixName": "exporters.sql.configuration",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "exporters.sql.configuration.jobs",
            "desc": "An attrset of metrics scraping jobs to run.",
            "nixName": "exporters.sql.configuration.jobs",
            "type": "attribute set of (submodule)",
            "value": "{ }"
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.connections",
            "desc": "A list of connection strings of the SQL servers to scrape metricsfrom",
            "nixName": "exporters.sql.configuration.jobs.<name>.connections",
            "type": "list of string",
            "value": null
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.interval",
            "desc": "How often to run this job, specified in  Go duration format.",
            "nixName": "exporters.sql.configuration.jobs.<name>.interval",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.queries",
            "desc": "SQL queries to run.",
            "nixName": "exporters.sql.configuration.jobs.<name>.queries",
            "type": "attribute set of (submodule)",
            "value": null
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.help",
            "desc": "A human-readable description of this metric.",
            "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.help",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.labels",
            "desc": "A set of columns that will be used as Prometheus labels.",
            "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.labels",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.query",
            "desc": "The SQL query to run.",
            "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.query",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.queries.<name>.values",
            "desc": "A set of columns that will be used as values of this metric.",
            "nixName": "exporters.sql.configuration.jobs.<name>.queries.<name>.values",
            "type": "list of string",
            "value": null
        },
        {
            "name": "exporters.sql.configuration.jobs.<name>.startupSql",
            "desc": "A list of SQL statements to execute once after making aconnection.",
            "nixName": "exporters.sql.configuration.jobs.<name>.startupSql",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.sql.enable",
            "desc": "Whether to enable the prometheus sql exporter.",
            "nixName": "exporters.sql.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.sql.extraFlags",
            "desc": "Extra commandline options to pass to the sql exporter.",
            "nixName": "exporters.sql.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.sql.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.sql.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.sql.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.sql.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.sql.openFirewall  istrue.",
            "nixName": "exporters.sql.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.sql.group",
            "desc": "Group under which the sql exporter shall be run.",
            "nixName": "exporters.sql.group",
            "type": "string",
            "value": "\"sql-exporter\""
        },
        {
            "name": "exporters.sql.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.sql.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.sql.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.sql.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.sql.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.sql.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9237"
        },
        {
            "name": "exporters.sql.user",
            "desc": "User name under which the sql exporter shall be run.",
            "nixName": "exporters.sql.user",
            "type": "string",
            "value": "\"sql-exporter\""
        },
        {
            "name": "exporters.statsd.enable",
            "desc": "Whether to enable the prometheus statsd exporter.",
            "nixName": "exporters.statsd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.statsd.extraFlags",
            "desc": "Extra commandline options to pass to the statsd exporter.",
            "nixName": "exporters.statsd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.statsd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.statsd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.statsd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.statsd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.statsd.openFirewall is true.",
            "nixName": "exporters.statsd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.statsd.group",
            "desc": "Group under which the statsd exporter shall be run.",
            "nixName": "exporters.statsd.group",
            "type": "string",
            "value": "\"statsd-exporter\""
        },
        {
            "name": "exporters.statsd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.statsd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.statsd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.statsd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.statsd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.statsd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9102"
        },
        {
            "name": "exporters.statsd.user",
            "desc": "User name under which the statsd exporter shall be run.",
            "nixName": "exporters.statsd.user",
            "type": "string",
            "value": "\"statsd-exporter\""
        },
        {
            "name": "exporters.surfboard.enable",
            "desc": "Whether to enable the prometheus surfboard exporter.",
            "nixName": "exporters.surfboard.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.surfboard.extraFlags",
            "desc": "Extra commandline options to pass to the surfboard exporter.",
            "nixName": "exporters.surfboard.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.surfboard.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.surfboard.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.surfboard.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.surfboard.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.surfboard.openFirewall is true.",
            "nixName": "exporters.surfboard.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.surfboard.group",
            "desc": "Group under which the surfboard exporter shall be run.",
            "nixName": "exporters.surfboard.group",
            "type": "string",
            "value": "\"surfboard-exporter\""
        },
        {
            "name": "exporters.surfboard.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.surfboard.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.surfboard.modemAddress",
            "desc": "The hostname or IP of the cable modem.",
            "nixName": "exporters.surfboard.modemAddress",
            "type": "string",
            "value": "\"192.168.100.1\""
        },
        {
            "name": "exporters.surfboard.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.surfboard.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.surfboard.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.surfboard.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9239"
        },
        {
            "name": "exporters.surfboard.user",
            "desc": "User name under which the surfboard exporter shall be run.",
            "nixName": "exporters.surfboard.user",
            "type": "string",
            "value": "\"surfboard-exporter\""
        },
        {
            "name": "exporters.systemd.enable",
            "desc": "Whether to enable the prometheus systemd exporter.",
            "nixName": "exporters.systemd.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.systemd.extraFlags",
            "desc": "Extra commandline options to pass to the systemd exporter.",
            "nixName": "exporters.systemd.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.systemd.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.systemd.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.systemd.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.systemd.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.systemd.openFirewall is true.",
            "nixName": "exporters.systemd.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.systemd.group",
            "desc": "Group under which the systemd exporter shall be run.",
            "nixName": "exporters.systemd.group",
            "type": "string",
            "value": "\"systemd-exporter\""
        },
        {
            "name": "exporters.systemd.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.systemd.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.systemd.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.systemd.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.systemd.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.systemd.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9558"
        },
        {
            "name": "exporters.systemd.user",
            "desc": "User name under which the systemd exporter shall be run.",
            "nixName": "exporters.systemd.user",
            "type": "string",
            "value": "\"systemd-exporter\""
        },
        {
            "name": "exporters.tor.enable",
            "desc": "Whether to enable the prometheus tor exporter.",
            "nixName": "exporters.tor.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.tor.extraFlags",
            "desc": "Extra commandline options to pass to the tor exporter.",
            "nixName": "exporters.tor.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.tor.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.tor.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.tor.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.tor.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.tor.openFirewall  istrue.",
            "nixName": "exporters.tor.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.tor.group",
            "desc": "Group under which the tor exporter shall be run.",
            "nixName": "exporters.tor.group",
            "type": "string",
            "value": "\"tor-exporter\""
        },
        {
            "name": "exporters.tor.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.tor.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.tor.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.tor.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.tor.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.tor.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9130"
        },
        {
            "name": "exporters.tor.torControlAddress",
            "desc": "Tor control IP address or hostname.",
            "nixName": "exporters.tor.torControlAddress",
            "type": "string",
            "value": "\"127.0.0.1\""
        },
        {
            "name": "exporters.tor.torControlPort",
            "desc": "Tor control port.",
            "nixName": "exporters.tor.torControlPort",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9051"
        },
        {
            "name": "exporters.tor.user",
            "desc": "User name under which the tor exporter shall be run.",
            "nixName": "exporters.tor.user",
            "type": "string",
            "value": "\"tor-exporter\""
        },
        {
            "name": "exporters.unbound.enable",
            "desc": "Whether to enable the prometheus unbound exporter.",
            "nixName": "exporters.unbound.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unbound.extraFlags",
            "desc": "Extra commandline options to pass to the unbound exporter.",
            "nixName": "exporters.unbound.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.unbound.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.unbound.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.unbound.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.unbound.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.unbound.openFirewall is true.",
            "nixName": "exporters.unbound.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.unbound.group",
            "desc": "Group under which the unbound exporter shall be run.",
            "nixName": "exporters.unbound.group",
            "type": "string",
            "value": "\"unbound-exporter\""
        },
        {
            "name": "exporters.unbound.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.unbound.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.unbound.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.unbound.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unbound.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.unbound.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9167"
        },
        {
            "name": "exporters.unbound.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.unbound.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.unbound.unbound.ca",
            "desc": "Path to the Unbound server certificate authority",
            "nixName": "exporters.unbound.unbound.ca",
            "type": "null or path",
            "value": "\"/var/lib/unbound/unbound_server.pem\""
        },
        {
            "name": "exporters.unbound.unbound.certificate",
            "desc": "Path to the Unbound control socket certificate",
            "nixName": "exporters.unbound.unbound.certificate",
            "type": "null or path",
            "value": "\"/var/lib/unbound/unbound_control.pem\""
        },
        {
            "name": "exporters.unbound.unbound.host",
            "desc": "Path to the unbound control socket. Supports unix domain sockets, aswell as the TCP interface.",
            "nixName": "exporters.unbound.unbound.host",
            "type": "string",
            "value": "\"tcp://127.0.0.1:8953\""
        },
        {
            "name": "exporters.unbound.unbound.key",
            "desc": "Path to the Unbound control socket key.",
            "nixName": "exporters.unbound.unbound.key",
            "type": "null or path",
            "value": "\"/var/lib/unbound/unbound_control.key\""
        },
        {
            "name": "exporters.unbound.user",
            "desc": "User name under which the unbound exporter shall be run.",
            "nixName": "exporters.unbound.user",
            "type": "string",
            "value": "\"unbound-exporter\""
        },
        {
            "name": "exporters.unifi.enable",
            "desc": "Whether to enable the prometheus unifi exporter.",
            "nixName": "exporters.unifi.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unifi.extraFlags",
            "desc": "Extra commandline options to pass to the unifi exporter.",
            "nixName": "exporters.unifi.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.unifi.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.unifi.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.unifi.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.unifi.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.unifi.openFirewall  istrue.",
            "nixName": "exporters.unifi.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.unifi.group",
            "desc": "Group under which the unifi exporter shall be run.",
            "nixName": "exporters.unifi.group",
            "type": "string",
            "value": "\"unifi-exporter\""
        },
        {
            "name": "exporters.unifi.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.unifi.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.unifi.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.unifi.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unifi.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.unifi.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9130"
        },
        {
            "name": "exporters.unifi.unifiAddress",
            "desc": "URL of the UniFi Controller API.",
            "nixName": "exporters.unifi.unifiAddress",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.unifi.unifiInsecure",
            "desc": "If enabled skip the verification of the TLS certificate of the UniFiController API. Use with caution.",
            "nixName": "exporters.unifi.unifiInsecure",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unifi.unifiPassword",
            "desc": "Password for authentication against UniFi Controller API.",
            "nixName": "exporters.unifi.unifiPassword",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.unifi.unifiTimeout",
            "desc": "Timeout including unit for UniFi Controller API requests.",
            "nixName": "exporters.unifi.unifiTimeout",
            "type": "string",
            "value": "\"5s\""
        },
        {
            "name": "exporters.unifi.unifiUsername",
            "desc": "username for authentication against UniFi Controller API.",
            "nixName": "exporters.unifi.unifiUsername",
            "type": "string",
            "value": null
        },
        {
            "name": "exporters.unifi.user",
            "desc": "User name under which the unifi exporter shall be run.",
            "nixName": "exporters.unifi.user",
            "type": "string",
            "value": "\"unifi-exporter\""
        },
        {
            "name": "exporters.unpoller.controllers",
            "desc": "List of Unifi controllers to poll. Use defaults if empty.",
            "nixName": "exporters.unpoller.controllers",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "exporters.unpoller.controllers.*.hash_pii",
            "desc": "Hash, with md5, client names and MAC addresses. This attempts toprotect personally identifiable information.",
            "nixName": "exporters.unpoller.controllers.*.hash_pii",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.controllers.*.pass",
            "desc": "Path of a file containing the password for the unifi service user.This file needs to be readable by the unifi-poller user.",
            "nixName": "exporters.unpoller.controllers.*.pass",
            "type": "path",
            "value": "unpoller-unifi-default.password"
        },
        {
            "name": "exporters.unpoller.controllers.*.save_alarms",
            "desc": "Collect and save data from UniFi alarms to influxdb and Loki.",
            "nixName": "exporters.unpoller.controllers.*.save_alarms",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.controllers.*.save_anomalies",
            "desc": "Collect and save data from UniFi anomalies to influxdb and Loki.",
            "nixName": "exporters.unpoller.controllers.*.save_anomalies",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.controllers.*.save_dpi",
            "desc": "Collect and save data from deep packet inspection. Adds around 150data points and impacts performance.",
            "nixName": "exporters.unpoller.controllers.*.save_dpi",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.controllers.*.save_events",
            "desc": "Collect and save data from UniFi events to influxdb and Loki.",
            "nixName": "exporters.unpoller.controllers.*.save_events",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.controllers.*.save_ids",
            "desc": "Collect and save data from the intrusion detection system to influxdband Loki.",
            "nixName": "exporters.unpoller.controllers.*.save_ids",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.controllers.*.save_sites",
            "desc": "Collect and save site data.",
            "nixName": "exporters.unpoller.controllers.*.save_sites",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.unpoller.controllers.*.sites",
            "desc": "List of site names for which statistics should be exported. Or thestring \u201cdefault\u201d for the default site or the string \u201call\u201d for allsites.",
            "nixName": "exporters.unpoller.controllers.*.sites",
            "type": "one of \"default\", \"all\" or list of string",
            "value": "\"all\""
        },
        {
            "name": "exporters.unpoller.controllers.*.url",
            "desc": "URL of the Unifi controller.",
            "nixName": "exporters.unpoller.controllers.*.url",
            "type": "string",
            "value": "\"https://unifi:8443\""
        },
        {
            "name": "exporters.unpoller.controllers.*.user",
            "desc": "Unifi service user name.",
            "nixName": "exporters.unpoller.controllers.*.user",
            "type": "string",
            "value": "\"unifi\""
        },
        {
            "name": "exporters.unpoller.controllers.*.verify_ssl",
            "desc": "Verify the Unifi controller\u2019s certificate.",
            "nixName": "exporters.unpoller.controllers.*.verify_ssl",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "exporters.unpoller.enable",
            "desc": "Whether to enable the prometheus unpoller exporter.",
            "nixName": "exporters.unpoller.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.extraFlags",
            "desc": "Extra commandline options to pass to the unpoller exporter.",
            "nixName": "exporters.unpoller.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.unpoller.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.unpoller.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.unpoller.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.unpoller.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.unpoller.openFirewall is true.",
            "nixName": "exporters.unpoller.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.unpoller.group",
            "desc": "Group under which the unpoller exporter shall be run.",
            "nixName": "exporters.unpoller.group",
            "type": "string",
            "value": "\"unpoller-exporter\""
        },
        {
            "name": "exporters.unpoller.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.unpoller.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.unpoller.log.debug",
            "desc": "Whether to enable debug logging including line numbers, highresolution timestamps, per-device logs.",
            "nixName": "exporters.unpoller.log.debug",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.log.prometheusErrors",
            "desc": "Whether to enable emitting errors to prometheus.",
            "nixName": "exporters.unpoller.log.prometheusErrors",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.log.quiet",
            "desc": "Whether to enable startup and error logs only.",
            "nixName": "exporters.unpoller.log.quiet",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.loki.interval",
            "desc": "How often the events are polled and pushed to Loki.",
            "nixName": "exporters.unpoller.loki.interval",
            "type": "string",
            "value": "\"2m\""
        },
        {
            "name": "exporters.unpoller.loki.pass",
            "desc": "Path of a file containing the password for Loki. This file needs tobe readable by the unifi-poller user.",
            "nixName": "exporters.unpoller.loki.pass",
            "type": "path",
            "value": "\"unpoller-influxdb-default.password\""
        },
        {
            "name": "exporters.unpoller.loki.tenant_id",
            "desc": "Tenant ID to use in Loki.",
            "nixName": "exporters.unpoller.loki.tenant_id",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.unpoller.loki.timeout",
            "desc": "Should be increased in case of timeout errors.",
            "nixName": "exporters.unpoller.loki.timeout",
            "type": "string",
            "value": "\"10s\""
        },
        {
            "name": "exporters.unpoller.loki.url",
            "desc": "URL of the Loki host.",
            "nixName": "exporters.unpoller.loki.url",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.unpoller.loki.user",
            "desc": "Username for Loki.",
            "nixName": "exporters.unpoller.loki.user",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "exporters.unpoller.loki.verify_ssl",
            "desc": "Verify Loki\u2019s certificate.",
            "nixName": "exporters.unpoller.loki.verify_ssl",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.unpoller.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.unpoller.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.unpoller.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9130"
        },
        {
            "name": "exporters.unpoller.user",
            "desc": "User name under which the unpoller exporter shall be run.",
            "nixName": "exporters.unpoller.user",
            "type": "string",
            "value": "\"unpoller-exporter\""
        },
        {
            "name": "exporters.v2ray.enable",
            "desc": "Whether to enable the prometheus v2ray exporter.",
            "nixName": "exporters.v2ray.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.v2ray.extraFlags",
            "desc": "Extra commandline options to pass to the v2ray exporter.",
            "nixName": "exporters.v2ray.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.v2ray.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.v2ray.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.v2ray.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.v2ray.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.v2ray.openFirewall  istrue.",
            "nixName": "exporters.v2ray.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.v2ray.group",
            "desc": "Group under which the v2ray exporter shall be run.",
            "nixName": "exporters.v2ray.group",
            "type": "string",
            "value": "\"v2ray-exporter\""
        },
        {
            "name": "exporters.v2ray.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.v2ray.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.v2ray.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.v2ray.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.v2ray.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.v2ray.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9299"
        },
        {
            "name": "exporters.v2ray.user",
            "desc": "User name under which the v2ray exporter shall be run.",
            "nixName": "exporters.v2ray.user",
            "type": "string",
            "value": "\"v2ray-exporter\""
        },
        {
            "name": "exporters.v2ray.v2rayEndpoint",
            "desc": "v2ray grpc api endpoint",
            "nixName": "exporters.v2ray.v2rayEndpoint",
            "type": "string",
            "value": "\"127.0.0.1:54321\""
        },
        {
            "name": "exporters.varnish.enable",
            "desc": "Whether to enable the prometheus varnish exporter.",
            "nixName": "exporters.varnish.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.varnish.extraFlags",
            "desc": "Extra commandline options to pass to the varnish exporter.",
            "nixName": "exporters.varnish.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.varnish.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.varnish.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.varnish.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.varnish.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.varnish.openFirewall is true.",
            "nixName": "exporters.varnish.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.varnish.group",
            "desc": "Group under which the varnish exporter shall be run.",
            "nixName": "exporters.varnish.group",
            "type": "string",
            "value": "\"varnish-exporter\""
        },
        {
            "name": "exporters.varnish.healthPath",
            "desc": "Path under which to expose healthcheck. Disabled unlessconfigured.",
            "nixName": "exporters.varnish.healthPath",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.varnish.instance",
            "desc": "varnishstat -n value.",
            "nixName": "exporters.varnish.instance",
            "type": "null or string",
            "value": "config.services.varnish.stateDir"
        },
        {
            "name": "exporters.varnish.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.varnish.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.varnish.noExit",
            "desc": "Do not exit server on Varnish scrape errors.",
            "nixName": "exporters.varnish.noExit",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.varnish.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.varnish.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.varnish.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.varnish.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9131"
        },
        {
            "name": "exporters.varnish.raw",
            "desc": "Enable raw stdout logging without timestamps.",
            "nixName": "exporters.varnish.raw",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.varnish.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.varnish.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.varnish.user",
            "desc": "User name under which the varnish exporter shall be run.",
            "nixName": "exporters.varnish.user",
            "type": "string",
            "value": "\"varnish-exporter\""
        },
        {
            "name": "exporters.varnish.varnishStatPath",
            "desc": "Path to varnishstat.",
            "nixName": "exporters.varnish.varnishStatPath",
            "type": "string",
            "value": "\"varnishstat\""
        },
        {
            "name": "exporters.varnish.verbose",
            "desc": "Enable verbose logging.",
            "nixName": "exporters.varnish.verbose",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.varnish.withGoMetrics",
            "desc": "Export go runtime and http handler metrics.",
            "nixName": "exporters.varnish.withGoMetrics",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.wireguard.enable",
            "desc": "Whether to enable the prometheus wireguard exporter.",
            "nixName": "exporters.wireguard.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.wireguard.extraFlags",
            "desc": "Extra commandline options to pass to the wireguard exporter.",
            "nixName": "exporters.wireguard.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.wireguard.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.wireguard.openFirewall is true. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.wireguard.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.wireguard.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.wireguard.openFirewall is true.",
            "nixName": "exporters.wireguard.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.wireguard.group",
            "desc": "Group under which the wireguard exporter shall be run.",
            "nixName": "exporters.wireguard.group",
            "type": "string",
            "value": "\"wireguard-exporter\""
        },
        {
            "name": "exporters.wireguard.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.wireguard.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.wireguard.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.wireguard.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.wireguard.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.wireguard.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9586"
        },
        {
            "name": "exporters.wireguard.singleSubnetPerField",
            "desc": "By default, all allowed IPs and subnets are comma-separated in the allowed_ips  field. With this option enabled, a single IPand subnet will be listed in fields like  allowed_ip_0 , allowed_ip_1  and so on.",
            "nixName": "exporters.wireguard.singleSubnetPerField",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.wireguard.user",
            "desc": "User name under which the wireguard exporter shall be run.",
            "nixName": "exporters.wireguard.user",
            "type": "string",
            "value": "\"wireguard-exporter\""
        },
        {
            "name": "exporters.wireguard.verbose",
            "desc": "Whether to enable verbose logging mode forprometheus-wireguard-exporter.",
            "nixName": "exporters.wireguard.verbose",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.wireguard.wireguardConfig",
            "desc": "Path to the Wireguard Config to  addthe peer\u2019s name to the stats of a peer .  Please note that  networking.wg-quick  is required forthis feature as  networking.wireguard  uses  wg(8)  to set the peersup.",
            "nixName": "exporters.wireguard.wireguardConfig",
            "type": "null or path or string",
            "value": "null"
        },
        {
            "name": "exporters.wireguard.withRemoteIp",
            "desc": "Whether or not the remote IP of a WireGuard peer should be exposedvia prometheus.",
            "nixName": "exporters.wireguard.withRemoteIp",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.zfs.enable",
            "desc": "Whether to enable the prometheus zfs exporter.",
            "nixName": "exporters.zfs.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.zfs.extraFlags",
            "desc": "Extra commandline options to pass to the zfs exporter.",
            "nixName": "exporters.zfs.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "exporters.zfs.firewallFilter",
            "desc": "Specify a filter for iptables to use when  services.prometheus.exporters.zfs.openFirewall  istrue. It is used as ip46tables -I nixos-fw firewallFilter -j nixos-fw-accept .",
            "nixName": "exporters.zfs.firewallFilter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "exporters.zfs.firewallRules",
            "desc": "Specify rules for nftables to add to the input chain when  services.prometheus.exporters.zfs.openFirewall  istrue.",
            "nixName": "exporters.zfs.firewallRules",
            "type": "null or strings concatenated with \"\\n\"",
            "value": "null"
        },
        {
            "name": "exporters.zfs.group",
            "desc": "Group under which the zfs exporter shall be run.",
            "nixName": "exporters.zfs.group",
            "type": "string",
            "value": "\"zfs-exporter\""
        },
        {
            "name": "exporters.zfs.listenAddress",
            "desc": "Address to listen on.",
            "nixName": "exporters.zfs.listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "exporters.zfs.openFirewall",
            "desc": "Open port in firewall for incoming connections.",
            "nixName": "exporters.zfs.openFirewall",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "exporters.zfs.pools",
            "desc": "Name of the pool(s) to collect, repeat for multiple pools (default:all pools).",
            "nixName": "exporters.zfs.pools",
            "type": "null or (list of string)",
            "value": "[ ]"
        },
        {
            "name": "exporters.zfs.port",
            "desc": "Port to listen on.",
            "nixName": "exporters.zfs.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9134"
        },
        {
            "name": "exporters.zfs.telemetryPath",
            "desc": "Path under which to expose metrics.",
            "nixName": "exporters.zfs.telemetryPath",
            "type": "string",
            "value": "\"/metrics\""
        },
        {
            "name": "exporters.zfs.user",
            "desc": "User name under which the zfs exporter shall be run.",
            "nixName": "exporters.zfs.user",
            "type": "string",
            "value": "\"zfs-exporter\""
        },
        {
            "name": "extraFlags",
            "desc": "Extra commandline options when launching Prometheus.",
            "nixName": "extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "globalConfig",
            "desc": "Parameters that are valid in all configuration contexts. They alsoserve as defaults for other configuration sections",
            "nixName": "globalConfig",
            "type": "submodule",
            "value": "{ }"
        },
        {
            "name": "globalConfig.evaluation_interval",
            "desc": "How frequently to evaluate rules by default.  Defaults to  1m  in prometheus when set to null .",
            "nixName": "globalConfig.evaluation_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "globalConfig.external_labels",
            "desc": "The labels to add to any time series or alerts when communicatingwith external systems (federation, remote storage, Alertmanager).",
            "nixName": "globalConfig.external_labels",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "globalConfig.query_log_file",
            "desc": "Path to the file prometheus should write its query log to.",
            "nixName": "globalConfig.query_log_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "globalConfig.scrape_interval",
            "desc": "How frequently to scrape targets by default.  Defaults to  1m  in prometheus when set to null .",
            "nixName": "globalConfig.scrape_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "globalConfig.scrape_timeout",
            "desc": "How long until a scrape request times out.  Defaults to  10s  in prometheus when set to null .",
            "nixName": "globalConfig.scrape_timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "listenAddress",
            "desc": "Address to listen on for the web interface, API, and telemetry.",
            "nixName": "listenAddress",
            "type": "string",
            "value": "\"0.0.0.0\""
        },
        {
            "name": "package",
            "desc": "The prometheus package to use.",
            "nixName": "package",
            "type": "package",
            "value": "pkgs.prometheus"
        },
        {
            "name": "port",
            "desc": "Port to listen on.",
            "nixName": "port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9090"
        },
        {
            "name": "pushgateway.enable",
            "desc": "Whether to enable Prometheus Pushgateway.",
            "nixName": "pushgateway.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "pushgateway.extraFlags",
            "desc": "Extra commandline options when launching the Pushgateway.",
            "nixName": "pushgateway.extraFlags",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "pushgateway.log.format",
            "desc": "Set the log target and format.   null  will default to  logger:stderr .",
            "nixName": "pushgateway.log.format",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "pushgateway.log.level",
            "desc": "Only log messages with the given severity or above.   null  will default to  info .",
            "nixName": "pushgateway.log.level",
            "type": "null or one of \"debug\", \"info\", \"warn\", \"error\", \"fatal\"",
            "value": "null"
        },
        {
            "name": "pushgateway.package",
            "desc": "The prometheus-pushgateway package to use.",
            "nixName": "pushgateway.package",
            "type": "package",
            "value": "pkgs.prometheus-pushgateway"
        },
        {
            "name": "pushgateway.persistMetrics",
            "desc": "Whether to persist metrics to a file.  When enabled metrics will be saved to a file called metrics  in the directory  /var/lib/pushgateway .The directory below  /var/lib  can be set using  services.prometheus.pushgateway.stateDir .",
            "nixName": "pushgateway.persistMetrics",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "pushgateway.persistence.interval",
            "desc": "The minimum interval at which to write out the persistence file.   null  will default to  5m .",
            "nixName": "pushgateway.persistence.interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "pushgateway.stateDir",
            "desc": "Directory below  /var/lib  to store metrics.  This directory will be created automatically using systemd\u2019sStateDirectory mechanism when  services.prometheus.pushgateway.persistMetrics  isenabled.",
            "nixName": "pushgateway.stateDir",
            "type": "string",
            "value": "\"pushgateway\""
        },
        {
            "name": "pushgateway.web.external-url",
            "desc": "The URL under which Pushgateway is externally reachable.",
            "nixName": "pushgateway.web.external-url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "pushgateway.web.listen-address",
            "desc": "Address to listen on for the web interface, API and telemetry.   null  will default to  :9091 .",
            "nixName": "pushgateway.web.listen-address",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "pushgateway.web.route-prefix",
            "desc": "Prefix for the internal routes of web endpoints.  Defaults to the path of  services.prometheus.pushgateway.web.external-url .",
            "nixName": "pushgateway.web.route-prefix",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "pushgateway.web.telemetry-path",
            "desc": "Path under which to expose metrics.   null  will default to  /metrics .",
            "nixName": "pushgateway.web.telemetry-path",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead",
            "desc": "Parameters of the endpoints to query from. See  theofficial documentation  for more information.",
            "nixName": "remoteRead",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "remoteRead.*.basic_auth",
            "desc": "Sets the  Authorization  header on every remote readrequest with the configured username and password. password andpassword_file are mutually exclusive.",
            "nixName": "remoteRead.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "remoteRead.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "remoteRead.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "remoteRead.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "remoteRead.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "remoteRead.*.bearer_token",
            "desc": "Sets the  Authorization  header on every remote readrequest with the configured bearer token. It is mutually exclusive with bearer_token_file .",
            "nixName": "remoteRead.*.bearer_token",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.bearer_token_file",
            "desc": "Sets the  Authorization  header on every remote readrequest with the bearer token read from the configured file. It ismutually exclusive with  bearer_token .",
            "nixName": "remoteRead.*.bearer_token_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.headers",
            "desc": "Custom HTTP headers to be sent along with each remote read request.Be aware that headers that are set by Prometheus itself can\u2019t beoverwritten.",
            "nixName": "remoteRead.*.headers",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "remoteRead.*.name",
            "desc": "Name of the remote read config, which if specified must be uniqueamong remote read configs. The name will be used in metrics and loggingin place of a generated value to help users distinguish between remoteread configs.",
            "nixName": "remoteRead.*.name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.proxy_url",
            "desc": "Optional Proxy URL.",
            "nixName": "remoteRead.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.read_recent",
            "desc": "Whether reads should be made for queries for time ranges that thelocal storage should have complete data for.",
            "nixName": "remoteRead.*.read_recent",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "remoteRead.*.remote_timeout",
            "desc": "Timeout for requests to the remote read endpoint.",
            "nixName": "remoteRead.*.remote_timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.required_matchers",
            "desc": "An optional list of equality matchers which have to be present in aselector to query the remote read endpoint.",
            "nixName": "remoteRead.*.required_matchers",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "remoteRead.*.tls_config",
            "desc": "Configures the remote read request\u2019s TLS settings.",
            "nixName": "remoteRead.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "remoteRead.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "remoteRead.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "remoteRead.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "remoteRead.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "remoteRead.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "remoteRead.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "remoteRead.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteRead.*.url",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "remoteRead.*.url",
            "type": "string",
            "value": null
        },
        {
            "name": "remoteWrite",
            "desc": "Parameters of the endpoints to send samples to. See  theofficial documentation  for more information.",
            "nixName": "remoteWrite",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "remoteWrite.*.basic_auth",
            "desc": "Sets the  Authorization  header on every remote writerequest with the configured username and password. password andpassword_file are mutually exclusive.",
            "nixName": "remoteWrite.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "remoteWrite.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "remoteWrite.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "remoteWrite.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "remoteWrite.*.bearer_token",
            "desc": "Sets the  Authorization  header on every remote writerequest with the configured bearer token. It is mutually exclusive with bearer_token_file .",
            "nixName": "remoteWrite.*.bearer_token",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.bearer_token_file",
            "desc": "Sets the  Authorization  header on every remote writerequest with the bearer token read from the configured file. It ismutually exclusive with  bearer_token .",
            "nixName": "remoteWrite.*.bearer_token_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.headers",
            "desc": "Custom HTTP headers to be sent along with each remote write request.Be aware that headers that are set by Prometheus itself can\u2019t beoverwritten.",
            "nixName": "remoteWrite.*.headers",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.metadata_config",
            "desc": "Configures the sending of series metadata to remote storage. Metadataconfiguration is subject to change at any point or be removed in futurereleases.",
            "nixName": "remoteWrite.*.metadata_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.metadata_config.send",
            "desc": "Whether metric metadata is sent to remote storage or not.",
            "nixName": "remoteWrite.*.metadata_config.send",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.metadata_config.send_interval",
            "desc": "How frequently metric metadata is sent to remote storage.",
            "nixName": "remoteWrite.*.metadata_config.send_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.name",
            "desc": "Name of the remote write config, which if specified must be uniqueamong remote write configs. The name will be used in metrics and loggingin place of a generated value to help users distinguish between remotewrite configs.",
            "nixName": "remoteWrite.*.name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.proxy_url",
            "desc": "Optional Proxy URL.",
            "nixName": "remoteWrite.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config",
            "desc": "Configures the queue used to write to remote storage.",
            "nixName": "remoteWrite.*.queue_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.batch_send_deadline",
            "desc": "Maximum time a sample will wait in buffer.",
            "nixName": "remoteWrite.*.queue_config.batch_send_deadline",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.capacity",
            "desc": "Number of samples to buffer per shard before we block reading of moresamples from the WAL. It is recommended to have enough capacity in eachshard to buffer several requests to keep throughput up while processingoccasional slow remote requests.",
            "nixName": "remoteWrite.*.queue_config.capacity",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.max_backoff",
            "desc": "Maximum retry delay.",
            "nixName": "remoteWrite.*.queue_config.max_backoff",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.max_samples_per_send",
            "desc": "Maximum number of samples per send.",
            "nixName": "remoteWrite.*.queue_config.max_samples_per_send",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.max_shards",
            "desc": "Maximum number of shards, i.e. amount of concurrency.",
            "nixName": "remoteWrite.*.queue_config.max_shards",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.min_backoff",
            "desc": "Initial retry delay. Gets doubled for every retry.",
            "nixName": "remoteWrite.*.queue_config.min_backoff",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.queue_config.min_shards",
            "desc": "Minimum number of shards, i.e. amount of concurrency.",
            "nixName": "remoteWrite.*.queue_config.min_shards",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.remote_timeout",
            "desc": "Timeout for requests to the remote write endpoint.",
            "nixName": "remoteWrite.*.remote_timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.tls_config",
            "desc": "Configures the remote write request\u2019s TLS settings.",
            "nixName": "remoteWrite.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "remoteWrite.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "remoteWrite.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "remoteWrite.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "remoteWrite.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "remoteWrite.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.url",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "remoteWrite.*.url",
            "type": "string",
            "value": null
        },
        {
            "name": "remoteWrite.*.write_relabel_configs",
            "desc": "List of remote write relabel configurations.",
            "nixName": "remoteWrite.*.write_relabel_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.action",
            "desc": "Action to perform based on regex matching.  Defaults to  replace  in prometheus when set to null .",
            "nixName": "remoteWrite.*.write_relabel_configs.*.action",
            "type": "null or one of \"replace\", \"lowercase\", \"uppercase\", \"keep\", \"drop\", \"hashmod\", \"labelmap\", \"labeldrop\", \"labelkeep\"",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.modulus",
            "desc": "Modulus to take of the hash of the source label values.",
            "nixName": "remoteWrite.*.write_relabel_configs.*.modulus",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.regex",
            "desc": "Regular expression against which the extracted value is matched.  Defaults to  (.*)  in prometheus when set to null .",
            "nixName": "remoteWrite.*.write_relabel_configs.*.regex",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.replacement",
            "desc": "Replacement value against which a regex replace is performed if theregular expression matches.  Defaults to  $1  in prometheus when set to null .",
            "nixName": "remoteWrite.*.write_relabel_configs.*.replacement",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.separator",
            "desc": "Separator placed between concatenated source label values.  Defaults to  ;  in prometheus when set to null .",
            "nixName": "remoteWrite.*.write_relabel_configs.*.separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.source_labels",
            "desc": "The source labels select values from existing labels. Their contentis concatenated using the configured separator and matched against theconfigured regular expression.",
            "nixName": "remoteWrite.*.write_relabel_configs.*.source_labels",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "remoteWrite.*.write_relabel_configs.*.target_label",
            "desc": "Label to which the resulting value is written in a replace action. Itis mandatory for replace actions.",
            "nixName": "remoteWrite.*.write_relabel_configs.*.target_label",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "retentionTime",
            "desc": "How long to retain samples in storage.",
            "nixName": "retentionTime",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "ruleFiles",
            "desc": "Any additional rules files to include in this configuration.",
            "nixName": "ruleFiles",
            "type": "list of path",
            "value": "[ ]"
        },
        {
            "name": "rules",
            "desc": "Alerting and/or Recording rules to evaluate at runtime.",
            "nixName": "rules",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "sachet.address",
            "desc": "The address Sachet will listen to.",
            "nixName": "sachet.address",
            "type": "string",
            "value": "\"localhost\""
        },
        {
            "name": "sachet.configuration",
            "desc": "Sachet\u2019s configuration as a nix attribute set.",
            "nixName": "sachet.configuration",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "sachet.enable",
            "desc": "Whether to enable Sachet, an SMS alerting tool for the PrometheusAlertmanager.",
            "nixName": "sachet.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "sachet.port",
            "desc": "The port Sachet will listen to.",
            "nixName": "sachet.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "9876"
        },
        {
            "name": "scrapeConfigs",
            "desc": "A list of scrape configurations.",
            "nixName": "scrapeConfigs",
            "type": "list of (submodule)",
            "value": "[ ]"
        },
        {
            "name": "scrapeConfigs.*.authorization",
            "desc": "Sets the  Authorization  header on every scrape requestwith the configured credentials.",
            "nixName": "scrapeConfigs.*.authorization",
            "type": "null or (attribute set)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs",
            "desc": "List of Azure service discovery configurations.",
            "nixName": "scrapeConfigs.*.azure_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.authentication_method",
            "desc": "The authentication method, either OAuth or ManagedIdentity. See  https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview   Defaults to  OAuth  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.authentication_method",
            "type": "null or one of \"OAuth\", \"ManagedIdentity\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.client_id",
            "desc": "Optional client ID. Only required with authentication_methodOAuth.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.client_secret",
            "desc": "Optional client secret. Only required with authentication_methodOAuth.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.environment",
            "desc": "The Azure environment.  Defaults to  AzurePublicCloud  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.environment",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.port",
            "desc": "The port to scrape metrics from. If using the public IP address, thismust instead be specified in the relabeling rule.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the instance list.  Defaults to  300s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.subscription_id",
            "desc": "The subscription ID.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.subscription_id",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tenant_id",
            "desc": "Optional tenant ID. Only required with authentication_methodOAuth.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tenant_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.azure_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.azure_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.basic_auth",
            "desc": "Sets the  Authorization  header on every scrape requestwith the configured username and password. password and password_fileare mutually exclusive.",
            "nixName": "scrapeConfigs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.bearer_token",
            "desc": "Sets the  Authorization  header on every scrape requestwith the configured bearer token. It is mutually exclusive with  bearer_token_file .",
            "nixName": "scrapeConfigs.*.bearer_token",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.bearer_token_file",
            "desc": "Sets the  Authorization  header on every scrape requestwith the bearer token read from the configured file. It is mutuallyexclusive with  bearer_token .",
            "nixName": "scrapeConfigs.*.bearer_token_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.body_size_limit",
            "desc": "An uncompressed response body larger than this many bytes will causethe scrape to fail. 0 means no limit. Example: 100MB. This is anexperimental feature, this behaviour could change or be removed in thefuture.  Defaults to  0  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.body_size_limit",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs",
            "desc": "List of Consul service discovery configurations.",
            "nixName": "scrapeConfigs.*.consul_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.allow_stale",
            "desc": "Allow stale Consul results (see  https://www.consul.io/api/index.html#consistency-modes ).  Will reduce load on Consul.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.allow_stale",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.datacenter",
            "desc": "Consul datacenter",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.datacenter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.node_meta",
            "desc": "Node metadata used to filter nodes for a given service.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.node_meta",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.password",
            "desc": "Consul password",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.refresh_interval",
            "desc": "The time after which the provided names are refreshed.  On large setup it might be a good idea to increase this value becausethe catalog will change all the time.  Defaults to  30s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.scheme",
            "desc": "Consul scheme Defaults to  http  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.scheme",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.server",
            "desc": "Consul server to query.  Defaults to  localhost:8500  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.server",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.services",
            "desc": "A list of services for which targets are retrieved.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.services",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tag_separator",
            "desc": "The string by which Consul tags are joined into the tag label.  Defaults to  ,  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tag_separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tags",
            "desc": "An optional list of tags used to filter nodes for a given service.Services must contain all tags in the list.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tags",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config",
            "desc": "Configures the Consul request\u2019s TLS settings.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.token",
            "desc": "Consul token",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.token",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.consul_sd_configs.*.username",
            "desc": "Consul username",
            "nixName": "scrapeConfigs.*.consul_sd_configs.*.username",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs",
            "desc": "List of DigitalOcean service discovery configurations.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.port",
            "desc": "The port to scrape metrics from.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.refresh_interval",
            "desc": "The time after which the droplets are refreshed.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.digitalocean_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dns_sd_configs",
            "desc": "List of DNS service discovery configurations.",
            "nixName": "scrapeConfigs.*.dns_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dns_sd_configs.*.names",
            "desc": "A list of DNS SRV record names to be queried.",
            "nixName": "scrapeConfigs.*.dns_sd_configs.*.names",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.dns_sd_configs.*.port",
            "desc": "The port number used if the query type is not SRV.",
            "nixName": "scrapeConfigs.*.dns_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dns_sd_configs.*.refresh_interval",
            "desc": "The time after which the provided names are refreshed.  Defaults to  30s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.dns_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dns_sd_configs.*.type",
            "desc": "The type of DNS query to perform. One of SRV, A, or AAAA.  Defaults to  SRV  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.dns_sd_configs.*.type",
            "type": "null or one of \"SRV\", \"A\", \"AAAA\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs",
            "desc": "List of Docker service discovery configurations.",
            "nixName": "scrapeConfigs.*.docker_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.filters",
            "desc": "Optional filters to limit the discovery process to a subset ofavailable resources.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.filters",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.filters.*.name",
            "desc": "Name of the filter. The available filters are listed in the upstreamdocumentation: Services:  https://docs.docker.com/engine/api/v1.40/#operation/ServiceList Tasks:  https://docs.docker.com/engine/api/v1.40/#operation/TaskList Nodes:  https://docs.docker.com/engine/api/v1.40/#operation/NodeList",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.filters.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.filters.*.values",
            "desc": "Value for the filter.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.filters.*.values",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.host",
            "desc": "Address of the Docker daemon.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.host",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.host_networking_host",
            "desc": "The host to use if the container is in host networking mode.  Defaults to  localhost  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.host_networking_host",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.port",
            "desc": "The port to scrape metrics from, when  role  is nodes, andfor discovered tasks and services that don\u2019t have published ports.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.refresh_interval",
            "desc": "The time after which the containers are refreshed.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.docker_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.docker_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs",
            "desc": "List of Docker Swarm service discovery configurations.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters",
            "desc": "Optional filters to limit the discovery process to a subset ofavailable resources.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.name",
            "desc": "Name of the filter. The available filters are listed in the upstreamdocumentation: Services:  https://docs.docker.com/engine/api/v1.40/#operation/ServiceList Tasks:  https://docs.docker.com/engine/api/v1.40/#operation/TaskList Nodes:  https://docs.docker.com/engine/api/v1.40/#operation/NodeList",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.values",
            "desc": "Value for the filter.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.filters.*.values",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.host",
            "desc": "Address of the Docker daemon.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.host",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.port",
            "desc": "The port to scrape metrics from, when  role  is nodes, andfor discovered tasks and services that don\u2019t have published ports.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.refresh_interval",
            "desc": "The time after which the containers are refreshed.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.role",
            "desc": "Role of the targets to retrieve. Must be  services , tasks , or  nodes .",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.role",
            "type": "one of \"services\", \"tasks\", \"nodes\"",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.dockerswarm_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs",
            "desc": "List of EC2 service discovery configurations.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.access_key",
            "desc": "The AWS API key id. If blank, the environment variable AWS_ACCESS_KEY_ID  is used.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.access_key",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.endpoint",
            "desc": "Custom endpoint to be used.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.endpoint",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.filters",
            "desc": "Filters can be used optionally to filter the instance list by othercriteria.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.filters",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.name",
            "desc": "See  thislist  for the available filters.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.name",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.values",
            "desc": "Value of the filter.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.filters.*.values",
            "type": "list of string",
            "value": "[ ]"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.port",
            "desc": "The port to scrape metrics from. If using the public IP address, thismust instead be specified in the relabeling rule.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.profile",
            "desc": "Named AWS profile used to connect to the API.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.profile",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the instance list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.region",
            "desc": "The AWS Region. If blank, the region from the instance metadata isused.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.region",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.role_arn",
            "desc": "AWS Role ARN, an alternative to using AWS API keys.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.role_arn",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.ec2_sd_configs.*.secret_key",
            "desc": "The AWS API key secret. If blank, the environment variable AWS_SECRET_ACCESS_KEY  is used.",
            "nixName": "scrapeConfigs.*.ec2_sd_configs.*.secret_key",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs",
            "desc": "List of Eureka service discovery configurations.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.server",
            "desc": "The URL to connect to the Eureka server.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.server",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.eureka_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.file_sd_configs",
            "desc": "List of file service discovery configurations.",
            "nixName": "scrapeConfigs.*.file_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.file_sd_configs.*.files",
            "desc": "Patterns for files from which target groups are extracted. Refer tothe Prometheus documentation for permitted filename patterns andformats.",
            "nixName": "scrapeConfigs.*.file_sd_configs.*.files",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.file_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the files.  Defaults to  5m  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.file_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs",
            "desc": "List of Google Compute Engine service discovery configurations.  See  therelevant Prometheus configuration docs  for more detail.",
            "nixName": "scrapeConfigs.*.gce_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs.*.filter",
            "desc": "Filter can be used optionally to filter the instance list by othercriteria Syntax of this filter string is described here in the filterquery parameter section:  https://cloud.google.com/compute/docs/reference/latest/instances/list .",
            "nixName": "scrapeConfigs.*.gce_sd_configs.*.filter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs.*.port",
            "desc": "The port to scrape metrics from. If using the public IP address, thismust instead be specified in the relabeling rule.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.gce_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs.*.project",
            "desc": "The GCP Project.",
            "nixName": "scrapeConfigs.*.gce_sd_configs.*.project",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the cloud instance list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.gce_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs.*.tag_separator",
            "desc": "The tag separator used to separate concatenated GCE instance networktags.  See the GCP documentation on network tags for more information:  https://cloud.google.com/vpc/docs/add-remove-network-tags   Defaults to  ,  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.gce_sd_configs.*.tag_separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.gce_sd_configs.*.zone",
            "desc": "The zone of the scrape targets. If you need multiple zones usemultiple gce_sd_configs.",
            "nixName": "scrapeConfigs.*.gce_sd_configs.*.zone",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs",
            "desc": "List of Hetzner service discovery configurations.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.port",
            "desc": "The port to scrape metrics from.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.refresh_interval",
            "desc": "The time after which the servers are refreshed.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.role",
            "desc": "The Hetzner role of entities that should be discovered. One of robot  or  hcloud .",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.role",
            "type": "one of \"robot\", \"hcloud\"",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.hetzner_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.honor_labels",
            "desc": "Controls how Prometheus handles conflicts between labels that arealready present in scraped data and labels that Prometheus would attachserver-side (\u201cjob\u201d and \u201cinstance\u201d labels, manually configured targetlabels, and labels generated by service discovery implementations).  If honor_labels is set to \u201ctrue\u201d, label conflicts are resolved bykeeping label values from the scraped data and ignoring the conflictingserver-side labels.  If honor_labels is set to \u201cfalse\u201d, label conflicts are resolved byrenaming conflicting labels in the scraped data to\u201cexported_<original-label>\u201d (for example \u201cexported_instance\u201d,\u201cexported_job\u201d) and then attaching server-side labels. This is usefulfor use cases such as federation, where all labels specified in thetarget should be preserved.  Defaults to  false  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.honor_labels",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.honor_timestamps",
            "desc": "honor_timestamps controls whether Prometheus respects the timestampspresent in scraped data.  If honor_timestamps is set to  true , the timestamps ofthe metrics exposed by the target will be used.  If honor_timestamps is set to  false , the timestamps ofthe metrics exposed by the target will be ignored.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.honor_timestamps",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs",
            "desc": "List of HTTP service discovery configurations.",
            "nixName": "scrapeConfigs.*.http_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth",
            "desc": "Authentication information used to authenticate to the API server.password and password_file are mutually exclusive.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-query the endpoint.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.tls_config",
            "desc": "Configures the scrape request\u2019s TLS settings.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.http_sd_configs.*.url",
            "desc": "URL from which the targets are fetched.",
            "nixName": "scrapeConfigs.*.http_sd_configs.*.url",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.job_name",
            "desc": "The job name assigned to scraped metrics by default.",
            "nixName": "scrapeConfigs.*.job_name",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs",
            "desc": "List of Kubernetes service discovery configurations.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.api_server",
            "desc": "The API server addresses. If left empty, Prometheus is assumed to runinside of the cluster and will discover API servers automatically anduse the pod\u2019s CA certificate and bearer token file at/var/run/secrets/kubernetes.io/serviceaccount/.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.api_server",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.kubeconfig_file",
            "desc": "Optional path to a kubeconfig file. Note that api_server andkube_config are mutually exclusive.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.kubeconfig_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces",
            "desc": "Optional namespace discovery. If omitted, all namespaces areused.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces.names",
            "desc": "Namespace name.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.namespaces.names",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.role",
            "desc": "The Kubernetes role of entities that should be discovered. One ofendpoints, service, pod, node, or ingress.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.role",
            "type": "one of \"endpoints\", \"service\", \"pod\", \"node\", \"ingress\"",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors",
            "desc": "Optional label and field selectors to limit the discovery process toa subset of available resources. See  https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/ and  https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ to learn more about the possible filters that can be used. Endpointsrole supports pod, service and endpoints selectors, other roles onlysupport selectors matching the role itself (e.g. node role can onlycontain node selectors).  Note: When making decision about using field/label selector make surethat this is the best approach - it will prevent Prometheus from reusingsingle list/watch for all scrape configs. This might result in a biggerload on the Kubernetes API, because per each selector combination therewill be additional LIST/WATCH. On the other hand, if you just want tomonitor small subset of pods in large cluster it\u2019s recommended to useselectors. Decision, if selectors should be used or not depends on theparticular situation.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.field",
            "desc": "Selector field",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.field",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.label",
            "desc": "Selector label",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.label",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.role",
            "desc": "Selector role",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.selectors.*.role",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.kubernetes_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs",
            "desc": "List of Kuma service discovery configurations.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.fetch_timeout",
            "desc": "The time after which the monitoring assignments are refreshed.  Defaults to  2m  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.fetch_timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.refresh_interval",
            "desc": "The time to wait between polling update requests.  Defaults to  30s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.server",
            "desc": "Address of the Kuma Control Plane\u2019s MADS xDS server.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.server",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.kuma_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.label_limit",
            "desc": "Per-scrape limit on number of labels that will be accepted for asample. If more than this number of labels are present postmetric-relabeling, the entire scrape will be treated as failed. 0 meansno limit.  Defaults to  0  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.label_limit",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.label_name_length_limit",
            "desc": "Per-scrape limit on length of labels name that will be accepted for asample. If a label name is longer than this number postmetric-relabeling, the entire scrape will be treated as failed. 0 meansno limit.  Defaults to  0  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.label_name_length_limit",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.label_value_length_limit",
            "desc": "Per-scrape limit on length of labels value that will be accepted fora sample. If a label value is longer than this number postmetric-relabeling, the entire scrape will be treated as failed. 0 meansno limit.  Defaults to  0  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.label_value_length_limit",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs",
            "desc": "List of Lightsail service discovery configurations.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.access_key",
            "desc": "The AWS API keys. If blank, the environment variable AWS_ACCESS_KEY_ID  is used.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.access_key",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.endpoint",
            "desc": "Custom endpoint to be used.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.endpoint",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.port",
            "desc": "The port to scrape metrics from. If using the public IP address, thismust instead be specified in the relabeling rule.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.profile",
            "desc": "Named AWS profile used to connect to the API.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.profile",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the instance list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.region",
            "desc": "The AWS region. If blank, the region from the instance metadata isused.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.region",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.role_arn",
            "desc": "AWS Role ARN, an alternative to using AWS API keys.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.role_arn",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.lightsail_sd_configs.*.secret_key",
            "desc": "The AWS API keys. If blank, the environment variable AWS_SECRET_ACCESS_KEY  is used.",
            "nixName": "scrapeConfigs.*.lightsail_sd_configs.*.secret_key",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs",
            "desc": "List of Linode service discovery configurations.",
            "nixName": "scrapeConfigs.*.linode_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.port",
            "desc": "The port to scrape metrics from.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.refresh_interval",
            "desc": "The time after which the linode instances are refreshed.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tag_separator",
            "desc": "The string by which Linode Instance tags are joined into the taglabel.  Defaults to  ,  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tag_separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.linode_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.linode_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs",
            "desc": "List of Marathon service discovery configurations.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.auth_token",
            "desc": "Optional authentication information for token-based authentication: https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token It is mutually exclusive with  auth_token_file  and otherauthentication mechanisms.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.auth_token",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.auth_token_file",
            "desc": "Optional authentication information for token-based authentication: https://docs.mesosphere.com/1.11/security/ent/iam-api/#passing-an-authentication-token It is mutually exclusive with  auth_token  and otherauthentication mechanisms.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.auth_token_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.refresh_interval",
            "desc": "Polling interval.  Defaults to  30s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.servers",
            "desc": "List of URLs to be used to contact Marathon servers. You need toprovide at least one server URL.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.servers",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.marathon_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs",
            "desc": "List of metric relabel configurations.",
            "nixName": "scrapeConfigs.*.metric_relabel_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.action",
            "desc": "Action to perform based on regex matching.  Defaults to  replace  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.action",
            "type": "null or one of \"replace\", \"lowercase\", \"uppercase\", \"keep\", \"drop\", \"hashmod\", \"labelmap\", \"labeldrop\", \"labelkeep\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.modulus",
            "desc": "Modulus to take of the hash of the source label values.",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.modulus",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.regex",
            "desc": "Regular expression against which the extracted value is matched.  Defaults to  (.*)  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.regex",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.replacement",
            "desc": "Replacement value against which a regex replace is performed if theregular expression matches.  Defaults to  $1  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.replacement",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.separator",
            "desc": "Separator placed between concatenated source label values.  Defaults to  ;  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.source_labels",
            "desc": "The source labels select values from existing labels. Their contentis concatenated using the configured separator and matched against theconfigured regular expression.",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.source_labels",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metric_relabel_configs.*.target_label",
            "desc": "Label to which the resulting value is written in a replace action. Itis mandatory for replace actions.",
            "nixName": "scrapeConfigs.*.metric_relabel_configs.*.target_label",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.metrics_path",
            "desc": "The HTTP resource path on which to fetch metrics from targets.  Defaults to  /metrics  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.metrics_path",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.nerve_sd_configs",
            "desc": "List of AirBnB\u2019s Nerve service discovery configurations.",
            "nixName": "scrapeConfigs.*.nerve_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.nerve_sd_configs.*.paths",
            "desc": "Paths can point to a single service, or the root of a tree ofservices.",
            "nixName": "scrapeConfigs.*.nerve_sd_configs.*.paths",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.nerve_sd_configs.*.servers",
            "desc": "The Zookeeper servers.",
            "nixName": "scrapeConfigs.*.nerve_sd_configs.*.servers",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.nerve_sd_configs.*.timeout",
            "desc": "Timeout value.  Defaults to  10s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.nerve_sd_configs.*.timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs",
            "desc": "List of OpenStack service discovery configurations.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.all_tenants",
            "desc": "Whether the service discovery should list all instances for allprojects. It is only relevant for the \u2018instance\u2019 role and usuallyrequires admin permissions.  Defaults to  false  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.all_tenants",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_id",
            "desc": "The application_credential_id or application_credential_name fieldsare required if using an application credential to authenticate. Someproviders allow you to create an application credential to authenticaterather than a password.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_name",
            "desc": "The application_credential_id or application_credential_name fieldsare required if using an application credential to authenticate. Someproviders allow you to create an application credential to authenticaterather than a password.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_secret",
            "desc": "The application_credential_secret field is required if using anapplication credential to authenticate.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.application_credential_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.availability",
            "desc": "The availability of the endpoint to connect to. Must be one ofpublic, admin or internal.  Defaults to  public  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.availability",
            "type": "null or one of \"public\", \"admin\", \"internal\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.domain_id",
            "desc": "At most one of domain_id and domain_name must be provided if usingusername with Identity V3. Otherwise, either are optional.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.domain_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.domain_name",
            "desc": "At most one of domain_id and domain_name must be provided if usingusername with Identity V3. Otherwise, either are optional.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.domain_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.identity_endpoint",
            "desc": "identity_endpoint specifies the HTTP endpoint that is required towork with the Identity API of the appropriate version. While it\u2019sultimately needed by all of the identity services, it will often bepopulated by a provider-level function.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.identity_endpoint",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.password",
            "desc": "password for the Identity V2 and V3 APIs. Consult with yourprovider\u2019s control panel to discover your account\u2019s preferred method ofauthentication.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.port",
            "desc": "The port to scrape metrics from. If using the public IP address, thismust instead be specified in the relabeling rule.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.project_id",
            "desc": "The project_id and project_name fields are optional for the IdentityV2 API. Some providers allow you to specify a project_name instead ofthe project_id. Some require both. Your provider\u2019s authenticationpolicies will determine how these fields influence authentication.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.project_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.project_name",
            "desc": "The project_id and project_name fields are optional for the IdentityV2 API. Some providers allow you to specify a project_name instead ofthe project_id. Some require both. Your provider\u2019s authenticationpolicies will determine how these fields influence authentication.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.project_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the instance list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.region",
            "desc": "The OpenStack Region.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.region",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.role",
            "desc": "The OpenStack role of entities that should be discovered.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.role",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.userid",
            "desc": "username is required if using Identity V2 API. Consult with yourprovider\u2019s control panel to discover your account\u2019s username. InIdentity V3, either userid or a combination of username and domain_id ordomain_name are needed.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.userid",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.openstack_sd_configs.*.username",
            "desc": "username is required if using Identity V2 API. Consult with yourprovider\u2019s control panel to discover your account\u2019s username. InIdentity V3, either userid or a combination of username and domain_id ordomain_name are needed.",
            "nixName": "scrapeConfigs.*.openstack_sd_configs.*.username",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.params",
            "desc": "Optional HTTP URL parameters.",
            "nixName": "scrapeConfigs.*.params",
            "type": "null or (attribute set of list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs",
            "desc": "List of PuppetDB service discovery configurations.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.include_parameters",
            "desc": "Whether to include the parameters as meta labels. Due to thedifferences between parameter types and Prometheus labels, someparameters might not be rendered. The format of the parameters mightalso change in future releases.  Note: Enabling this exposes parameters in the Prometheus UI and API.Make sure that you don\u2019t have secrets exposed as parameters if youenable this.  Defaults to  false  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.include_parameters",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.port",
            "desc": "The port to scrape metrics from.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.query",
            "desc": "Puppet Query Language (PQL) query. Only resources are supported.  https://puppet.com/docs/puppetdb/latest/api/query/v4/pql.html",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.query",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the resources list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.puppetdb_sd_configs.*.url",
            "desc": "The URL of the PuppetDB root query endpoint.",
            "nixName": "scrapeConfigs.*.puppetdb_sd_configs.*.url",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.relabel_configs",
            "desc": "List of relabel configurations.",
            "nixName": "scrapeConfigs.*.relabel_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.action",
            "desc": "Action to perform based on regex matching.  Defaults to  replace  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.relabel_configs.*.action",
            "type": "null or one of \"replace\", \"lowercase\", \"uppercase\", \"keep\", \"drop\", \"hashmod\", \"labelmap\", \"labeldrop\", \"labelkeep\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.modulus",
            "desc": "Modulus to take of the hash of the source label values.",
            "nixName": "scrapeConfigs.*.relabel_configs.*.modulus",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.regex",
            "desc": "Regular expression against which the extracted value is matched.  Defaults to  (.*)  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.relabel_configs.*.regex",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.replacement",
            "desc": "Replacement value against which a regex replace is performed if theregular expression matches.  Defaults to  $1  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.relabel_configs.*.replacement",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.separator",
            "desc": "Separator placed between concatenated source label values.  Defaults to  ;  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.relabel_configs.*.separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.source_labels",
            "desc": "The source labels select values from existing labels. Their contentis concatenated using the configured separator and matched against theconfigured regular expression.",
            "nixName": "scrapeConfigs.*.relabel_configs.*.source_labels",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.relabel_configs.*.target_label",
            "desc": "Label to which the resulting value is written in a replace action. Itis mandatory for replace actions.",
            "nixName": "scrapeConfigs.*.relabel_configs.*.target_label",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.sample_limit",
            "desc": "Per-scrape limit on number of scraped samples that will be accepted.If more than this number of samples are present after metric relabellingthe entire scrape will be treated as failed. 0 means no limit.  Defaults to  0  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.sample_limit",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs",
            "desc": "List of Scaleway service discovery configurations.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.access_key",
            "desc": "Access key to use.  https://console.scaleway.com/project/credentials",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.access_key",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.api_url",
            "desc": "API URL to use when doing the server listing requests.  Defaults to  https://api.scaleway.com  in prometheus whenset to  null .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.api_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.name_filter",
            "desc": "Specify a name filter (works as a LIKE) to apply on the serverlisting request.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.name_filter",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.port",
            "desc": "The port to scrape metrics from.  Defaults to  80  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.project_id",
            "desc": "Project ID of the targets.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.project_id",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the managed targets list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.role",
            "desc": "Role of the targets to retrieve. Must be  instance  or baremetal .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.role",
            "type": "one of \"instance\", \"baremetal\"",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key",
            "desc": "Secret key to use when listing targets.  https://console.scaleway.com/project/credentials It is mutually exclusive with  secret_key_file .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key_file",
            "desc": "Sets the secret key with the credentials read from the configuredfile. It is mutually exclusive with  secret_key .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.secret_key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tags_filter",
            "desc": "Specify a tag filter (a server needs to have all defined tags to belisted) to apply on the server listing request.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tags_filter",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scaleway_sd_configs.*.zone",
            "desc": "Zone is the availability zone of your targets (e.g. fr-par-1).  Defaults to  fr-par-1  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.scaleway_sd_configs.*.zone",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scheme",
            "desc": "The URL scheme with which to fetch metrics from targets.  Defaults to  http  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.scheme",
            "type": "null or one of \"http\", \"https\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scrape_interval",
            "desc": "How frequently to scrape targets from this job. Defaults to theglobally configured default.",
            "nixName": "scrapeConfigs.*.scrape_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.scrape_timeout",
            "desc": "Per-target timeout when scraping this job. Defaults to the globallyconfigured default.",
            "nixName": "scrapeConfigs.*.scrape_timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.serverset_sd_configs",
            "desc": "List of Zookeeper Serverset service discovery configurations.",
            "nixName": "scrapeConfigs.*.serverset_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.serverset_sd_configs.*.paths",
            "desc": "Paths can point to a single service, or the root of a tree ofservices.",
            "nixName": "scrapeConfigs.*.serverset_sd_configs.*.paths",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.serverset_sd_configs.*.servers",
            "desc": "The Zookeeper servers.",
            "nixName": "scrapeConfigs.*.serverset_sd_configs.*.servers",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.serverset_sd_configs.*.timeout",
            "desc": "Timeout value.  Defaults to  10s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.serverset_sd_configs.*.timeout",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.static_configs",
            "desc": "List of labeled target groups for this job.",
            "nixName": "scrapeConfigs.*.static_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.static_configs.*.labels",
            "desc": "Labels assigned to all metrics scraped from the targets.",
            "nixName": "scrapeConfigs.*.static_configs.*.labels",
            "type": "attribute set of string",
            "value": "{ }"
        },
        {
            "name": "scrapeConfigs.*.static_configs.*.targets",
            "desc": "The targets specified by the target group.",
            "nixName": "scrapeConfigs.*.static_configs.*.targets",
            "type": "list of string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.target_limit",
            "desc": "Per-scrape config limit on number of unique targets that will beaccepted. If more than this number of targets are present after targetrelabeling, Prometheus will mark the targets as failed without scrapingthem. 0 means no limit. This is an experimental feature, this behaviourcould change in the future.  Defaults to  0  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.target_limit",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.tls_config",
            "desc": "Configures the scrape request\u2019s TLS settings.",
            "nixName": "scrapeConfigs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs",
            "desc": "List of Triton Serverset service discovery configurations.",
            "nixName": "scrapeConfigs.*.triton_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.account",
            "desc": "The account to use for discovering new targets.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.account",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.dns_suffix",
            "desc": "The DNS suffix which should be applied to target.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.dns_suffix",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.endpoint",
            "desc": "The Triton discovery endpoint (e.g. cmon.us-east-3b.triton.zone ). This is often the same valueas dns_suffix.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.endpoint",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.groups",
            "desc": "A list of groups for which targets are retrieved, only supported whentargeting the  container  role. If omitted all containersowned by the requesting account are scraped.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.groups",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.port",
            "desc": "The port to use for discovery and metric scraping.  Defaults to  9163  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.port",
            "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.refresh_interval",
            "desc": "The interval which should be used for refreshing targets.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.role",
            "desc": "The type of targets to discover, can be set to:   \u201ccontainer\u201d to discover virtual machines (SmartOS zones,lx/KVM/bhyve branded zones) running on Triton  \u201ccn\u201d to discover compute nodes (servers/global zones) making up theTriton infrastructure   Defaults to  container  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.role",
            "type": "null or one of \"container\", \"cn\"",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.triton_sd_configs.*.version",
            "desc": "The Triton discovery API version.  Defaults to  1  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.triton_sd_configs.*.version",
            "type": "null or signed integer",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs",
            "desc": "List of Uyuni Serverset service discovery configurations.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs",
            "type": "null or (list of (submodule))",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization",
            "desc": "Optional  Authorization  header configuration.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials",
            "desc": "Sets the credentials. It is mutually exclusive with credentials_file .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials_file",
            "desc": "Sets the credentials to the credentials read from the configuredfile. It is mutually exclusive with  credentials .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.credentials_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.type",
            "desc": "Sets the authentication type.  Defaults to  Bearer  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.authorization.type",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth",
            "desc": "Optional HTTP basic authentication information.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password",
            "desc": "HTTP password",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password_file",
            "desc": "HTTP password file",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.password_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.username",
            "desc": "HTTP username",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.basic_auth.username",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.entitlement",
            "desc": "The entitlement string to filter eligible systems.  Defaults to  monitoring_entitled  in prometheus when setto  null .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.entitlement",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.follow_redirects",
            "desc": "Configure whether HTTP requests follow HTTP 3xx redirects.  Defaults to  true  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.follow_redirects",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2",
            "desc": "Optional OAuth 2.0 configuration. Cannot be used at the same time asbasic_auth or authorization.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_id",
            "desc": "OAuth client ID.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_id",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret",
            "desc": "OAuth client secret.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret_file",
            "desc": "Read the client secret from a file. It is mutually exclusive with client_secret .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.client_secret_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.endpoint_params",
            "desc": "Optional parameters to append to the token URL.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.endpoint_params",
            "type": "null or (attribute set of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.scopes",
            "desc": "Scopes for the token request.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.scopes",
            "type": "null or (list of string)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.token_url",
            "desc": "The URL to fetch the token from.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.oauth2.token_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.password",
            "desc": "Credentials are used to authenticate the requests to Uyuni API.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.password",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.proxy_url",
            "desc": "Optional proxy URL.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.proxy_url",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.refresh_interval",
            "desc": "Refresh interval to re-read the managed targets list.  Defaults to  60s  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.refresh_interval",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.separator",
            "desc": "The string by which Uyuni group names are joined into the groupslabel  Defaults to  ,  in prometheus when set to null .",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.separator",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.server",
            "desc": "The URL to connect to the Uyuni server.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.server",
            "type": "string",
            "value": null
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config",
            "desc": "TLS configuration.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config",
            "type": "null or (submodule)",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.ca_file",
            "desc": "CA certificate to validate API server certificate with.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.ca_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.cert_file",
            "desc": "Certificate file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.cert_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.insecure_skip_verify",
            "desc": "Disable validation of the server certificate.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.insecure_skip_verify",
            "type": "null or boolean",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.key_file",
            "desc": "Key file for client cert authentication to the server.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.key_file",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.server_name",
            "desc": "ServerName extension to indicate the name of the server.  http://tools.ietf.org/html/rfc4366#section-3.1",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.tls_config.server_name",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "scrapeConfigs.*.uyuni_sd_configs.*.username",
            "desc": "Credentials are used to authenticate the requests to Uyuni API.",
            "nixName": "scrapeConfigs.*.uyuni_sd_configs.*.username",
            "type": "string",
            "value": null
        },
        {
            "name": "stateDir",
            "desc": "Directory below  /var/lib  to store Prometheus metricsdata. This directory will be created automatically using systemd\u2019sStateDirectory mechanism.",
            "nixName": "stateDir",
            "type": "string",
            "value": "\"prometheus2\""
        },
        {
            "name": "webConfigFile",
            "desc": "Specifies which file should be used as web.config.file and be passedon startup. See  https://prometheus.io/docs/prometheus/latest/configuration/https/ for valid options.",
            "nixName": "webConfigFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "webExternalUrl",
            "desc": "The URL under which Prometheus is externally reachable (for example,if Prometheus is served via a reverse proxy).",
            "nixName": "webExternalUrl",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "xmpp-alerts.enable",
            "desc": "Whether to enable XMPP Web hook service for Alertmanager.",
            "nixName": "xmpp-alerts.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "xmpp-alerts.settings",
            "desc": "Configuration for prometheus xmpp-alerts, see  https://github.com/jelmer/prometheus-xmpp-alerts/blob/master/xmpp-alerts.yml.example for supported values.",
            "nixName": "xmpp-alerts.settings",
            "type": "YAML value",
            "value": "{ }"
        }
    ],
    "show": false,
    "tested": false
}