{
    "name": "Discourse",
    "desc": "Discourse is an open source discussion platform",
    "tags": [
        "Communication - Social Networks and Forums"
    ],
    "website": "https://www.discourse.org/",
    "logo": "https://www.discourse.org/a/img/favicon.ico",
    "specs": {
        "ram": 1024,
        "storage": 10240
    },
    "nixName": "discourse",
    "options": [
        {
            "name": "admin.email",
            "desc": "The admin user email address.",
            "nixName": "admin.email",
            "type": "string",
            "value": null
        },
        {
            "name": "admin.fullName",
            "desc": "The admin user\u2019s full name.",
            "nixName": "admin.fullName",
            "type": "string",
            "value": null
        },
        {
            "name": "admin.passwordFile",
            "desc": "A path to a file containing the admin user\u2019s password.  This should be a string, not a nix path, since nix paths are copiedinto the world-readable nix store.",
            "nixName": "admin.passwordFile",
            "type": "path",
            "value": null
        },
        {
            "name": "admin.skipCreate",
            "desc": "Do not create the admin account, instead rely on other existing adminaccounts.",
            "nixName": "admin.skipCreate",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "admin.username",
            "desc": "The admin user username.",
            "nixName": "admin.username",
            "type": "string",
            "value": null
        },
        {
            "name": "backendSettings",
            "desc": "Additional settings to put in the  discourse.conf  file.  Look in the  discourse_defaults.conf file in the upstream distribution to find available options.  Setting an option to  null  means \u201cdefine variable, butleave right-hand side empty\u201d.",
            "nixName": "backendSettings",
            "type": "attribute set of (null or string or signed integer or boolean or floating point number)",
            "value": "{ }"
        },
        {
            "name": "database.createLocally",
            "desc": "Whether a database should be automatically created on the local host.Set this to  false  if you plan on provisioning a localdatabase yourself. This has no effect if  services.discourse.database.host  is customized.",
            "nixName": "database.createLocally",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "database.host",
            "desc": "Discourse database hostname.  null  means \u201cprefer localunix socket connection\u201d.",
            "nixName": "database.host",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "database.ignorePostgresqlVersion",
            "desc": "Whether to allow other versions of PostgreSQL than the recommendedone. Only effective when  services.discourse.database.createLocally  isenabled.",
            "nixName": "database.ignorePostgresqlVersion",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "database.name",
            "desc": "Discourse database name.",
            "nixName": "database.name",
            "type": "string",
            "value": "\"discourse\""
        },
        {
            "name": "database.passwordFile",
            "desc": "File containing the Discourse database user password.  This should be a string, not a nix path, since nix paths are copiedinto the world-readable nix store.",
            "nixName": "database.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "database.pool",
            "desc": "Database connection pool size.",
            "nixName": "database.pool",
            "type": "signed integer",
            "value": "8"
        },
        {
            "name": "database.username",
            "desc": "Discourse database user.",
            "nixName": "database.username",
            "type": "string",
            "value": "\"discourse\""
        },
        {
            "name": "enable",
            "desc": "Whether to enable Discourse, an open source discussion platform.",
            "nixName": "enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "enableACME",
            "desc": "Whether an ACME certificate should be used to secure connections tothe server.",
            "nixName": "enableACME",
            "type": "boolean",
            "value": "<rendered-html><p><code>true</code>, unless <code class=\"interpreted-text\"\nrole=\"option\">services.discourse.sslCertificate</code> and <code\nclass=\"interpreted-text\"\nrole=\"option\">services.discourse.sslCertificateKey</code> are set.</p>\n</rendered-html>"
        },
        {
            "name": "hostname",
            "desc": "The hostname to serve Discourse on.",
            "nixName": "hostname",
            "type": "string",
            "value": "config.networking.fqdnOrHostName"
        },
        {
            "name": "mail.contactEmailAddress",
            "desc": "Email address of key contact responsible for this site. Used forcritical notifications, as well as on the  /about  contactform for urgent matters.",
            "nixName": "mail.contactEmailAddress",
            "type": "string",
            "value": "\"\""
        },
        {
            "name": "mail.incoming.apiKeyFile",
            "desc": "A file containing the Discourse API key used to add posts andmessages from mail. If left at its default value  null , onewill be automatically generated.  This should be a string, not a nix path, since nix paths are copiedinto the world-readable nix store.",
            "nixName": "mail.incoming.apiKeyFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "mail.incoming.enable",
            "desc": "Whether to set up Postfix to receive incoming mail.",
            "nixName": "mail.incoming.enable",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "mail.incoming.mailReceiverPackage",
            "desc": "The discourse-mail-receiver package to use.",
            "nixName": "mail.incoming.mailReceiverPackage",
            "type": "package",
            "value": "pkgs.discourse-mail-receiver"
        },
        {
            "name": "mail.incoming.replyEmailAddress",
            "desc": "Template for reply by email incoming email address, for example:%{reply_key}@reply.example.com or replies+%{reply_key}@example.com",
            "nixName": "mail.incoming.replyEmailAddress",
            "type": "string",
            "value": "\"%{reply_key}@${config.services.discourse.hostname}\""
        },
        {
            "name": "mail.notificationEmailAddress",
            "desc": "The  from:  email address used when sending all essentialsystem emails. The domain specified here must have SPF, DKIM and reversePTR records set correctly for email to arrive.",
            "nixName": "mail.notificationEmailAddress",
            "type": "string",
            "value": "\"${if config.services.discourse.mail.incoming.enable then \"notifications\" else \"noreply\"}@${config.services.discourse.hostname}\"\n"
        },
        {
            "name": "mail.outgoing.authentication",
            "desc": "Authentication type to use, see  https://api.rubyonrails.org/classes/ActionMailer/Base.html",
            "nixName": "mail.outgoing.authentication",
            "type": "null or one of \"plain\", \"login\", \"cram_md5\"",
            "value": "null"
        },
        {
            "name": "mail.outgoing.domain",
            "desc": "HELO domain to use for outgoing mail.",
            "nixName": "mail.outgoing.domain",
            "type": "string",
            "value": "config.services.discourse.hostname"
        },
        {
            "name": "mail.outgoing.enableStartTLSAuto",
            "desc": "Whether to try to use StartTLS.",
            "nixName": "mail.outgoing.enableStartTLSAuto",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "mail.outgoing.forceTLS",
            "desc": "Force implicit TLS as per RFC 8314 3.3.",
            "nixName": "mail.outgoing.forceTLS",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "mail.outgoing.opensslVerifyMode",
            "desc": "How OpenSSL checks the certificate, see  https://api.rubyonrails.org/classes/ActionMailer/Base.html",
            "nixName": "mail.outgoing.opensslVerifyMode",
            "type": "string",
            "value": "\"peer\""
        },
        {
            "name": "mail.outgoing.passwordFile",
            "desc": "A file containing the password of the SMTP server account.  This should be a string, not a nix path, since nix paths are copiedinto the world-readable nix store.",
            "nixName": "mail.outgoing.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "mail.outgoing.port",
            "desc": "The port of the SMTP server Discourse should use to send email.",
            "nixName": "mail.outgoing.port",
            "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)",
            "value": "25"
        },
        {
            "name": "mail.outgoing.serverAddress",
            "desc": "The address of the SMTP server Discourse should use to sendemail.",
            "nixName": "mail.outgoing.serverAddress",
            "type": "string",
            "value": "\"localhost\""
        },
        {
            "name": "mail.outgoing.username",
            "desc": "The username of the SMTP server.",
            "nixName": "mail.outgoing.username",
            "type": "null or string",
            "value": "null"
        },
        {
            "name": "nginx.enable",
            "desc": "Whether an  nginx  virtual host should be set up to serveDiscourse. Only disable if you\u2019re planning to use a different webserver, which is not recommended.",
            "nixName": "nginx.enable",
            "type": "boolean",
            "value": "true"
        },
        {
            "name": "package",
            "desc": "The discourse package to use.",
            "nixName": "package",
            "type": "package",
            "value": "pkgs.discourse"
        },
        {
            "name": "plugins",
            "desc": "Plugins to install as part of Discourse, expressed as a list ofderivations.",
            "nixName": "plugins",
            "type": "list of package",
            "value": "[ ]"
        },
        {
            "name": "redis.dbNumber",
            "desc": "Redis database number.",
            "nixName": "redis.dbNumber",
            "type": "signed integer",
            "value": "0"
        },
        {
            "name": "redis.host",
            "desc": "Redis server hostname.",
            "nixName": "redis.host",
            "type": "string",
            "value": "\"localhost\""
        },
        {
            "name": "redis.passwordFile",
            "desc": "File containing the Redis password.  This should be a string, not a nix path, since nix paths are copiedinto the world-readable nix store.",
            "nixName": "redis.passwordFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "redis.useSSL",
            "desc": "Connect to Redis with SSL.",
            "nixName": "redis.useSSL",
            "type": "boolean",
            "value": "config.services.discourse.redis.host != \"localhost\""
        },
        {
            "name": "secretKeyBaseFile",
            "desc": "The path to a file containing the  secret_key_base secret.  Discourse uses  secret_key_base  to encrypt the cookiestore, which contains session data, and to digest user auth tokens.  Needs to be a 64 byte long string of hexadecimal characters. You cangenerate one by running   openssl rand -hex 64 >/path/to/secret_key_base_file   This should be a string, not a nix path, since nix paths are copiedinto the world-readable nix store.",
            "nixName": "secretKeyBaseFile",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "sidekiqProcesses",
            "desc": "How many Sidekiq processes should be spawned.",
            "nixName": "sidekiqProcesses",
            "type": "signed integer",
            "value": "1"
        },
        {
            "name": "siteSettings",
            "desc": "Discourse site settings. These are the settings that can be changedfrom the UI. This only defines their default values: they can still beoverridden from the UI.  Available settings can be found by looking in the  site_settings.yml file of the upstream distribution. To find a setting\u2019s path, you onlyneed to care about the first two levels; i.e. its category and name. Seethe example.  Settings containing secret data should be set to an attribute setcontaining the attribute  _secret  - a string pointing to afile containing the value the option should be set to. See the exampleto get a better picture of this: in the resulting  config/nixos_site_settings.json  file, the login.github_client_secret  key will be set to the contentsof the  /run/keys/discourse_github_client_secret  file.",
            "nixName": "siteSettings",
            "type": "JSON value",
            "value": "{ }"
        },
        {
            "name": "sslCertificate",
            "desc": "The path to the server SSL certificate. Set this to enable SSL.",
            "nixName": "sslCertificate",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "sslCertificateKey",
            "desc": "The path to the server SSL certificate key. Set this to enableSSL.",
            "nixName": "sslCertificateKey",
            "type": "null or path",
            "value": "null"
        },
        {
            "name": "unicornTimeout",
            "desc": "Time in seconds before a request to Unicorn times out.  This can be raised if the system Discourse is running on is too slowto handle many requests within 30 seconds.",
            "nixName": "unicornTimeout",
            "type": "signed integer",
            "value": "30"
        }
    ],
    "show": false,
    "tested": false
}